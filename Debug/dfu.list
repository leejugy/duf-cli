
dfu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c0  0800510c  0800510c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800e8cc  0800e8cc  0000e8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec60  0800ec60  000101d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec60  0800ec60  000101d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec60  0800ec60  000101d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec60  0800ec60  0000ec60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec64  0800ec64  0000ec64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800ec68  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000101c  200001d0  0800ee38  000101d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011ec  0800ee38  000111ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000101f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001101b  00000000  00000000  0001023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000348f  00000000  00000000  00021257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  000246e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a44  00000000  00000000  000254b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a55f  00000000  00000000  00025ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144cf  00000000  00000000  00040453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000874ff  00000000  00000000  00054922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ab8  00000000  00000000  000dbe24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000df8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	; (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	200001d0 	.word	0x200001d0
 8005128:	00000000 	.word	0x00000000
 800512c:	0800e8b4 	.word	0x0800e8b4

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	; (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	; (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	; (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	200001d4 	.word	0x200001d4
 8005148:	0800e8b4 	.word	0x0800e8b4

0800514c <strlen>:
 800514c:	4603      	mov	r3, r0
 800514e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005152:	2a00      	cmp	r2, #0
 8005154:	d1fb      	bne.n	800514e <strlen+0x2>
 8005156:	1a18      	subs	r0, r3, r0
 8005158:	3801      	subs	r0, #1
 800515a:	4770      	bx	lr

0800515c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <MX_DMA_Init+0x38>)
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	4a0b      	ldr	r2, [pc, #44]	; (8005194 <MX_DMA_Init+0x38>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	6153      	str	r3, [r2, #20]
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <MX_DMA_Init+0x38>)
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800517a:	2200      	movs	r2, #0
 800517c:	2100      	movs	r1, #0
 800517e:	200f      	movs	r0, #15
 8005180:	f001 f8c3 	bl	800630a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005184:	200f      	movs	r0, #15
 8005186:	f001 f8dc 	bl	8006342 <HAL_NVIC_EnableIRQ>

}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40021000 	.word	0x40021000

08005198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800519e:	f107 0310 	add.w	r3, r7, #16
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	609a      	str	r2, [r3, #8]
 80051aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80051ac:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <MX_GPIO_Init+0x90>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <MX_GPIO_Init+0x90>)
 80051b2:	f043 0320 	orr.w	r3, r3, #32
 80051b6:	6193      	str	r3, [r2, #24]
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <MX_GPIO_Init+0x90>)
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051c4:	4b18      	ldr	r3, [pc, #96]	; (8005228 <MX_GPIO_Init+0x90>)
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	4a17      	ldr	r2, [pc, #92]	; (8005228 <MX_GPIO_Init+0x90>)
 80051ca:	f043 0308 	orr.w	r3, r3, #8
 80051ce:	6193      	str	r3, [r2, #24]
 80051d0:	4b15      	ldr	r3, [pc, #84]	; (8005228 <MX_GPIO_Init+0x90>)
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <MX_GPIO_Init+0x90>)
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	4a11      	ldr	r2, [pc, #68]	; (8005228 <MX_GPIO_Init+0x90>)
 80051e2:	f043 0304 	orr.w	r3, r3, #4
 80051e6:	6193      	str	r3, [r2, #24]
 80051e8:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <MX_GPIO_Init+0x90>)
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80051f4:	2200      	movs	r2, #0
 80051f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051fa:	480c      	ldr	r0, [pc, #48]	; (800522c <MX_GPIO_Init+0x94>)
 80051fc:	f001 fc2e 	bl	8006a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005206:	2301      	movs	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520a:	2300      	movs	r3, #0
 800520c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520e:	2302      	movs	r3, #2
 8005210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005212:	f107 0310 	add.w	r3, r7, #16
 8005216:	4619      	mov	r1, r3
 8005218:	4804      	ldr	r0, [pc, #16]	; (800522c <MX_GPIO_Init+0x94>)
 800521a:	f001 fa9b 	bl	8006754 <HAL_GPIO_Init>

}
 800521e:	bf00      	nop
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000
 800522c:	40010c00 	.word	0x40010c00

08005230 <usb_reset>:
bool is_same_string(uint8_t *buf, uint8_t start, uint8_t end,char *compare_string);
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
void send_cdc(uint8_t* buffer);
void send_flash_val(uint8_t length,uint32_t add);

void usb_reset(){
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005236:	463b      	mov	r3, r7
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	60da      	str	r2, [r3, #12]
	  /*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005246:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005248:	2311      	movs	r3, #17
 800524a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005250:	2302      	movs	r3, #2
 8005252:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005254:	463b      	mov	r3, r7
 8005256:	4619      	mov	r1, r3
 8005258:	480e      	ldr	r0, [pc, #56]	; (8005294 <usb_reset+0x64>)
 800525a:	f001 fa7b 	bl	8006754 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800525e:	2200      	movs	r2, #0
 8005260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005264:	480b      	ldr	r0, [pc, #44]	; (8005294 <usb_reset+0x64>)
 8005266:	f001 fbf9 	bl	8006a5c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800526a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800526e:	f000 ff51 	bl	8006114 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8005272:	2201      	movs	r2, #1
 8005274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005278:	4806      	ldr	r0, [pc, #24]	; (8005294 <usb_reset+0x64>)
 800527a:	f001 fbef 	bl	8006a5c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800527e:	2300      	movs	r3, #0
 8005280:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005282:	463b      	mov	r3, r7
 8005284:	4619      	mov	r1, r3
 8005286:	4803      	ldr	r0, [pc, #12]	; (8005294 <usb_reset+0x64>)
 8005288:	f001 fa64 	bl	8006754 <HAL_GPIO_Init>
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40010800 	.word	0x40010800

08005298 <sum_word>:

void sum_word(uint8_t *buf,uint8_t length,char *fmt,...){
 8005298:	b40c      	push	{r2, r3}
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	460b      	mov	r3, r1
 80052a4:	70fb      	strb	r3, [r7, #3]
	va_list arg;
	va_start(arg,fmt);
 80052a6:	f107 031c 	add.w	r3, r7, #28
 80052aa:	60fb      	str	r3, [r7, #12]
	memset(buf,0,length);
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	461a      	mov	r2, r3
 80052b0:	2100      	movs	r1, #0
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f008 fe6c 	bl	800df90 <memset>
	vsnprintf((char*)buf,length,fmt,arg);
 80052b8:	78f9      	ldrb	r1, [r7, #3]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f008 fe58 	bl	800df74 <vsniprintf>
	va_end(arg);
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ce:	b002      	add	sp, #8
 80052d0:	4770      	bx	lr
	...

080052d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	uart_flag=true;
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_UART_RxCpltCallback+0x18>)
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	200001ec 	.word	0x200001ec

080052f0 <is_same_string>:

bool is_same_string(uint8_t *buf, uint8_t start, uint8_t end,char *compare_string)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	72fb      	strb	r3, [r7, #11]
 80052fe:	4613      	mov	r3, r2
 8005300:	72bb      	strb	r3, [r7, #10]
	uint8_t j=0;
 8005302:	2300      	movs	r3, #0
 8005304:	75fb      	strb	r3, [r7, #23]
	bool ret=false;
 8005306:	2300      	movs	r3, #0
 8005308:	75bb      	strb	r3, [r7, #22]
	for(uint8_t i=start;i<end;i++)
 800530a:	7afb      	ldrb	r3, [r7, #11]
 800530c:	757b      	strb	r3, [r7, #21]
 800530e:	e01b      	b.n	8005348 <is_same_string+0x58>
	{
		if(buf[i]==0)
 8005310:	7d7b      	ldrb	r3, [r7, #21]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01a      	beq.n	8005352 <is_same_string+0x62>
		{
			break;
		}
		if(buf[i]==compare_string[j++]){
 800531c:	7d7b      	ldrb	r3, [r7, #21]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	75f9      	strb	r1, [r7, #23]
 800532a:	4619      	mov	r1, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	440b      	add	r3, r1
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d102      	bne.n	800533c <is_same_string+0x4c>
			ret=true;
 8005336:	2301      	movs	r3, #1
 8005338:	75bb      	strb	r3, [r7, #22]
 800533a:	e002      	b.n	8005342 <is_same_string+0x52>
		}
		else
		{
			ret=false;
 800533c:	2300      	movs	r3, #0
 800533e:	75bb      	strb	r3, [r7, #22]
			break;
 8005340:	e008      	b.n	8005354 <is_same_string+0x64>
	for(uint8_t i=start;i<end;i++)
 8005342:	7d7b      	ldrb	r3, [r7, #21]
 8005344:	3301      	adds	r3, #1
 8005346:	757b      	strb	r3, [r7, #21]
 8005348:	7d7a      	ldrb	r2, [r7, #21]
 800534a:	7abb      	ldrb	r3, [r7, #10]
 800534c:	429a      	cmp	r2, r3
 800534e:	d3df      	bcc.n	8005310 <is_same_string+0x20>
 8005350:	e000      	b.n	8005354 <is_same_string+0x64>
			break;
 8005352:	bf00      	nop
		}
	}
	return ret;
 8005354:	7dbb      	ldrb	r3, [r7, #22]
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <printf_select_area>:


void printf_select_area(uint8_t *buf,uint8_t start,uint8_t end)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
 800536c:	4613      	mov	r3, r2
 800536e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i=start+1;i<end;i++){
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	3301      	adds	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	e010      	b.n	800539a <printf_select_area+0x3a>
		uint8_t you=buf[i];
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	73bb      	strb	r3, [r7, #14]
		HAL_Delay(1);
 8005382:	2001      	movs	r0, #1
 8005384:	f000 fec6 	bl	8006114 <HAL_Delay>
		CDC_Transmit_FS(&you,1);
 8005388:	f107 030e 	add.w	r3, r7, #14
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f008 f9e6 	bl	800d760 <CDC_Transmit_FS>
	for(uint8_t i=start+1;i<end;i++){
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	3301      	adds	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
 800539a:	7bfa      	ldrb	r2, [r7, #15]
 800539c:	78bb      	ldrb	r3, [r7, #2]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d3ea      	bcc.n	8005378 <printf_select_area+0x18>
	}
	HAL_Delay(1);
 80053a2:	2001      	movs	r0, #1
 80053a4:	f000 feb6 	bl	8006114 <HAL_Delay>
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <send_cdc>:

void send_cdc(uint8_t* buffer){
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	uint8_t length = strlen((char *)buffer);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fec7 	bl	800514c <strlen>
 80053be:	4603      	mov	r3, r0
 80053c0:	73fb      	strb	r3, [r7, #15]
	CDC_Transmit_FS(buffer,length);
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f008 f9c9 	bl	800d760 <CDC_Transmit_FS>
}
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <send_flash_val>:

void send_flash_val(uint8_t length,uint32_t add){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af02      	add	r7, sp, #8
 80053de:	4603      	mov	r3, r0
 80053e0:	6039      	str	r1, [r7, #0]
 80053e2:	71fb      	strb	r3, [r7, #7]
	uint8_t *flash_value=(uint8_t *)add;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	60bb      	str	r3, [r7, #8]
	send_cdc((uint8_t *)"\n");
 80053e8:	4815      	ldr	r0, [pc, #84]	; (8005440 <send_flash_val+0x68>)
 80053ea:	f7ff ffe1 	bl	80053b0 <send_cdc>
	memset(buffer_tx,0,64);
 80053ee:	2240      	movs	r2, #64	; 0x40
 80053f0:	2100      	movs	r1, #0
 80053f2:	4814      	ldr	r0, [pc, #80]	; (8005444 <send_flash_val+0x6c>)
 80053f4:	f008 fdcc 	bl	800df90 <memset>
	for(uint8_t i=0;i<length;i++){
 80053f8:	2300      	movs	r3, #0
 80053fa:	73fb      	strb	r3, [r7, #15]
 80053fc:	e016      	b.n	800542c <send_flash_val+0x54>
		sum_word(buffer_tx,64,"add : 0x%X, val : 0x%X\n",add+i,flash_value[i]);
 80053fe:	7bfa      	ldrb	r2, [r7, #15]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	18d1      	adds	r1, r2, r3
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4413      	add	r3, r2
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	460b      	mov	r3, r1
 8005410:	4a0d      	ldr	r2, [pc, #52]	; (8005448 <send_flash_val+0x70>)
 8005412:	2140      	movs	r1, #64	; 0x40
 8005414:	480b      	ldr	r0, [pc, #44]	; (8005444 <send_flash_val+0x6c>)
 8005416:	f7ff ff3f 	bl	8005298 <sum_word>
		HAL_Delay(1);
 800541a:	2001      	movs	r0, #1
 800541c:	f000 fe7a 	bl	8006114 <HAL_Delay>
		send_cdc(buffer_tx);
 8005420:	4808      	ldr	r0, [pc, #32]	; (8005444 <send_flash_val+0x6c>)
 8005422:	f7ff ffc5 	bl	80053b0 <send_cdc>
	for(uint8_t i=0;i<length;i++){
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	3301      	adds	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
 800542c:	7bfa      	ldrb	r2, [r7, #15]
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	429a      	cmp	r2, r3
 8005432:	d3e4      	bcc.n	80053fe <send_flash_val+0x26>
	}
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	0800e8cc 	.word	0x0800e8cc
 8005444:	200001f0 	.word	0x200001f0
 8005448:	0800e8d0 	.word	0x0800e8d0

0800544c <enter_press>:

void enter_press(uint8_t *buffer){
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	if(is_same_string(buffer,0,6,(char*)"printf")){
 8005454:	4b90      	ldr	r3, [pc, #576]	; (8005698 <enter_press+0x24c>)
 8005456:	2206      	movs	r2, #6
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff ff48 	bl	80052f0 <is_same_string>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <enter_press+0x32>
		send_cdc((uint8_t*)"\n>>");
 8005466:	488d      	ldr	r0, [pc, #564]	; (800569c <enter_press+0x250>)
 8005468:	f7ff ffa2 	bl	80053b0 <send_cdc>
		printf_select_area(buffer,6,32);
 800546c:	2220      	movs	r2, #32
 800546e:	2106      	movs	r1, #6
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ff75 	bl	8005360 <printf_select_area>
		send_cdc((uint8_t*)"\n");
 8005476:	488a      	ldr	r0, [pc, #552]	; (80056a0 <enter_press+0x254>)
 8005478:	f7ff ff9a 	bl	80053b0 <send_cdc>
 800547c:	e101      	b.n	8005682 <enter_press+0x236>
	}
	else if(is_same_string(buffer,0,4,(char*)"help")){
 800547e:	4b89      	ldr	r3, [pc, #548]	; (80056a4 <enter_press+0x258>)
 8005480:	2204      	movs	r2, #4
 8005482:	2100      	movs	r1, #0
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff ff33 	bl	80052f0 <is_same_string>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d033      	beq.n	80054f8 <enter_press+0xac>
		send_cdc((uint8_t*)"\n\n");
 8005490:	4885      	ldr	r0, [pc, #532]	; (80056a8 <enter_press+0x25c>)
 8005492:	f7ff ff8d 	bl	80053b0 <send_cdc>
		HAL_Delay(1);
 8005496:	2001      	movs	r0, #1
 8005498:	f000 fe3c 	bl	8006114 <HAL_Delay>
		send_cdc((uint8_t*)"********************************************************************************\n");
 800549c:	4883      	ldr	r0, [pc, #524]	; (80056ac <enter_press+0x260>)
 800549e:	f7ff ff87 	bl	80053b0 <send_cdc>
		HAL_Delay(1);
 80054a2:	2001      	movs	r0, #1
 80054a4:	f000 fe36 	bl	8006114 <HAL_Delay>
		send_cdc((uint8_t*)"command list\n\n\n");
 80054a8:	4881      	ldr	r0, [pc, #516]	; (80056b0 <enter_press+0x264>)
 80054aa:	f7ff ff81 	bl	80053b0 <send_cdc>
		HAL_Delay(1);
 80054ae:	2001      	movs	r0, #1
 80054b0:	f000 fe30 	bl	8006114 <HAL_Delay>
		send_cdc((uint8_t*)"1. led on - turn on led\n\n");
 80054b4:	487f      	ldr	r0, [pc, #508]	; (80056b4 <enter_press+0x268>)
 80054b6:	f7ff ff7b 	bl	80053b0 <send_cdc>
		HAL_Delay(1);
 80054ba:	2001      	movs	r0, #1
 80054bc:	f000 fe2a 	bl	8006114 <HAL_Delay>
		send_cdc((uint8_t*)"2. led off - turn off led\n\n");
 80054c0:	487d      	ldr	r0, [pc, #500]	; (80056b8 <enter_press+0x26c>)
 80054c2:	f7ff ff75 	bl	80053b0 <send_cdc>
		HAL_Delay(1);
 80054c6:	2001      	movs	r0, #1
 80054c8:	f000 fe24 	bl	8006114 <HAL_Delay>
		send_cdc((uint8_t*)"3. led toggle [second] - toggle led at user set time\n\n");
 80054cc:	487b      	ldr	r0, [pc, #492]	; (80056bc <enter_press+0x270>)
 80054ce:	f7ff ff6f 	bl	80053b0 <send_cdc>
		HAL_Delay(1);
 80054d2:	2001      	movs	r0, #1
 80054d4:	f000 fe1e 	bl	8006114 <HAL_Delay>
		send_cdc((uint8_t*)"4. printf [value] - print value\n\n");
 80054d8:	4879      	ldr	r0, [pc, #484]	; (80056c0 <enter_press+0x274>)
 80054da:	f7ff ff69 	bl	80053b0 <send_cdc>
		HAL_Delay(1);
 80054de:	2001      	movs	r0, #1
 80054e0:	f000 fe18 	bl	8006114 <HAL_Delay>
		send_cdc((uint8_t*)"5. flashread [value] - read flash memory data, start from 0x08014000 to value\n\n");
 80054e4:	4877      	ldr	r0, [pc, #476]	; (80056c4 <enter_press+0x278>)
 80054e6:	f7ff ff63 	bl	80053b0 <send_cdc>
		HAL_Delay(1);
 80054ea:	2001      	movs	r0, #1
 80054ec:	f000 fe12 	bl	8006114 <HAL_Delay>
		send_cdc((uint8_t*)"********************************************************************************\n\n");
 80054f0:	4875      	ldr	r0, [pc, #468]	; (80056c8 <enter_press+0x27c>)
 80054f2:	f7ff ff5d 	bl	80053b0 <send_cdc>
 80054f6:	e0c4      	b.n	8005682 <enter_press+0x236>
	}
	else if(is_same_string(buffer,0,3,(char*)"led")){
 80054f8:	4b74      	ldr	r3, [pc, #464]	; (80056cc <enter_press+0x280>)
 80054fa:	2203      	movs	r2, #3
 80054fc:	2100      	movs	r1, #0
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff fef6 	bl	80052f0 <is_same_string>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d073      	beq.n	80055f2 <enter_press+0x1a6>
		if(is_same_string(buffer,4,6,(char*)"on")){
 800550a:	4b71      	ldr	r3, [pc, #452]	; (80056d0 <enter_press+0x284>)
 800550c:	2206      	movs	r2, #6
 800550e:	2104      	movs	r1, #4
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff feed 	bl	80052f0 <is_same_string>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <enter_press+0xe8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800551c:	2200      	movs	r2, #0
 800551e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005522:	486c      	ldr	r0, [pc, #432]	; (80056d4 <enter_press+0x288>)
 8005524:	f001 fa9a 	bl	8006a5c <HAL_GPIO_WritePin>
			toggle_do=false;
 8005528:	4b6b      	ldr	r3, [pc, #428]	; (80056d8 <enter_press+0x28c>)
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
			send_cdc((uint8_t*)"\n");
 800552e:	485c      	ldr	r0, [pc, #368]	; (80056a0 <enter_press+0x254>)
 8005530:	f7ff ff3e 	bl	80053b0 <send_cdc>
		}
		if(is_same_string(buffer,4,7,(char*)"off")){
 8005534:	4b69      	ldr	r3, [pc, #420]	; (80056dc <enter_press+0x290>)
 8005536:	2207      	movs	r2, #7
 8005538:	2104      	movs	r1, #4
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fed8 	bl	80052f0 <is_same_string>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <enter_press+0x112>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8005546:	2201      	movs	r2, #1
 8005548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800554c:	4861      	ldr	r0, [pc, #388]	; (80056d4 <enter_press+0x288>)
 800554e:	f001 fa85 	bl	8006a5c <HAL_GPIO_WritePin>
			toggle_do=false;
 8005552:	4b61      	ldr	r3, [pc, #388]	; (80056d8 <enter_press+0x28c>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
			send_cdc((uint8_t*)"\n");
 8005558:	4851      	ldr	r0, [pc, #324]	; (80056a0 <enter_press+0x254>)
 800555a:	f7ff ff29 	bl	80053b0 <send_cdc>
		}
		if(is_same_string(buffer,4,10,(char*)"toggle")){
 800555e:	4b60      	ldr	r3, [pc, #384]	; (80056e0 <enter_press+0x294>)
 8005560:	220a      	movs	r2, #10
 8005562:	2104      	movs	r1, #4
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff fec3 	bl	80052f0 <is_same_string>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8088 	beq.w	8005682 <enter_press+0x236>
			toggle_do=true;
 8005572:	4b59      	ldr	r3, [pc, #356]	; (80056d8 <enter_press+0x28c>)
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
			uint8_t toggle_val_index=11;
 8005578:	230b      	movs	r3, #11
 800557a:	73fb      	strb	r3, [r7, #15]
			uint8_t pre_toggle_val=toggle_val;
 800557c:	4b59      	ldr	r3, [pc, #356]	; (80056e4 <enter_press+0x298>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	733b      	strb	r3, [r7, #12]
			if(buffer[11]!=0){
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	330b      	adds	r3, #11
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d02e      	beq.n	80055ea <enter_press+0x19e>
				toggle_val=0;
 800558c:	4b55      	ldr	r3, [pc, #340]	; (80056e4 <enter_press+0x298>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
				while(buffer[toggle_val_index]!=0){
 8005592:	e024      	b.n	80055de <enter_press+0x192>
					if(buffer[toggle_val_index]<48 || buffer[toggle_val_index]>57){
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b2f      	cmp	r3, #47	; 0x2f
 800559e:	d905      	bls.n	80055ac <enter_press+0x160>
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4413      	add	r3, r2
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b39      	cmp	r3, #57	; 0x39
 80055aa:	d906      	bls.n	80055ba <enter_press+0x16e>
						send_cdc((uint8_t*)"\ninput value is not number!\n");
 80055ac:	484e      	ldr	r0, [pc, #312]	; (80056e8 <enter_press+0x29c>)
 80055ae:	f7ff feff 	bl	80053b0 <send_cdc>
						toggle_val=pre_toggle_val;
 80055b2:	7b3b      	ldrb	r3, [r7, #12]
 80055b4:	4a4b      	ldr	r2, [pc, #300]	; (80056e4 <enter_press+0x298>)
 80055b6:	6013      	str	r3, [r2, #0]
						break;
 80055b8:	e017      	b.n	80055ea <enter_press+0x19e>
					}
					toggle_val=toggle_val*10+(buffer[toggle_val_index++]-48);
 80055ba:	4b4a      	ldr	r3, [pc, #296]	; (80056e4 <enter_press+0x298>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	461a      	mov	r2, r3
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	73f9      	strb	r1, [r7, #15]
 80055ce:	4619      	mov	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	440b      	add	r3, r1
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	4413      	add	r3, r2
 80055d8:	3b30      	subs	r3, #48	; 0x30
 80055da:	4a42      	ldr	r2, [pc, #264]	; (80056e4 <enter_press+0x298>)
 80055dc:	6013      	str	r3, [r2, #0]
				while(buffer[toggle_val_index]!=0){
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1d4      	bne.n	8005594 <enter_press+0x148>
				}
			}
			send_cdc((uint8_t*)"\n");
 80055ea:	482d      	ldr	r0, [pc, #180]	; (80056a0 <enter_press+0x254>)
 80055ec:	f7ff fee0 	bl	80053b0 <send_cdc>
 80055f0:	e047      	b.n	8005682 <enter_press+0x236>
		}
	}
	else if(is_same_string(buffer,0,9,(char*)"flashread")){
 80055f2:	4b3e      	ldr	r3, [pc, #248]	; (80056ec <enter_press+0x2a0>)
 80055f4:	2209      	movs	r2, #9
 80055f6:	2100      	movs	r1, #0
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fe79 	bl	80052f0 <is_same_string>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d03b      	beq.n	800567c <enter_press+0x230>
		uint8_t flash_add_index=10;
 8005604:	230a      	movs	r3, #10
 8005606:	73bb      	strb	r3, [r7, #14]
		uint8_t flash_add_val=0;
 8005608:	2300      	movs	r3, #0
 800560a:	737b      	strb	r3, [r7, #13]
		if(buffer[10]!=0){
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	330a      	adds	r3, #10
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d035      	beq.n	8005682 <enter_press+0x236>
			while(buffer[flash_add_index]!=0){
 8005616:	e022      	b.n	800565e <enter_press+0x212>
				if(buffer[flash_add_index]<48 || buffer[flash_add_index]>57){
 8005618:	7bbb      	ldrb	r3, [r7, #14]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4413      	add	r3, r2
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b2f      	cmp	r3, #47	; 0x2f
 8005622:	d905      	bls.n	8005630 <enter_press+0x1e4>
 8005624:	7bbb      	ldrb	r3, [r7, #14]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4413      	add	r3, r2
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b39      	cmp	r3, #57	; 0x39
 800562e:	d905      	bls.n	800563c <enter_press+0x1f0>
					send_cdc((uint8_t*)"\ninput value is not number!\n");
 8005630:	482d      	ldr	r0, [pc, #180]	; (80056e8 <enter_press+0x29c>)
 8005632:	f7ff febd 	bl	80053b0 <send_cdc>
					flash_add_val=0;
 8005636:	2300      	movs	r3, #0
 8005638:	737b      	strb	r3, [r7, #13]
					break;
 800563a:	e016      	b.n	800566a <enter_press+0x21e>
				}
				flash_add_val=flash_add_val*10+(buffer[flash_add_index++]-48);
 800563c:	7b7b      	ldrb	r3, [r7, #13]
 800563e:	461a      	mov	r2, r3
 8005640:	0092      	lsls	r2, r2, #2
 8005642:	4413      	add	r3, r2
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	7bbb      	ldrb	r3, [r7, #14]
 800564a:	1c59      	adds	r1, r3, #1
 800564c:	73b9      	strb	r1, [r7, #14]
 800564e:	4619      	mov	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	440b      	add	r3, r1
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	4413      	add	r3, r2
 8005658:	b2db      	uxtb	r3, r3
 800565a:	3b30      	subs	r3, #48	; 0x30
 800565c:	737b      	strb	r3, [r7, #13]
			while(buffer[flash_add_index]!=0){
 800565e:	7bbb      	ldrb	r3, [r7, #14]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1d6      	bne.n	8005618 <enter_press+0x1cc>
			}
			if(flash_add_val!=0){
 800566a:	7b7b      	ldrb	r3, [r7, #13]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <enter_press+0x236>
				send_flash_val(flash_add_val,0x08005000+(60*1024));
 8005670:	7b7b      	ldrb	r3, [r7, #13]
 8005672:	491f      	ldr	r1, [pc, #124]	; (80056f0 <enter_press+0x2a4>)
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff feaf 	bl	80053d8 <send_flash_val>
 800567a:	e002      	b.n	8005682 <enter_press+0x236>
			}
		}
	}
	else
	{
		send_cdc((uint8_t*)"\ninvalid input! typing [help] to get information about cli.\n");
 800567c:	481d      	ldr	r0, [pc, #116]	; (80056f4 <enter_press+0x2a8>)
 800567e:	f7ff fe97 	bl	80053b0 <send_cdc>
	}
	HAL_Delay(1);
 8005682:	2001      	movs	r0, #1
 8005684:	f000 fd46 	bl	8006114 <HAL_Delay>
	send_cdc((uint8_t*)"\nCLI >> ");
 8005688:	481b      	ldr	r0, [pc, #108]	; (80056f8 <enter_press+0x2ac>)
 800568a:	f7ff fe91 	bl	80053b0 <send_cdc>
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	0800e8e8 	.word	0x0800e8e8
 800569c:	0800e8f0 	.word	0x0800e8f0
 80056a0:	0800e8cc 	.word	0x0800e8cc
 80056a4:	0800e8f4 	.word	0x0800e8f4
 80056a8:	0800e8fc 	.word	0x0800e8fc
 80056ac:	0800e900 	.word	0x0800e900
 80056b0:	0800e954 	.word	0x0800e954
 80056b4:	0800e964 	.word	0x0800e964
 80056b8:	0800e980 	.word	0x0800e980
 80056bc:	0800e99c 	.word	0x0800e99c
 80056c0:	0800e9d4 	.word	0x0800e9d4
 80056c4:	0800e9f8 	.word	0x0800e9f8
 80056c8:	0800ea48 	.word	0x0800ea48
 80056cc:	0800ea9c 	.word	0x0800ea9c
 80056d0:	0800eaa0 	.word	0x0800eaa0
 80056d4:	40010c00 	.word	0x40010c00
 80056d8:	200001ed 	.word	0x200001ed
 80056dc:	0800eaa4 	.word	0x0800eaa4
 80056e0:	0800eaa8 	.word	0x0800eaa8
 80056e4:	20000000 	.word	0x20000000
 80056e8:	0800eab0 	.word	0x0800eab0
 80056ec:	0800ead0 	.word	0x0800ead0
 80056f0:	08014000 	.word	0x08014000
 80056f4:	0800eadc 	.word	0x0800eadc
 80056f8:	0800eb1c 	.word	0x0800eb1c

080056fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b097      	sub	sp, #92	; 0x5c
 8005700:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005702:	f000 fca5 	bl	8006050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005706:	f000 facb 	bl	8005ca0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800570a:	4bc3      	ldr	r3, [pc, #780]	; (8005a18 <main+0x31c>)
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	4ac2      	ldr	r2, [pc, #776]	; (8005a18 <main+0x31c>)
 8005710:	f043 0304 	orr.w	r3, r3, #4
 8005714:	6193      	str	r3, [r2, #24]
 8005716:	4bc0      	ldr	r3, [pc, #768]	; (8005a18 <main+0x31c>)
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	607b      	str	r3, [r7, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
  usb_reset();
 8005722:	f7ff fd85 	bl	8005230 <usb_reset>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005726:	f7ff fd37 	bl	8005198 <MX_GPIO_Init>
  MX_DMA_Init();
 800572a:	f7ff fd17 	bl	800515c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800572e:	f007 ff3b 	bl	800d5a8 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8005732:	f000 fbc7 	bl	8005ec4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t pretime=HAL_GetTick();
 8005736:	f000 fce3 	bl	8006100 <HAL_GetTick>
 800573a:	6478      	str	r0, [r7, #68]	; 0x44
  uint8_t uart_rx_val=0;
 800573c:	2300      	movs	r3, #0
 800573e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t uart1_rx[5]={0,0,0,0,0};
 8005742:	4ab6      	ldr	r2, [pc, #728]	; (8005a1c <main+0x320>)
 8005744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800574c:	6018      	str	r0, [r3, #0]
 800574e:	3304      	adds	r3, #4
 8005750:	7019      	strb	r1, [r3, #0]
  uint8_t uart_index;
  uint8_t command_line[32];
  memset(command_line,0,5);
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	2205      	movs	r2, #5
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f008 fc18 	bl	800df90 <memset>
  uint8_t command_line_index=0;
 8005760:	2300      	movs	r3, #0
 8005762:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  uint8_t current_cursor_index=0;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  uint32_t pre_time1=HAL_GetTick();
 800576c:	f000 fcc8 	bl	8006100 <HAL_GetTick>
 8005770:	63f8      	str	r0, [r7, #60]	; 0x3c
	   * \x1B[1P:delete from cursor locate
	   * \x1B[4h(%c):insert mode set, %c is inserted of value at cursor locate
	   * \x1B[4l:replace mode
	   * \x1B[2J:clear terminal
	   * */
	  HAL_UART_Receive_DMA(&huart1,&uart_rx_val,1);
 8005772:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005776:	2201      	movs	r2, #1
 8005778:	4619      	mov	r1, r3
 800577a:	48a9      	ldr	r0, [pc, #676]	; (8005a20 <main+0x324>)
 800577c:	f003 fca7 	bl	80090ce <HAL_UART_Receive_DMA>
	  if(uart_flag){
 8005780:	4ba8      	ldr	r3, [pc, #672]	; (8005a24 <main+0x328>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d049      	beq.n	800581c <main+0x120>
		  uint32_t tick_val=HAL_GetTick();
 8005788:	f000 fcba 	bl	8006100 <HAL_GetTick>
 800578c:	6338      	str	r0, [r7, #48]	; 0x30
		  if(tick_val-pre_time1>50){
 800578e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b32      	cmp	r3, #50	; 0x32
 8005796:	d90c      	bls.n	80057b2 <main+0xb6>
		  	pre_time1=HAL_GetTick();
 8005798:	f000 fcb2 	bl	8006100 <HAL_GetTick>
 800579c:	63f8      	str	r0, [r7, #60]	; 0x3c
		  	memset(uart1_rx,0,5);
 800579e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057a2:	2205      	movs	r2, #5
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f008 fbf2 	bl	800df90 <memset>
		  	uart_index=0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  }
		  uart_index%=5;
 80057b2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80057b6:	4b9c      	ldr	r3, [pc, #624]	; (8005a28 <main+0x32c>)
 80057b8:	fba3 1302 	umull	r1, r3, r3, r2
 80057bc:	0899      	lsrs	r1, r3, #2
 80057be:	460b      	mov	r3, r1
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  uart1_rx[uart_index++]=uart_rx_val;
 80057ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	f887 2043 	strb.w	r2, [r7, #67]	; 0x43
 80057d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80057d8:	3348      	adds	r3, #72	; 0x48
 80057da:	443b      	add	r3, r7
 80057dc:	f803 2c20 	strb.w	r2, [r3, #-32]

		  sum_word(buffer_tx,64,"%X %X %X %X %X\n",uart1_rx[0],uart1_rx[1],uart1_rx[2],uart1_rx[3],uart1_rx[4]);
 80057e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057e4:	461c      	mov	r4, r3
 80057e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80057ea:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80057ee:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80057f2:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 80057f6:	9003      	str	r0, [sp, #12]
 80057f8:	9102      	str	r1, [sp, #8]
 80057fa:	9201      	str	r2, [sp, #4]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	4623      	mov	r3, r4
 8005800:	4a8a      	ldr	r2, [pc, #552]	; (8005a2c <main+0x330>)
 8005802:	2140      	movs	r1, #64	; 0x40
 8005804:	488a      	ldr	r0, [pc, #552]	; (8005a30 <main+0x334>)
 8005806:	f7ff fd47 	bl	8005298 <sum_word>
		  uart_flag=false;
 800580a:	4b86      	ldr	r3, [pc, #536]	; (8005a24 <main+0x328>)
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,buffer_tx,64,100);
 8005810:	2364      	movs	r3, #100	; 0x64
 8005812:	2240      	movs	r2, #64	; 0x40
 8005814:	4986      	ldr	r1, [pc, #536]	; (8005a30 <main+0x334>)
 8005816:	4882      	ldr	r0, [pc, #520]	; (8005a20 <main+0x324>)
 8005818:	f003 fbd6 	bl	8008fc8 <HAL_UART_Transmit>
	  }
	  if(HAL_GetTick()-pretime>toggle_val && toggle_do){
 800581c:	f000 fc70 	bl	8006100 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005824:	1ad2      	subs	r2, r2, r3
 8005826:	4b83      	ldr	r3, [pc, #524]	; (8005a34 <main+0x338>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d90b      	bls.n	8005846 <main+0x14a>
 800582e:	4b82      	ldr	r3, [pc, #520]	; (8005a38 <main+0x33c>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <main+0x14a>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8005836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800583a:	4880      	ldr	r0, [pc, #512]	; (8005a3c <main+0x340>)
 800583c:	f001 f926 	bl	8006a8c <HAL_GPIO_TogglePin>
		  pretime=HAL_GetTick();
 8005840:	f000 fc5e 	bl	8006100 <HAL_GetTick>
 8005844:	6478      	str	r0, [r7, #68]	; 0x44
	  }
	  if(usb_send){
 8005846:	4b7e      	ldr	r3, [pc, #504]	; (8005a40 <main+0x344>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d091      	beq.n	8005772 <main+0x76>
		  switch(usb_rx_val[0]){
 800584e:	4b7d      	ldr	r3, [pc, #500]	; (8005a44 <main+0x348>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b7f      	cmp	r3, #127	; 0x7f
 8005854:	f000 8139 	beq.w	8005aca <main+0x3ce>
 8005858:	2b7f      	cmp	r3, #127	; 0x7f
 800585a:	f300 8182 	bgt.w	8005b62 <main+0x466>
 800585e:	2b1b      	cmp	r3, #27
 8005860:	d009      	beq.n	8005876 <main+0x17a>
 8005862:	2b1b      	cmp	r3, #27
 8005864:	f300 817d 	bgt.w	8005b62 <main+0x466>
 8005868:	2b08      	cmp	r3, #8
 800586a:	f000 80a3 	beq.w	80059b4 <main+0x2b8>
 800586e:	2b0d      	cmp	r3, #13
 8005870:	f000 8118 	beq.w	8005aa4 <main+0x3a8>
 8005874:	e175      	b.n	8005b62 <main+0x466>
		  case(0x1B)://when esc begin
				  switch(usb_rx_val[2]){
 8005876:	4b73      	ldr	r3, [pc, #460]	; (8005a44 <main+0x348>)
 8005878:	789b      	ldrb	r3, [r3, #2]
 800587a:	3b31      	subs	r3, #49	; 0x31
 800587c:	2b13      	cmp	r3, #19
 800587e:	f200 81b5 	bhi.w	8005bec <main+0x4f0>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <main+0x18c>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	08005929 	.word	0x08005929
 800588c:	08005bed 	.word	0x08005bed
 8005890:	08005bed 	.word	0x08005bed
 8005894:	08005967 	.word	0x08005967
 8005898:	08005bed 	.word	0x08005bed
 800589c:	08005bed 	.word	0x08005bed
 80058a0:	08005bed 	.word	0x08005bed
 80058a4:	08005bed 	.word	0x08005bed
 80058a8:	08005bed 	.word	0x08005bed
 80058ac:	08005bed 	.word	0x08005bed
 80058b0:	08005bed 	.word	0x08005bed
 80058b4:	08005bed 	.word	0x08005bed
 80058b8:	08005bed 	.word	0x08005bed
 80058bc:	08005bed 	.word	0x08005bed
 80058c0:	08005bed 	.word	0x08005bed
 80058c4:	08005bed 	.word	0x08005bed
 80058c8:	080059a9 	.word	0x080059a9
 80058cc:	080059a9 	.word	0x080059a9
 80058d0:	080058ff 	.word	0x080058ff
 80058d4:	080058d9 	.word	0x080058d9
				  case(0x44)://left move
						  if(current_cursor_index>0){
 80058d8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d065      	beq.n	80059ac <main+0x2b0>
							  sum_word(buffer_tx,64,"\x1B[1D");
 80058e0:	4a59      	ldr	r2, [pc, #356]	; (8005a48 <main+0x34c>)
 80058e2:	2140      	movs	r1, #64	; 0x40
 80058e4:	4852      	ldr	r0, [pc, #328]	; (8005a30 <main+0x334>)
 80058e6:	f7ff fcd7 	bl	8005298 <sum_word>
							  current_cursor_index--;
 80058ea:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80058ee:	3b01      	subs	r3, #1
 80058f0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
							  CDC_Transmit_FS(buffer_tx,64);
 80058f4:	2140      	movs	r1, #64	; 0x40
 80058f6:	484e      	ldr	r0, [pc, #312]	; (8005a30 <main+0x334>)
 80058f8:	f007 ff32 	bl	800d760 <CDC_Transmit_FS>
						  }
						  break;
 80058fc:	e056      	b.n	80059ac <main+0x2b0>
				  case(0x43)://right move
						  if(current_cursor_index<command_line_index){
 80058fe:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8005902:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005906:	429a      	cmp	r2, r3
 8005908:	d252      	bcs.n	80059b0 <main+0x2b4>
							  sum_word(buffer_tx,64,"\x1B[1C");
 800590a:	4a50      	ldr	r2, [pc, #320]	; (8005a4c <main+0x350>)
 800590c:	2140      	movs	r1, #64	; 0x40
 800590e:	4848      	ldr	r0, [pc, #288]	; (8005a30 <main+0x334>)
 8005910:	f7ff fcc2 	bl	8005298 <sum_word>
							  current_cursor_index++;
 8005914:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005918:	3301      	adds	r3, #1
 800591a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
							  CDC_Transmit_FS(buffer_tx,64);
 800591e:	2140      	movs	r1, #64	; 0x40
 8005920:	4843      	ldr	r0, [pc, #268]	; (8005a30 <main+0x334>)
 8005922:	f007 ff1d 	bl	800d760 <CDC_Transmit_FS>
						  }
						  break;
 8005926:	e043      	b.n	80059b0 <main+0x2b4>
				  case(0x42)://down move
						  break;
				  case(0x41)://up move
						  break;
				  case(0x31)://home button
						  for(uint8_t i=0;i<current_cursor_index;i++){
 8005928:	2300      	movs	r3, #0
 800592a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800592e:	e010      	b.n	8005952 <main+0x256>
							  sum_word(buffer_tx,64,"\x1B[1D");
 8005930:	4a45      	ldr	r2, [pc, #276]	; (8005a48 <main+0x34c>)
 8005932:	2140      	movs	r1, #64	; 0x40
 8005934:	483e      	ldr	r0, [pc, #248]	; (8005a30 <main+0x334>)
 8005936:	f7ff fcaf 	bl	8005298 <sum_word>
							  CDC_Transmit_FS(buffer_tx,64);
 800593a:	2140      	movs	r1, #64	; 0x40
 800593c:	483c      	ldr	r0, [pc, #240]	; (8005a30 <main+0x334>)
 800593e:	f007 ff0f 	bl	800d760 <CDC_Transmit_FS>
							  HAL_Delay(1);
 8005942:	2001      	movs	r0, #1
 8005944:	f000 fbe6 	bl	8006114 <HAL_Delay>
						  for(uint8_t i=0;i<current_cursor_index;i++){
 8005948:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800594c:	3301      	adds	r3, #1
 800594e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005952:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005956:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800595a:	429a      	cmp	r2, r3
 800595c:	d3e8      	bcc.n	8005930 <main+0x234>
						  }
						  current_cursor_index=0;
 800595e:	2300      	movs	r3, #0
 8005960:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						  break;
 8005964:	e025      	b.n	80059b2 <main+0x2b6>
				  case(0x34)://end button
							 for(uint8_t i=current_cursor_index;i<command_line_index;i++){
 8005966:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800596a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800596e:	e010      	b.n	8005992 <main+0x296>
								 sum_word(buffer_tx,64,"\x1B[1C");
 8005970:	4a36      	ldr	r2, [pc, #216]	; (8005a4c <main+0x350>)
 8005972:	2140      	movs	r1, #64	; 0x40
 8005974:	482e      	ldr	r0, [pc, #184]	; (8005a30 <main+0x334>)
 8005976:	f7ff fc8f 	bl	8005298 <sum_word>
								 CDC_Transmit_FS(buffer_tx,64);
 800597a:	2140      	movs	r1, #64	; 0x40
 800597c:	482c      	ldr	r0, [pc, #176]	; (8005a30 <main+0x334>)
 800597e:	f007 feef 	bl	800d760 <CDC_Transmit_FS>
								 HAL_Delay(1);
 8005982:	2001      	movs	r0, #1
 8005984:	f000 fbc6 	bl	8006114 <HAL_Delay>
							 for(uint8_t i=current_cursor_index;i<command_line_index;i++){
 8005988:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800598c:	3301      	adds	r3, #1
 800598e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005992:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005996:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800599a:	429a      	cmp	r2, r3
 800599c:	d3e8      	bcc.n	8005970 <main+0x274>
							 }
						  current_cursor_index=command_line_index;
 800599e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80059a2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						  break;
 80059a6:	e004      	b.n	80059b2 <main+0x2b6>
						  break;
 80059a8:	bf00      	nop
 80059aa:	e11f      	b.n	8005bec <main+0x4f0>
						  break;
 80059ac:	bf00      	nop
 80059ae:	e11d      	b.n	8005bec <main+0x4f0>
						  break;
 80059b0:	bf00      	nop
				  }
				  break;
 80059b2:	e11b      	b.n	8005bec <main+0x4f0>
		  case(0x08)://backspace
				  if(current_cursor_index==0 || command_line_index==0){
 80059b4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 811c 	beq.w	8005bf6 <main+0x4fa>
 80059be:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8117 	beq.w	8005bf6 <main+0x4fa>
					  break;
				  }
				  else if(current_cursor_index>0){
 80059c8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 810f 	beq.w	8005bf0 <main+0x4f4>
					  command_line[--current_cursor_index]=0;
 80059d2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80059d6:	3b01      	subs	r3, #1
 80059d8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80059dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80059e0:	3348      	adds	r3, #72	; 0x48
 80059e2:	443b      	add	r3, r7
 80059e4:	2200      	movs	r2, #0
 80059e6:	f803 2c40 	strb.w	r2, [r3, #-64]
				  	  command_line_index--;
 80059ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80059ee:	3b01      	subs	r3, #1
 80059f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				  	  for(uint8_t i=current_cursor_index;i<command_line_index;i++){
 80059f4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80059f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80059fc:	e042      	b.n	8005a84 <main+0x388>
				  		  if(i+1>31){
 80059fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a02:	2b1e      	cmp	r3, #30
 8005a04:	d924      	bls.n	8005a50 <main+0x354>
				  			command_line[i]=0;
 8005a06:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a0a:	3348      	adds	r3, #72	; 0x48
 8005a0c:	443b      	add	r3, r7
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f803 2c40 	strb.w	r2, [r3, #-64]
				  			break;
 8005a14:	e03c      	b.n	8005a90 <main+0x394>
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	0800ebb0 	.word	0x0800ebb0
 8005a20:	20000234 	.word	0x20000234
 8005a24:	200001ec 	.word	0x200001ec
 8005a28:	cccccccd 	.word	0xcccccccd
 8005a2c:	0800eb28 	.word	0x0800eb28
 8005a30:	200001f0 	.word	0x200001f0
 8005a34:	20000000 	.word	0x20000000
 8005a38:	200001ed 	.word	0x200001ed
 8005a3c:	40010c00 	.word	0x40010c00
 8005a40:	20000991 	.word	0x20000991
 8005a44:	2000098c 	.word	0x2000098c
 8005a48:	0800eb38 	.word	0x0800eb38
 8005a4c:	0800eb40 	.word	0x0800eb40
				  		  }
				  		  command_line[i]=command_line[i+1];
 8005a50:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a5a:	3248      	adds	r2, #72	; 0x48
 8005a5c:	443a      	add	r2, r7
 8005a5e:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8005a62:	3348      	adds	r3, #72	; 0x48
 8005a64:	443b      	add	r3, r7
 8005a66:	f803 2c40 	strb.w	r2, [r3, #-64]
				  		  command_line[i+1]=0;
 8005a6a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a6e:	3301      	adds	r3, #1
 8005a70:	3348      	adds	r3, #72	; 0x48
 8005a72:	443b      	add	r3, r7
 8005a74:	2200      	movs	r2, #0
 8005a76:	f803 2c40 	strb.w	r2, [r3, #-64]
				  	  for(uint8_t i=current_cursor_index;i<command_line_index;i++){
 8005a7a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8005a84:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8005a88:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d3b6      	bcc.n	80059fe <main+0x302>
				  	  }
				  	  sum_word(buffer_tx,64,"\x1B[1D\x1B[1P");
 8005a90:	4a79      	ldr	r2, [pc, #484]	; (8005c78 <main+0x57c>)
 8005a92:	2140      	movs	r1, #64	; 0x40
 8005a94:	4879      	ldr	r0, [pc, #484]	; (8005c7c <main+0x580>)
 8005a96:	f7ff fbff 	bl	8005298 <sum_word>
				  	  CDC_Transmit_FS(buffer_tx,64);
 8005a9a:	2140      	movs	r1, #64	; 0x40
 8005a9c:	4877      	ldr	r0, [pc, #476]	; (8005c7c <main+0x580>)
 8005a9e:	f007 fe5f 	bl	800d760 <CDC_Transmit_FS>
				  }
		  	  	  break;
 8005aa2:	e0a5      	b.n	8005bf0 <main+0x4f4>
		  case(0x0D)://case enter
				  enter_press(command_line);
 8005aa4:	f107 0308 	add.w	r3, r7, #8
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fccf 	bl	800544c <enter_press>
				  memset(command_line,0,32);
 8005aae:	f107 0308 	add.w	r3, r7, #8
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f008 fa6a 	bl	800df90 <memset>
		  	  	  command_line_index=0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		  	  	  current_cursor_index=0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  	  	  break;
 8005ac8:	e095      	b.n	8005bf6 <main+0x4fa>
		  case(0x7F)://case delete
				  if(command_line_index==0||command_line_index==current_cursor_index){
 8005aca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8091 	beq.w	8005bf6 <main+0x4fa>
 8005ad4:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005ad8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005adc:	429a      	cmp	r2, r3
 8005ade:	f000 808a 	beq.w	8005bf6 <main+0x4fa>
					  break;
				  }
				  for(uint8_t i=current_cursor_index;i<command_line_index;i++){
 8005ae2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005ae6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005aea:	e025      	b.n	8005b38 <main+0x43c>
					  if(i+1>31){
 8005aec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005af0:	2b1e      	cmp	r3, #30
 8005af2:	d907      	bls.n	8005b04 <main+0x408>
						  command_line[i]=0;
 8005af4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005af8:	3348      	adds	r3, #72	; 0x48
 8005afa:	443b      	add	r3, r7
 8005afc:	2200      	movs	r2, #0
 8005afe:	f803 2c40 	strb.w	r2, [r3, #-64]
						  break;
 8005b02:	e01f      	b.n	8005b44 <main+0x448>
					  }
					  command_line[i]=command_line[i+1];
 8005b04:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005b0e:	3248      	adds	r2, #72	; 0x48
 8005b10:	443a      	add	r2, r7
 8005b12:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8005b16:	3348      	adds	r3, #72	; 0x48
 8005b18:	443b      	add	r3, r7
 8005b1a:	f803 2c40 	strb.w	r2, [r3, #-64]
					  command_line[i+1]=0;
 8005b1e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005b22:	3301      	adds	r3, #1
 8005b24:	3348      	adds	r3, #72	; 0x48
 8005b26:	443b      	add	r3, r7
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f803 2c40 	strb.w	r2, [r3, #-64]
				  for(uint8_t i=current_cursor_index;i<command_line_index;i++){
 8005b2e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005b32:	3301      	adds	r3, #1
 8005b34:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005b38:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b3c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3d3      	bcc.n	8005aec <main+0x3f0>
				  }
				  command_line_index--;
 8005b44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				  sum_word(buffer_tx,64,"\x1B[1P");
 8005b4e:	4a4c      	ldr	r2, [pc, #304]	; (8005c80 <main+0x584>)
 8005b50:	2140      	movs	r1, #64	; 0x40
 8005b52:	484a      	ldr	r0, [pc, #296]	; (8005c7c <main+0x580>)
 8005b54:	f7ff fba0 	bl	8005298 <sum_word>
				  CDC_Transmit_FS(buffer_tx,64);
 8005b58:	2140      	movs	r1, #64	; 0x40
 8005b5a:	4848      	ldr	r0, [pc, #288]	; (8005c7c <main+0x580>)
 8005b5c:	f007 fe00 	bl	800d760 <CDC_Transmit_FS>
				  break;
 8005b60:	e049      	b.n	8005bf6 <main+0x4fa>
		  default://insertion
			  	  if(command_line_index>31){
 8005b62:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005b66:	2b1f      	cmp	r3, #31
 8005b68:	d844      	bhi.n	8005bf4 <main+0x4f8>
			  		  break;
			  	  }
			  	  for(uint8_t i=command_line_index;i>current_cursor_index;i--){
 8005b6a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005b6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b72:	e015      	b.n	8005ba0 <main+0x4a4>
			  		  if(i>31){
 8005b74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b78:	2b1f      	cmp	r3, #31
 8005b7a:	d818      	bhi.n	8005bae <main+0x4b2>
			  			  break;
			  		  }
			  		  command_line[i]=command_line[i-1];
 8005b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b86:	3248      	adds	r2, #72	; 0x48
 8005b88:	443a      	add	r2, r7
 8005b8a:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8005b8e:	3348      	adds	r3, #72	; 0x48
 8005b90:	443b      	add	r3, r7
 8005b92:	f803 2c40 	strb.w	r2, [r3, #-64]
			  	  for(uint8_t i=command_line_index;i>current_cursor_index;i--){
 8005b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005ba0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005ba4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d8e3      	bhi.n	8005b74 <main+0x478>
 8005bac:	e000      	b.n	8005bb0 <main+0x4b4>
			  			  break;
 8005bae:	bf00      	nop
			  	  }
			  	  command_line[current_cursor_index++]=usb_rx_val[0];
 8005bb0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4b31      	ldr	r3, [pc, #196]	; (8005c84 <main+0x588>)
 8005bbe:	781a      	ldrb	r2, [r3, #0]
 8005bc0:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8005bc4:	443b      	add	r3, r7
 8005bc6:	f803 2c40 	strb.w	r2, [r3, #-64]
			  	  command_line_index++;
 8005bca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005bce:	3301      	adds	r3, #1
 8005bd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			  	  sum_word(buffer_tx,64,"\x1B[4h%c\x1B[4l",usb_rx_val[0]);
 8005bd4:	4b2b      	ldr	r3, [pc, #172]	; (8005c84 <main+0x588>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	4a2b      	ldr	r2, [pc, #172]	; (8005c88 <main+0x58c>)
 8005bda:	2140      	movs	r1, #64	; 0x40
 8005bdc:	4827      	ldr	r0, [pc, #156]	; (8005c7c <main+0x580>)
 8005bde:	f7ff fb5b 	bl	8005298 <sum_word>
			  	  CDC_Transmit_FS(buffer_tx,64);
 8005be2:	2140      	movs	r1, #64	; 0x40
 8005be4:	4825      	ldr	r0, [pc, #148]	; (8005c7c <main+0x580>)
 8005be6:	f007 fdbb 	bl	800d760 <CDC_Transmit_FS>
			  	  break;
 8005bea:	e004      	b.n	8005bf6 <main+0x4fa>
				  break;
 8005bec:	bf00      	nop
 8005bee:	e002      	b.n	8005bf6 <main+0x4fa>
		  	  	  break;
 8005bf0:	bf00      	nop
 8005bf2:	e000      	b.n	8005bf6 <main+0x4fa>
			  		  break;
 8005bf4:	bf00      	nop
		  }
		  usb_send=false;
 8005bf6:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <main+0x590>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
		  sum_word(buffer_tx,64,"\x1B[2J\nsend val:%s\n",command_line);
 8005bfc:	f107 0308 	add.w	r3, r7, #8
 8005c00:	4a23      	ldr	r2, [pc, #140]	; (8005c90 <main+0x594>)
 8005c02:	2140      	movs	r1, #64	; 0x40
 8005c04:	481d      	ldr	r0, [pc, #116]	; (8005c7c <main+0x580>)
 8005c06:	f7ff fb47 	bl	8005298 <sum_word>
		  HAL_UART_Transmit(&huart1,buffer_tx,64,100);
 8005c0a:	2364      	movs	r3, #100	; 0x64
 8005c0c:	2240      	movs	r2, #64	; 0x40
 8005c0e:	491b      	ldr	r1, [pc, #108]	; (8005c7c <main+0x580>)
 8005c10:	4820      	ldr	r0, [pc, #128]	; (8005c94 <main+0x598>)
 8005c12:	f003 f9d9 	bl	8008fc8 <HAL_UART_Transmit>
		  sum_word(buffer_tx,64,"send_command:0x%X %X %X %X %X\n",usb_rx_val[0],usb_rx_val[1], usb_rx_val[2],usb_rx_val[3],usb_rx_val[4]);
 8005c16:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <main+0x588>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <main+0x588>)
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	461a      	mov	r2, r3
 8005c22:	4b18      	ldr	r3, [pc, #96]	; (8005c84 <main+0x588>)
 8005c24:	789b      	ldrb	r3, [r3, #2]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4b16      	ldr	r3, [pc, #88]	; (8005c84 <main+0x588>)
 8005c2a:	78db      	ldrb	r3, [r3, #3]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	4b15      	ldr	r3, [pc, #84]	; (8005c84 <main+0x588>)
 8005c30:	791b      	ldrb	r3, [r3, #4]
 8005c32:	9303      	str	r3, [sp, #12]
 8005c34:	9002      	str	r0, [sp, #8]
 8005c36:	9101      	str	r1, [sp, #4]
 8005c38:	9200      	str	r2, [sp, #0]
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	4a16      	ldr	r2, [pc, #88]	; (8005c98 <main+0x59c>)
 8005c3e:	2140      	movs	r1, #64	; 0x40
 8005c40:	480e      	ldr	r0, [pc, #56]	; (8005c7c <main+0x580>)
 8005c42:	f7ff fb29 	bl	8005298 <sum_word>
		  HAL_UART_Transmit(&huart1,buffer_tx,64,100);
 8005c46:	2364      	movs	r3, #100	; 0x64
 8005c48:	2240      	movs	r2, #64	; 0x40
 8005c4a:	490c      	ldr	r1, [pc, #48]	; (8005c7c <main+0x580>)
 8005c4c:	4811      	ldr	r0, [pc, #68]	; (8005c94 <main+0x598>)
 8005c4e:	f003 f9bb 	bl	8008fc8 <HAL_UART_Transmit>
		  sum_word(buffer_tx,64,"cursor:%d index:%d",current_cursor_index,command_line_index);
 8005c52:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8005c56:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	4a0f      	ldr	r2, [pc, #60]	; (8005c9c <main+0x5a0>)
 8005c60:	2140      	movs	r1, #64	; 0x40
 8005c62:	4806      	ldr	r0, [pc, #24]	; (8005c7c <main+0x580>)
 8005c64:	f7ff fb18 	bl	8005298 <sum_word>
		  HAL_UART_Transmit(&huart1,buffer_tx,64,100);
 8005c68:	2364      	movs	r3, #100	; 0x64
 8005c6a:	2240      	movs	r2, #64	; 0x40
 8005c6c:	4903      	ldr	r1, [pc, #12]	; (8005c7c <main+0x580>)
 8005c6e:	4809      	ldr	r0, [pc, #36]	; (8005c94 <main+0x598>)
 8005c70:	f003 f9aa 	bl	8008fc8 <HAL_UART_Transmit>
	  HAL_UART_Receive_DMA(&huart1,&uart_rx_val,1);
 8005c74:	e57d      	b.n	8005772 <main+0x76>
 8005c76:	bf00      	nop
 8005c78:	0800eb48 	.word	0x0800eb48
 8005c7c:	200001f0 	.word	0x200001f0
 8005c80:	0800eb54 	.word	0x0800eb54
 8005c84:	2000098c 	.word	0x2000098c
 8005c88:	0800eb5c 	.word	0x0800eb5c
 8005c8c:	20000991 	.word	0x20000991
 8005c90:	0800eb68 	.word	0x0800eb68
 8005c94:	20000234 	.word	0x20000234
 8005c98:	0800eb7c 	.word	0x0800eb7c
 8005c9c:	0800eb9c 	.word	0x0800eb9c

08005ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b094      	sub	sp, #80	; 0x50
 8005ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005caa:	2228      	movs	r2, #40	; 0x28
 8005cac:	2100      	movs	r1, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f008 f96e 	bl	800df90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cb4:	f107 0314 	add.w	r3, r7, #20
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	609a      	str	r2, [r3, #8]
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	609a      	str	r2, [r3, #8]
 8005cce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005cec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f002 fc50 	bl	800859c <HAL_RCC_OscConfig>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005d02:	f000 f827 	bl	8005d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d06:	230f      	movs	r3, #15
 8005d08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005d1c:	f107 0314 	add.w	r3, r7, #20
 8005d20:	2102      	movs	r1, #2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f002 febc 	bl	8008aa0 <HAL_RCC_ClockConfig>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005d2e:	f000 f811 	bl	8005d54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005d32:	2310      	movs	r3, #16
 8005d34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f003 f83d 	bl	8008dbc <HAL_RCCEx_PeriphCLKConfig>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8005d48:	f000 f804 	bl	8005d54 <Error_Handler>
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	3750      	adds	r7, #80	; 0x50
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d58:	b672      	cpsid	i
}
 8005d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d5c:	e7fe      	b.n	8005d5c <Error_Handler+0x8>
	...

08005d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <HAL_MspInit+0x5c>)
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	4a14      	ldr	r2, [pc, #80]	; (8005dbc <HAL_MspInit+0x5c>)
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	6193      	str	r3, [r2, #24]
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_MspInit+0x5c>)
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <HAL_MspInit+0x5c>)
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <HAL_MspInit+0x5c>)
 8005d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d88:	61d3      	str	r3, [r2, #28]
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <HAL_MspInit+0x5c>)
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005d96:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <HAL_MspInit+0x60>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	4a04      	ldr	r2, [pc, #16]	; (8005dc0 <HAL_MspInit+0x60>)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	40010000 	.word	0x40010000

08005dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005dc8:	e7fe      	b.n	8005dc8 <NMI_Handler+0x4>

08005dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dce:	e7fe      	b.n	8005dce <HardFault_Handler+0x4>

08005dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dd4:	e7fe      	b.n	8005dd4 <MemManage_Handler+0x4>

08005dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dda:	e7fe      	b.n	8005dda <BusFault_Handler+0x4>

08005ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005de0:	e7fe      	b.n	8005de0 <UsageFault_Handler+0x4>

08005de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005de2:	b480      	push	{r7}
 8005de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005de6:	bf00      	nop
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr

08005dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dee:	b480      	push	{r7}
 8005df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr

08005dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr

08005e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e0a:	f000 f967 	bl	80060dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e0e:	bf00      	nop
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005e18:	4802      	ldr	r0, [pc, #8]	; (8005e24 <DMA1_Channel5_IRQHandler+0x10>)
 8005e1a:	f000 fb67 	bl	80064ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	2000027c 	.word	0x2000027c

08005e28 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005e2c:	4802      	ldr	r0, [pc, #8]	; (8005e38 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8005e2e:	f000 ff6b 	bl	8006d08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000b94 	.word	0x20000b94

08005e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e44:	4a14      	ldr	r2, [pc, #80]	; (8005e98 <_sbrk+0x5c>)
 8005e46:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <_sbrk+0x60>)
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e50:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <_sbrk+0x64>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e58:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <_sbrk+0x64>)
 8005e5a:	4a12      	ldr	r2, [pc, #72]	; (8005ea4 <_sbrk+0x68>)
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e5e:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <_sbrk+0x64>)
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4413      	add	r3, r2
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d207      	bcs.n	8005e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e6c:	f008 f898 	bl	800dfa0 <__errno>
 8005e70:	4603      	mov	r3, r0
 8005e72:	220c      	movs	r2, #12
 8005e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e76:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7a:	e009      	b.n	8005e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e7c:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <_sbrk+0x64>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <_sbrk+0x64>)
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4413      	add	r3, r2
 8005e8a:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <_sbrk+0x64>)
 8005e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20005000 	.word	0x20005000
 8005e9c:	00000400 	.word	0x00000400
 8005ea0:	20000230 	.word	0x20000230
 8005ea4:	200011f0 	.word	0x200011f0

08005ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <SystemInit+0x14>)
 8005eae:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <SystemInit+0x18>)
 8005eb0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005eb2:	bf00      	nop
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	e000ed00 	.word	0xe000ed00
 8005ec0:	08005000 	.word	0x08005000

08005ec4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ec8:	4b11      	ldr	r3, [pc, #68]	; (8005f10 <MX_USART1_UART_Init+0x4c>)
 8005eca:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <MX_USART1_UART_Init+0x50>)
 8005ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <MX_USART1_UART_Init+0x4c>)
 8005ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ed4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ed6:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <MX_USART1_UART_Init+0x4c>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005edc:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <MX_USART1_UART_Init+0x4c>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <MX_USART1_UART_Init+0x4c>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ee8:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <MX_USART1_UART_Init+0x4c>)
 8005eea:	220c      	movs	r2, #12
 8005eec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005eee:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <MX_USART1_UART_Init+0x4c>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <MX_USART1_UART_Init+0x4c>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005efa:	4805      	ldr	r0, [pc, #20]	; (8005f10 <MX_USART1_UART_Init+0x4c>)
 8005efc:	f003 f814 	bl	8008f28 <HAL_UART_Init>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005f06:	f7ff ff25 	bl	8005d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f0a:	bf00      	nop
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000234 	.word	0x20000234
 8005f14:	40013800 	.word	0x40013800

08005f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f20:	f107 0310 	add.w	r3, r7, #16
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	609a      	str	r2, [r3, #8]
 8005f2c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a2f      	ldr	r2, [pc, #188]	; (8005ff0 <HAL_UART_MspInit+0xd8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d157      	bne.n	8005fe8 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f38:	4b2e      	ldr	r3, [pc, #184]	; (8005ff4 <HAL_UART_MspInit+0xdc>)
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	4a2d      	ldr	r2, [pc, #180]	; (8005ff4 <HAL_UART_MspInit+0xdc>)
 8005f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f42:	6193      	str	r3, [r2, #24]
 8005f44:	4b2b      	ldr	r3, [pc, #172]	; (8005ff4 <HAL_UART_MspInit+0xdc>)
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f50:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <HAL_UART_MspInit+0xdc>)
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	4a27      	ldr	r2, [pc, #156]	; (8005ff4 <HAL_UART_MspInit+0xdc>)
 8005f56:	f043 0304 	orr.w	r3, r3, #4
 8005f5a:	6193      	str	r3, [r2, #24]
 8005f5c:	4b25      	ldr	r3, [pc, #148]	; (8005ff4 <HAL_UART_MspInit+0xdc>)
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f72:	2303      	movs	r3, #3
 8005f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f76:	f107 0310 	add.w	r3, r7, #16
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	481e      	ldr	r0, [pc, #120]	; (8005ff8 <HAL_UART_MspInit+0xe0>)
 8005f7e:	f000 fbe9 	bl	8006754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f90:	f107 0310 	add.w	r3, r7, #16
 8005f94:	4619      	mov	r1, r3
 8005f96:	4818      	ldr	r0, [pc, #96]	; (8005ff8 <HAL_UART_MspInit+0xe0>)
 8005f98:	f000 fbdc 	bl	8006754 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005f9c:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005f9e:	4a18      	ldr	r2, [pc, #96]	; (8006000 <HAL_UART_MspInit+0xe8>)
 8005fa0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fa2:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fa8:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005fb0:	2280      	movs	r2, #128	; 0x80
 8005fb2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fb4:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fba:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005fc0:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005fcc:	480b      	ldr	r0, [pc, #44]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005fce:	f000 f9d3 	bl	8006378 <HAL_DMA_Init>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8005fd8:	f7ff febc 	bl	8005d54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a07      	ldr	r2, [pc, #28]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005fe0:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fe2:	4a06      	ldr	r2, [pc, #24]	; (8005ffc <HAL_UART_MspInit+0xe4>)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005fe8:	bf00      	nop
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40013800 	.word	0x40013800
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40010800 	.word	0x40010800
 8005ffc:	2000027c 	.word	0x2000027c
 8006000:	40020058 	.word	0x40020058

08006004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006004:	f7ff ff50 	bl	8005ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006008:	480b      	ldr	r0, [pc, #44]	; (8006038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800600a:	490c      	ldr	r1, [pc, #48]	; (800603c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800600c:	4a0c      	ldr	r2, [pc, #48]	; (8006040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800600e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006010:	e002      	b.n	8006018 <LoopCopyDataInit>

08006012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006016:	3304      	adds	r3, #4

08006018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800601a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800601c:	d3f9      	bcc.n	8006012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006020:	4c09      	ldr	r4, [pc, #36]	; (8006048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006024:	e001      	b.n	800602a <LoopFillZerobss>

08006026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006028:	3204      	adds	r2, #4

0800602a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800602a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800602c:	d3fb      	bcc.n	8006026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800602e:	f007 ffbd 	bl	800dfac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006032:	f7ff fb63 	bl	80056fc <main>
  bx lr
 8006036:	4770      	bx	lr
  ldr r0, =_sdata
 8006038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800603c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8006040:	0800ec68 	.word	0x0800ec68
  ldr r2, =_sbss
 8006044:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8006048:	200011ec 	.word	0x200011ec

0800604c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800604c:	e7fe      	b.n	800604c <ADC1_2_IRQHandler>
	...

08006050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006054:	4b08      	ldr	r3, [pc, #32]	; (8006078 <HAL_Init+0x28>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a07      	ldr	r2, [pc, #28]	; (8006078 <HAL_Init+0x28>)
 800605a:	f043 0310 	orr.w	r3, r3, #16
 800605e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006060:	2003      	movs	r0, #3
 8006062:	f000 f947 	bl	80062f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006066:	200f      	movs	r0, #15
 8006068:	f000 f808 	bl	800607c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800606c:	f7ff fe78 	bl	8005d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40022000 	.word	0x40022000

0800607c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006084:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <HAL_InitTick+0x54>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <HAL_InitTick+0x58>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	4619      	mov	r1, r3
 800608e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006092:	fbb3 f3f1 	udiv	r3, r3, r1
 8006096:	fbb2 f3f3 	udiv	r3, r2, r3
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f95f 	bl	800635e <HAL_SYSTICK_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e00e      	b.n	80060c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b0f      	cmp	r3, #15
 80060ae:	d80a      	bhi.n	80060c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060b0:	2200      	movs	r2, #0
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	f000 f927 	bl	800630a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060bc:	4a06      	ldr	r2, [pc, #24]	; (80060d8 <HAL_InitTick+0x5c>)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e000      	b.n	80060c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000004 	.word	0x20000004
 80060d4:	2000000c 	.word	0x2000000c
 80060d8:	20000008 	.word	0x20000008

080060dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <HAL_IncTick+0x1c>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <HAL_IncTick+0x20>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4413      	add	r3, r2
 80060ec:	4a03      	ldr	r2, [pc, #12]	; (80060fc <HAL_IncTick+0x20>)
 80060ee:	6013      	str	r3, [r2, #0]
}
 80060f0:	bf00      	nop
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr
 80060f8:	2000000c 	.word	0x2000000c
 80060fc:	200002c0 	.word	0x200002c0

08006100 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  return uwTick;
 8006104:	4b02      	ldr	r3, [pc, #8]	; (8006110 <HAL_GetTick+0x10>)
 8006106:	681b      	ldr	r3, [r3, #0]
}
 8006108:	4618      	mov	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr
 8006110:	200002c0 	.word	0x200002c0

08006114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800611c:	f7ff fff0 	bl	8006100 <HAL_GetTick>
 8006120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d005      	beq.n	800613a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <HAL_Delay+0x44>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800613a:	bf00      	nop
 800613c:	f7ff ffe0 	bl	8006100 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	429a      	cmp	r2, r3
 800614a:	d8f7      	bhi.n	800613c <HAL_Delay+0x28>
  {
  }
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	2000000c 	.word	0x2000000c

0800615c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800616c:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <__NVIC_SetPriorityGrouping+0x44>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006178:	4013      	ands	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800618e:	4a04      	ldr	r2, [pc, #16]	; (80061a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	60d3      	str	r3, [r2, #12]
}
 8006194:	bf00      	nop
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	e000ed00 	.word	0xe000ed00

080061a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061a8:	4b04      	ldr	r3, [pc, #16]	; (80061bc <__NVIC_GetPriorityGrouping+0x18>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	0a1b      	lsrs	r3, r3, #8
 80061ae:	f003 0307 	and.w	r3, r3, #7
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	e000ed00 	.word	0xe000ed00

080061c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	db0b      	blt.n	80061ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	f003 021f 	and.w	r2, r3, #31
 80061d8:	4906      	ldr	r1, [pc, #24]	; (80061f4 <__NVIC_EnableIRQ+0x34>)
 80061da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	2001      	movs	r0, #1
 80061e2:	fa00 f202 	lsl.w	r2, r0, r2
 80061e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr
 80061f4:	e000e100 	.word	0xe000e100

080061f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	6039      	str	r1, [r7, #0]
 8006202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db0a      	blt.n	8006222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	490c      	ldr	r1, [pc, #48]	; (8006244 <__NVIC_SetPriority+0x4c>)
 8006212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006216:	0112      	lsls	r2, r2, #4
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	440b      	add	r3, r1
 800621c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006220:	e00a      	b.n	8006238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	4908      	ldr	r1, [pc, #32]	; (8006248 <__NVIC_SetPriority+0x50>)
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	3b04      	subs	r3, #4
 8006230:	0112      	lsls	r2, r2, #4
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	440b      	add	r3, r1
 8006236:	761a      	strb	r2, [r3, #24]
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	e000e100 	.word	0xe000e100
 8006248:	e000ed00 	.word	0xe000ed00

0800624c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f1c3 0307 	rsb	r3, r3, #7
 8006266:	2b04      	cmp	r3, #4
 8006268:	bf28      	it	cs
 800626a:	2304      	movcs	r3, #4
 800626c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3304      	adds	r3, #4
 8006272:	2b06      	cmp	r3, #6
 8006274:	d902      	bls.n	800627c <NVIC_EncodePriority+0x30>
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3b03      	subs	r3, #3
 800627a:	e000      	b.n	800627e <NVIC_EncodePriority+0x32>
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006280:	f04f 32ff 	mov.w	r2, #4294967295
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43da      	mvns	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	401a      	ands	r2, r3
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006294:	f04f 31ff 	mov.w	r1, #4294967295
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	43d9      	mvns	r1, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a4:	4313      	orrs	r3, r2
         );
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3724      	adds	r7, #36	; 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr

080062b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062c0:	d301      	bcc.n	80062c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062c2:	2301      	movs	r3, #1
 80062c4:	e00f      	b.n	80062e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062c6:	4a0a      	ldr	r2, [pc, #40]	; (80062f0 <SysTick_Config+0x40>)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062ce:	210f      	movs	r1, #15
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	f7ff ff90 	bl	80061f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062d8:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <SysTick_Config+0x40>)
 80062da:	2200      	movs	r2, #0
 80062dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062de:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <SysTick_Config+0x40>)
 80062e0:	2207      	movs	r2, #7
 80062e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	e000e010 	.word	0xe000e010

080062f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ff2d 	bl	800615c <__NVIC_SetPriorityGrouping>
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800630a:	b580      	push	{r7, lr}
 800630c:	b086      	sub	sp, #24
 800630e:	af00      	add	r7, sp, #0
 8006310:	4603      	mov	r3, r0
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800631c:	f7ff ff42 	bl	80061a4 <__NVIC_GetPriorityGrouping>
 8006320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	6978      	ldr	r0, [r7, #20]
 8006328:	f7ff ff90 	bl	800624c <NVIC_EncodePriority>
 800632c:	4602      	mov	r2, r0
 800632e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006332:	4611      	mov	r1, r2
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff ff5f 	bl	80061f8 <__NVIC_SetPriority>
}
 800633a:	bf00      	nop
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	4603      	mov	r3, r0
 800634a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800634c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff ff35 	bl	80061c0 <__NVIC_EnableIRQ>
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b082      	sub	sp, #8
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff ffa2 	bl	80062b0 <SysTick_Config>
 800636c:	4603      	mov	r3, r0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e043      	b.n	8006416 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	4b22      	ldr	r3, [pc, #136]	; (8006420 <HAL_DMA_Init+0xa8>)
 8006396:	4413      	add	r3, r2
 8006398:	4a22      	ldr	r2, [pc, #136]	; (8006424 <HAL_DMA_Init+0xac>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	009a      	lsls	r2, r3, #2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <HAL_DMA_Init+0xb0>)
 80063aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80063c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80063c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80063d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr
 8006420:	bffdfff8 	.word	0xbffdfff8
 8006424:	cccccccd 	.word	0xcccccccd
 8006428:	40020000 	.word	0x40020000

0800642c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_DMA_Start_IT+0x20>
 8006448:	2302      	movs	r3, #2
 800644a:	e04b      	b.n	80064e4 <HAL_DMA_Start_IT+0xb8>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d13a      	bne.n	80064d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f937 	bl	80066f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 020e 	orr.w	r2, r2, #14
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e00f      	b.n	80064c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0204 	bic.w	r2, r2, #4
 80064b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 020a 	orr.w	r2, r2, #10
 80064c2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e005      	b.n	80064e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80064de:	2302      	movs	r3, #2
 80064e0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	2204      	movs	r2, #4
 800650a:	409a      	lsls	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d04f      	beq.n	80065b4 <HAL_DMA_IRQHandler+0xc8>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d04a      	beq.n	80065b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d107      	bne.n	800653c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0204 	bic.w	r2, r2, #4
 800653a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a66      	ldr	r2, [pc, #408]	; (80066dc <HAL_DMA_IRQHandler+0x1f0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d029      	beq.n	800659a <HAL_DMA_IRQHandler+0xae>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a65      	ldr	r2, [pc, #404]	; (80066e0 <HAL_DMA_IRQHandler+0x1f4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d022      	beq.n	8006596 <HAL_DMA_IRQHandler+0xaa>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a63      	ldr	r2, [pc, #396]	; (80066e4 <HAL_DMA_IRQHandler+0x1f8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01a      	beq.n	8006590 <HAL_DMA_IRQHandler+0xa4>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a62      	ldr	r2, [pc, #392]	; (80066e8 <HAL_DMA_IRQHandler+0x1fc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d012      	beq.n	800658a <HAL_DMA_IRQHandler+0x9e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a60      	ldr	r2, [pc, #384]	; (80066ec <HAL_DMA_IRQHandler+0x200>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00a      	beq.n	8006584 <HAL_DMA_IRQHandler+0x98>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a5f      	ldr	r2, [pc, #380]	; (80066f0 <HAL_DMA_IRQHandler+0x204>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d102      	bne.n	800657e <HAL_DMA_IRQHandler+0x92>
 8006578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800657c:	e00e      	b.n	800659c <HAL_DMA_IRQHandler+0xb0>
 800657e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006582:	e00b      	b.n	800659c <HAL_DMA_IRQHandler+0xb0>
 8006584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006588:	e008      	b.n	800659c <HAL_DMA_IRQHandler+0xb0>
 800658a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800658e:	e005      	b.n	800659c <HAL_DMA_IRQHandler+0xb0>
 8006590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006594:	e002      	b.n	800659c <HAL_DMA_IRQHandler+0xb0>
 8006596:	2340      	movs	r3, #64	; 0x40
 8006598:	e000      	b.n	800659c <HAL_DMA_IRQHandler+0xb0>
 800659a:	2304      	movs	r3, #4
 800659c:	4a55      	ldr	r2, [pc, #340]	; (80066f4 <HAL_DMA_IRQHandler+0x208>)
 800659e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8094 	beq.w	80066d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80065b2:	e08e      	b.n	80066d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	2202      	movs	r2, #2
 80065ba:	409a      	lsls	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d056      	beq.n	8006672 <HAL_DMA_IRQHandler+0x186>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d051      	beq.n	8006672 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 020a 	bic.w	r2, r2, #10
 80065ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a38      	ldr	r2, [pc, #224]	; (80066dc <HAL_DMA_IRQHandler+0x1f0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d029      	beq.n	8006652 <HAL_DMA_IRQHandler+0x166>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a37      	ldr	r2, [pc, #220]	; (80066e0 <HAL_DMA_IRQHandler+0x1f4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d022      	beq.n	800664e <HAL_DMA_IRQHandler+0x162>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a35      	ldr	r2, [pc, #212]	; (80066e4 <HAL_DMA_IRQHandler+0x1f8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01a      	beq.n	8006648 <HAL_DMA_IRQHandler+0x15c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a34      	ldr	r2, [pc, #208]	; (80066e8 <HAL_DMA_IRQHandler+0x1fc>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d012      	beq.n	8006642 <HAL_DMA_IRQHandler+0x156>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a32      	ldr	r2, [pc, #200]	; (80066ec <HAL_DMA_IRQHandler+0x200>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00a      	beq.n	800663c <HAL_DMA_IRQHandler+0x150>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a31      	ldr	r2, [pc, #196]	; (80066f0 <HAL_DMA_IRQHandler+0x204>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d102      	bne.n	8006636 <HAL_DMA_IRQHandler+0x14a>
 8006630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006634:	e00e      	b.n	8006654 <HAL_DMA_IRQHandler+0x168>
 8006636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800663a:	e00b      	b.n	8006654 <HAL_DMA_IRQHandler+0x168>
 800663c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006640:	e008      	b.n	8006654 <HAL_DMA_IRQHandler+0x168>
 8006642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006646:	e005      	b.n	8006654 <HAL_DMA_IRQHandler+0x168>
 8006648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800664c:	e002      	b.n	8006654 <HAL_DMA_IRQHandler+0x168>
 800664e:	2320      	movs	r3, #32
 8006650:	e000      	b.n	8006654 <HAL_DMA_IRQHandler+0x168>
 8006652:	2302      	movs	r3, #2
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <HAL_DMA_IRQHandler+0x208>)
 8006656:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	d034      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006670:	e02f      	b.n	80066d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	2208      	movs	r2, #8
 8006678:	409a      	lsls	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4013      	ands	r3, r2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d028      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x1e8>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d023      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 020e 	bic.w	r2, r2, #14
 800669a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a4:	2101      	movs	r1, #1
 80066a6:	fa01 f202 	lsl.w	r2, r1, r2
 80066aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d004      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	4798      	blx	r3
    }
  }
  return;
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
}
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	40020008 	.word	0x40020008
 80066e0:	4002001c 	.word	0x4002001c
 80066e4:	40020030 	.word	0x40020030
 80066e8:	40020044 	.word	0x40020044
 80066ec:	40020058 	.word	0x40020058
 80066f0:	4002006c 	.word	0x4002006c
 80066f4:	40020000 	.word	0x40020000

080066f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670e:	2101      	movs	r1, #1
 8006710:	fa01 f202 	lsl.w	r2, r1, r2
 8006714:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b10      	cmp	r3, #16
 8006724:	d108      	bne.n	8006738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006736:	e007      	b.n	8006748 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	60da      	str	r2, [r3, #12]
}
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr
	...

08006754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006754:	b480      	push	{r7}
 8006756:	b08b      	sub	sp, #44	; 0x2c
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800675e:	2300      	movs	r3, #0
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006762:	2300      	movs	r3, #0
 8006764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006766:	e169      	b.n	8006a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006768:	2201      	movs	r2, #1
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	429a      	cmp	r2, r3
 8006782:	f040 8158 	bne.w	8006a36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	4a9a      	ldr	r2, [pc, #616]	; (80069f4 <HAL_GPIO_Init+0x2a0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d05e      	beq.n	800684e <HAL_GPIO_Init+0xfa>
 8006790:	4a98      	ldr	r2, [pc, #608]	; (80069f4 <HAL_GPIO_Init+0x2a0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d875      	bhi.n	8006882 <HAL_GPIO_Init+0x12e>
 8006796:	4a98      	ldr	r2, [pc, #608]	; (80069f8 <HAL_GPIO_Init+0x2a4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d058      	beq.n	800684e <HAL_GPIO_Init+0xfa>
 800679c:	4a96      	ldr	r2, [pc, #600]	; (80069f8 <HAL_GPIO_Init+0x2a4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d86f      	bhi.n	8006882 <HAL_GPIO_Init+0x12e>
 80067a2:	4a96      	ldr	r2, [pc, #600]	; (80069fc <HAL_GPIO_Init+0x2a8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d052      	beq.n	800684e <HAL_GPIO_Init+0xfa>
 80067a8:	4a94      	ldr	r2, [pc, #592]	; (80069fc <HAL_GPIO_Init+0x2a8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d869      	bhi.n	8006882 <HAL_GPIO_Init+0x12e>
 80067ae:	4a94      	ldr	r2, [pc, #592]	; (8006a00 <HAL_GPIO_Init+0x2ac>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d04c      	beq.n	800684e <HAL_GPIO_Init+0xfa>
 80067b4:	4a92      	ldr	r2, [pc, #584]	; (8006a00 <HAL_GPIO_Init+0x2ac>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d863      	bhi.n	8006882 <HAL_GPIO_Init+0x12e>
 80067ba:	4a92      	ldr	r2, [pc, #584]	; (8006a04 <HAL_GPIO_Init+0x2b0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d046      	beq.n	800684e <HAL_GPIO_Init+0xfa>
 80067c0:	4a90      	ldr	r2, [pc, #576]	; (8006a04 <HAL_GPIO_Init+0x2b0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d85d      	bhi.n	8006882 <HAL_GPIO_Init+0x12e>
 80067c6:	2b12      	cmp	r3, #18
 80067c8:	d82a      	bhi.n	8006820 <HAL_GPIO_Init+0xcc>
 80067ca:	2b12      	cmp	r3, #18
 80067cc:	d859      	bhi.n	8006882 <HAL_GPIO_Init+0x12e>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <HAL_GPIO_Init+0x80>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	0800684f 	.word	0x0800684f
 80067d8:	08006829 	.word	0x08006829
 80067dc:	0800683b 	.word	0x0800683b
 80067e0:	0800687d 	.word	0x0800687d
 80067e4:	08006883 	.word	0x08006883
 80067e8:	08006883 	.word	0x08006883
 80067ec:	08006883 	.word	0x08006883
 80067f0:	08006883 	.word	0x08006883
 80067f4:	08006883 	.word	0x08006883
 80067f8:	08006883 	.word	0x08006883
 80067fc:	08006883 	.word	0x08006883
 8006800:	08006883 	.word	0x08006883
 8006804:	08006883 	.word	0x08006883
 8006808:	08006883 	.word	0x08006883
 800680c:	08006883 	.word	0x08006883
 8006810:	08006883 	.word	0x08006883
 8006814:	08006883 	.word	0x08006883
 8006818:	08006831 	.word	0x08006831
 800681c:	08006845 	.word	0x08006845
 8006820:	4a79      	ldr	r2, [pc, #484]	; (8006a08 <HAL_GPIO_Init+0x2b4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006826:	e02c      	b.n	8006882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	623b      	str	r3, [r7, #32]
          break;
 800682e:	e029      	b.n	8006884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	3304      	adds	r3, #4
 8006836:	623b      	str	r3, [r7, #32]
          break;
 8006838:	e024      	b.n	8006884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	3308      	adds	r3, #8
 8006840:	623b      	str	r3, [r7, #32]
          break;
 8006842:	e01f      	b.n	8006884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	330c      	adds	r3, #12
 800684a:	623b      	str	r3, [r7, #32]
          break;
 800684c:	e01a      	b.n	8006884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006856:	2304      	movs	r3, #4
 8006858:	623b      	str	r3, [r7, #32]
          break;
 800685a:	e013      	b.n	8006884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d105      	bne.n	8006870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006864:	2308      	movs	r3, #8
 8006866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	611a      	str	r2, [r3, #16]
          break;
 800686e:	e009      	b.n	8006884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006870:	2308      	movs	r3, #8
 8006872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	615a      	str	r2, [r3, #20]
          break;
 800687a:	e003      	b.n	8006884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800687c:	2300      	movs	r3, #0
 800687e:	623b      	str	r3, [r7, #32]
          break;
 8006880:	e000      	b.n	8006884 <HAL_GPIO_Init+0x130>
          break;
 8006882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2bff      	cmp	r3, #255	; 0xff
 8006888:	d801      	bhi.n	800688e <HAL_GPIO_Init+0x13a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	e001      	b.n	8006892 <HAL_GPIO_Init+0x13e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3304      	adds	r3, #4
 8006892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2bff      	cmp	r3, #255	; 0xff
 8006898:	d802      	bhi.n	80068a0 <HAL_GPIO_Init+0x14c>
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	e002      	b.n	80068a6 <HAL_GPIO_Init+0x152>
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	3b08      	subs	r3, #8
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	210f      	movs	r1, #15
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	fa01 f303 	lsl.w	r3, r1, r3
 80068b4:	43db      	mvns	r3, r3
 80068b6:	401a      	ands	r2, r3
 80068b8:	6a39      	ldr	r1, [r7, #32]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	fa01 f303 	lsl.w	r3, r1, r3
 80068c0:	431a      	orrs	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80b1 	beq.w	8006a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80068d4:	4b4d      	ldr	r3, [pc, #308]	; (8006a0c <HAL_GPIO_Init+0x2b8>)
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	4a4c      	ldr	r2, [pc, #304]	; (8006a0c <HAL_GPIO_Init+0x2b8>)
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	6193      	str	r3, [r2, #24]
 80068e0:	4b4a      	ldr	r3, [pc, #296]	; (8006a0c <HAL_GPIO_Init+0x2b8>)
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	60bb      	str	r3, [r7, #8]
 80068ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80068ec:	4a48      	ldr	r2, [pc, #288]	; (8006a10 <HAL_GPIO_Init+0x2bc>)
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	089b      	lsrs	r3, r3, #2
 80068f2:	3302      	adds	r3, #2
 80068f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	220f      	movs	r2, #15
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	43db      	mvns	r3, r3
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4013      	ands	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a40      	ldr	r2, [pc, #256]	; (8006a14 <HAL_GPIO_Init+0x2c0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <HAL_GPIO_Init+0x1ec>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a3f      	ldr	r2, [pc, #252]	; (8006a18 <HAL_GPIO_Init+0x2c4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00d      	beq.n	800693c <HAL_GPIO_Init+0x1e8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a3e      	ldr	r2, [pc, #248]	; (8006a1c <HAL_GPIO_Init+0x2c8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d007      	beq.n	8006938 <HAL_GPIO_Init+0x1e4>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a3d      	ldr	r2, [pc, #244]	; (8006a20 <HAL_GPIO_Init+0x2cc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d101      	bne.n	8006934 <HAL_GPIO_Init+0x1e0>
 8006930:	2303      	movs	r3, #3
 8006932:	e006      	b.n	8006942 <HAL_GPIO_Init+0x1ee>
 8006934:	2304      	movs	r3, #4
 8006936:	e004      	b.n	8006942 <HAL_GPIO_Init+0x1ee>
 8006938:	2302      	movs	r3, #2
 800693a:	e002      	b.n	8006942 <HAL_GPIO_Init+0x1ee>
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <HAL_GPIO_Init+0x1ee>
 8006940:	2300      	movs	r3, #0
 8006942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006944:	f002 0203 	and.w	r2, r2, #3
 8006948:	0092      	lsls	r2, r2, #2
 800694a:	4093      	lsls	r3, r2
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006952:	492f      	ldr	r1, [pc, #188]	; (8006a10 <HAL_GPIO_Init+0x2bc>)
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	089b      	lsrs	r3, r3, #2
 8006958:	3302      	adds	r3, #2
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d006      	beq.n	800697a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800696c:	4b2d      	ldr	r3, [pc, #180]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	492c      	ldr	r1, [pc, #176]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	4313      	orrs	r3, r2
 8006976:	608b      	str	r3, [r1, #8]
 8006978:	e006      	b.n	8006988 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800697a:	4b2a      	ldr	r3, [pc, #168]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	43db      	mvns	r3, r3
 8006982:	4928      	ldr	r1, [pc, #160]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 8006984:	4013      	ands	r3, r2
 8006986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006994:	4b23      	ldr	r3, [pc, #140]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	4922      	ldr	r1, [pc, #136]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	4313      	orrs	r3, r2
 800699e:	60cb      	str	r3, [r1, #12]
 80069a0:	e006      	b.n	80069b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80069a2:	4b20      	ldr	r3, [pc, #128]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	491e      	ldr	r1, [pc, #120]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d006      	beq.n	80069ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80069bc:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	4918      	ldr	r1, [pc, #96]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	604b      	str	r3, [r1, #4]
 80069c8:	e006      	b.n	80069d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80069ca:	4b16      	ldr	r3, [pc, #88]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	4914      	ldr	r1, [pc, #80]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d021      	beq.n	8006a28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80069e4:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	490e      	ldr	r1, [pc, #56]	; (8006a24 <HAL_GPIO_Init+0x2d0>)
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	600b      	str	r3, [r1, #0]
 80069f0:	e021      	b.n	8006a36 <HAL_GPIO_Init+0x2e2>
 80069f2:	bf00      	nop
 80069f4:	10320000 	.word	0x10320000
 80069f8:	10310000 	.word	0x10310000
 80069fc:	10220000 	.word	0x10220000
 8006a00:	10210000 	.word	0x10210000
 8006a04:	10120000 	.word	0x10120000
 8006a08:	10110000 	.word	0x10110000
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40010800 	.word	0x40010800
 8006a18:	40010c00 	.word	0x40010c00
 8006a1c:	40011000 	.word	0x40011000
 8006a20:	40011400 	.word	0x40011400
 8006a24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_GPIO_Init+0x304>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	43db      	mvns	r3, r3
 8006a30:	4909      	ldr	r1, [pc, #36]	; (8006a58 <HAL_GPIO_Init+0x304>)
 8006a32:	4013      	ands	r3, r2
 8006a34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	3301      	adds	r3, #1
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	fa22 f303 	lsr.w	r3, r2, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f47f ae8e 	bne.w	8006768 <HAL_GPIO_Init+0x14>
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	372c      	adds	r7, #44	; 0x2c
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr
 8006a58:	40010400 	.word	0x40010400

08006a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	807b      	strh	r3, [r7, #2]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a6c:	787b      	ldrb	r3, [r7, #1]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a72:	887a      	ldrh	r2, [r7, #2]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006a78:	e003      	b.n	8006a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006a7a:	887b      	ldrh	r3, [r7, #2]
 8006a7c:	041a      	lsls	r2, r3, #16
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	611a      	str	r2, [r3, #16]
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a9e:	887a      	ldrh	r2, [r7, #2]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	041a      	lsls	r2, r3, #16
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	43d9      	mvns	r1, r3
 8006aaa:	887b      	ldrh	r3, [r7, #2]
 8006aac:	400b      	ands	r3, r1
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	611a      	str	r2, [r3, #16]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ac0:	b08b      	sub	sp, #44	; 0x2c
 8006ac2:	af06      	add	r7, sp, #24
 8006ac4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0f1      	b.n	8006cb4 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f006 ff6f 	bl	800d9c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2203      	movs	r2, #3
 8006aee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f002 fe70 	bl	80097dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	687e      	ldr	r6, [r7, #4]
 8006b04:	466d      	mov	r5, sp
 8006b06:	f106 0410 	add.w	r4, r6, #16
 8006b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	602b      	str	r3, [r5, #0]
 8006b12:	1d33      	adds	r3, r6, #4
 8006b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b16:	6838      	ldr	r0, [r7, #0]
 8006b18:	f002 fe3a 	bl	8009790 <USB_CoreInit>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e0c2      	b.n	8006cb4 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f002 fe6b 	bl	8009810 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
 8006b3e:	e040      	b.n	8006bc2 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	440b      	add	r3, r1
 8006b50:	3301      	adds	r3, #1
 8006b52:	2201      	movs	r2, #1
 8006b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	440b      	add	r3, r1
 8006b66:	7bfa      	ldrb	r2, [r7, #15]
 8006b68:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	440b      	add	r3, r1
 8006b7a:	3303      	adds	r3, #3
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b80:	7bfa      	ldrb	r2, [r7, #15]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3338      	adds	r3, #56	; 0x38
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b94:	7bfa      	ldrb	r2, [r7, #15]
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	440b      	add	r3, r1
 8006ba2:	333c      	adds	r3, #60	; 0x3c
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ba8:	7bfa      	ldrb	r2, [r7, #15]
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3340      	adds	r3, #64	; 0x40
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	73fb      	strb	r3, [r7, #15]
 8006bc2:	7bfa      	ldrb	r2, [r7, #15]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d3b9      	bcc.n	8006b40 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]
 8006bd0:	e044      	b.n	8006c5c <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006bd2:	7bfa      	ldrb	r2, [r7, #15]
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	440b      	add	r3, r1
 8006be0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006be8:	7bfa      	ldrb	r2, [r7, #15]
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	440b      	add	r3, r1
 8006bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006bfa:	7bfa      	ldrb	r2, [r7, #15]
 8006bfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	440b      	add	r3, r1
 8006c0c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c14:	7bfa      	ldrb	r2, [r7, #15]
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	440b      	add	r3, r1
 8006c22:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c2a:	7bfa      	ldrb	r2, [r7, #15]
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	440b      	add	r3, r1
 8006c38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c40:	7bfa      	ldrb	r2, [r7, #15]
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	440b      	add	r3, r1
 8006c4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	73fb      	strb	r3, [r7, #15]
 8006c5c:	7bfa      	ldrb	r2, [r7, #15]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d3b5      	bcc.n	8006bd2 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	687e      	ldr	r6, [r7, #4]
 8006c6e:	466d      	mov	r5, sp
 8006c70:	f106 0410 	add.w	r4, r6, #16
 8006c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	1d33      	adds	r3, r6, #4
 8006c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c80:	6838      	ldr	r0, [r7, #0]
 8006c82:	f002 fdd1 	bl	8009828 <USB_DevInit>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e00d      	b.n	8006cb4 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f005 f852 	bl	800bd56 <USB_DevDisconnect>

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_PCD_Start+0x16>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e016      	b.n	8006d00 <HAL_PCD_Start+0x44>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f002 fd66 	bl	80097b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f007 f8e1 	bl	800deae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f005 f826 	bl	800bd42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f005 f828 	bl	800bd6a <USB_ReadInterrupts>
 8006d1a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fb1b 	bl	8007362 <PCD_EP_ISR_Handler>

    return;
 8006d2c:	e119      	b.n	8006f62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d013      	beq.n	8006d60 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f006 feb4 	bl	800dabe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006d56:	2100      	movs	r1, #0
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f905 	bl	8006f68 <HAL_PCD_SetAddress>

    return;
 8006d5e:	e100      	b.n	8006f62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00c      	beq.n	8006d84 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d7c:	b292      	uxth	r2, r2
 8006d7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006d82:	e0ee      	b.n	8006f62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006da0:	b292      	uxth	r2, r2
 8006da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006da6:	e0dc      	b.n	8006f62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d027      	beq.n	8006e02 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0204 	bic.w	r2, r2, #4
 8006dc4:	b292      	uxth	r2, r2
 8006dc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0208 	bic.w	r2, r2, #8
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f006 fea4 	bl	800db30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dfa:	b292      	uxth	r2, r2
 8006dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006e00:	e0af      	b.n	8006f62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8083 	beq.w	8006f14 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e010      	b.n	8006e36 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	7ffb      	ldrb	r3, [r7, #31]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	441a      	add	r2, r3
 8006e20:	7ffb      	ldrb	r3, [r7, #31]
 8006e22:	8812      	ldrh	r2, [r2, #0]
 8006e24:	b292      	uxth	r2, r2
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	3320      	adds	r3, #32
 8006e2a:	443b      	add	r3, r7
 8006e2c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8006e30:	7ffb      	ldrb	r3, [r7, #31]
 8006e32:	3301      	adds	r3, #1
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	7ffb      	ldrb	r3, [r7, #31]
 8006e38:	2b07      	cmp	r3, #7
 8006e3a:	d9eb      	bls.n	8006e14 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	b292      	uxth	r2, r2
 8006e50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0201 	bic.w	r2, r2, #1
 8006e66:	b292      	uxth	r2, r2
 8006e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8006e6c:	bf00      	nop
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0f6      	beq.n	8006e6e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e92:	b292      	uxth	r2, r2
 8006e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	77fb      	strb	r3, [r7, #31]
 8006e9c:	e00f      	b.n	8006ebe <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8006e9e:	7ffb      	ldrb	r3, [r7, #31]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	7ffa      	ldrb	r2, [r7, #31]
 8006ea8:	0092      	lsls	r2, r2, #2
 8006eaa:	440a      	add	r2, r1
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	3320      	adds	r3, #32
 8006eb0:	443b      	add	r3, r7
 8006eb2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006eb6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8006eb8:	7ffb      	ldrb	r3, [r7, #31]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	7ffb      	ldrb	r3, [r7, #31]
 8006ec0:	2b07      	cmp	r3, #7
 8006ec2:	d9ec      	bls.n	8006e9e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0208 	orr.w	r2, r2, #8
 8006ed6:	b292      	uxth	r2, r2
 8006ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eee:	b292      	uxth	r2, r2
 8006ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0204 	orr.w	r2, r2, #4
 8006f06:	b292      	uxth	r2, r2
 8006f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f006 fdf5 	bl	800dafc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006f12:	e026      	b.n	8006f62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00f      	beq.n	8006f3e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f30:	b292      	uxth	r2, r2
 8006f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f006 fdb3 	bl	800daa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006f3c:	e011      	b.n	8006f62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00c      	beq.n	8006f62 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f5a:	b292      	uxth	r2, r2
 8006f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006f60:	bf00      	nop
  }
}
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_PCD_SetAddress+0x1a>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e013      	b.n	8006faa <HAL_PCD_SetAddress+0x42>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	78fa      	ldrb	r2, [r7, #3]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f004 febe 	bl	800bd1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	4608      	mov	r0, r1
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	70fb      	strb	r3, [r7, #3]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	803b      	strh	r3, [r7, #0]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	da0e      	bge.n	8006ff6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	705a      	strb	r2, [r3, #1]
 8006ff4:	e00e      	b.n	8007014 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ff6:	78fb      	ldrb	r3, [r7, #3]
 8006ff8:	f003 0207 	and.w	r2, r3, #7
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	4413      	add	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	b2da      	uxtb	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007020:	883a      	ldrh	r2, [r7, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	78ba      	ldrb	r2, [r7, #2]
 800702a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800702c:	78bb      	ldrb	r3, [r7, #2]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d102      	bne.n	8007038 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_PCD_EP_Open+0x94>
 8007042:	2302      	movs	r3, #2
 8007044:	e00e      	b.n	8007064 <HAL_PCD_EP_Open+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68f9      	ldr	r1, [r7, #12]
 8007054:	4618      	mov	r0, r3
 8007056:	f002 fc07 	bl	8009868 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8007062:	7afb      	ldrb	r3, [r7, #11]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800707c:	2b00      	cmp	r3, #0
 800707e:	da0e      	bge.n	800709e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	4613      	mov	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	00db      	lsls	r3, r3, #3
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2201      	movs	r2, #1
 800709a:	705a      	strb	r2, [r3, #1]
 800709c:	e00e      	b.n	80070bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	f003 0207 	and.w	r2, r3, #7
 80070a4:	4613      	mov	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	4413      	add	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80070bc:	78fb      	ldrb	r3, [r7, #3]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_PCD_EP_Close+0x6a>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e00e      	b.n	80070f4 <HAL_PCD_EP_Close+0x88>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f002 ff7f 	bl	8009fe8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	460b      	mov	r3, r1
 800710a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800710c:	7afb      	ldrb	r3, [r7, #11]
 800710e:	f003 0207 	and.w	r2, r3, #7
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2200      	movs	r2, #0
 8007134:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2200      	movs	r2, #0
 800713a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800713c:	7afb      	ldrb	r3, [r7, #11]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	b2da      	uxtb	r2, r3
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6979      	ldr	r1, [r7, #20]
 800714e:	4618      	mov	r0, r3
 8007150:	f003 f936 	bl	800a3c0 <USB_EPStartXfer>

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	f003 0207 	and.w	r2, r3, #7
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	440b      	add	r3, r1
 800717c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007180:	681b      	ldr	r3, [r3, #0]
}
 8007182:	4618      	mov	r0, r3
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	607a      	str	r2, [r7, #4]
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	460b      	mov	r3, r1
 800719a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2200      	movs	r2, #0
 80071d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2201      	movs	r2, #1
 80071d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071d8:	7afb      	ldrb	r3, [r7, #11]
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6979      	ldr	r1, [r7, #20]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f003 f8e8 	bl	800a3c0 <USB_EPStartXfer>

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	f003 0207 	and.w	r2, r3, #7
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d901      	bls.n	8007218 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e04c      	b.n	80072b2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800721c:	2b00      	cmp	r3, #0
 800721e:	da0e      	bge.n	800723e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	4413      	add	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2201      	movs	r2, #1
 800723a:	705a      	strb	r2, [r3, #1]
 800723c:	e00c      	b.n	8007258 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4413      	add	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	b2da      	uxtb	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_PCD_EP_SetStall+0x7e>
 8007274:	2302      	movs	r3, #2
 8007276:	e01c      	b.n	80072b2 <HAL_PCD_EP_SetStall+0xb8>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68f9      	ldr	r1, [r7, #12]
 8007286:	4618      	mov	r0, r3
 8007288:	f004 fc4b 	bl	800bb22 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	2b00      	cmp	r3, #0
 8007294:	d108      	bne.n	80072a8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f004 fd70 	bl	800bd88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	f003 020f 	and.w	r2, r3, #15
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d901      	bls.n	80072d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e040      	b.n	800735a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da0e      	bge.n	80072fe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	4413      	add	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	705a      	strb	r2, [r3, #1]
 80072fc:	e00e      	b.n	800731c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	f003 0207 	and.w	r2, r3, #7
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	4413      	add	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	b2da      	uxtb	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_PCD_EP_ClrStall+0x82>
 8007338:	2302      	movs	r3, #2
 800733a:	e00e      	b.n	800735a <HAL_PCD_EP_ClrStall+0xa0>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68f9      	ldr	r1, [r7, #12]
 800734a:	4618      	mov	r0, r3
 800734c:	f004 fc39 	bl	800bbc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b096      	sub	sp, #88	; 0x58
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800736a:	e3bf      	b.n	8007aec <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007374:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007378:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8007386:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 8179 	bne.w	8007682 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007390:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d152      	bne.n	8007442 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80073a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ac:	81fb      	strh	r3, [r7, #14]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	89fb      	ldrh	r3, [r7, #14]
 80073b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073bc:	b29b      	uxth	r3, r3
 80073be:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3328      	adds	r3, #40	; 0x28
 80073c4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	4413      	add	r3, r2
 80073da:	3302      	adds	r3, #2
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80073ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80073f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f4:	695a      	ldr	r2, [r3, #20]
 80073f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	441a      	add	r2, r3
 80073fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073fe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f006 fb33 	bl	800da6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 836b 	beq.w	8007aec <PCD_EP_ISR_Handler+0x78a>
 8007416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 8366 	bne.w	8007aec <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800742c:	b2da      	uxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	b292      	uxth	r2, r2
 8007434:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007440:	e354      	b.n	8007aec <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007448:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007454:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745c:	2b00      	cmp	r3, #0
 800745e:	d034      	beq.n	80074ca <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007468:	b29b      	uxth	r3, r3
 800746a:	461a      	mov	r2, r3
 800746c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	4413      	add	r3, r2
 8007474:	3306      	adds	r3, #6
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6812      	ldr	r2, [r2, #0]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800748a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007498:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800749a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800749c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f004 fcc2 	bl	800be28 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80074b0:	4013      	ands	r3, r2
 80074b2:	823b      	strh	r3, [r7, #16]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	8a3a      	ldrh	r2, [r7, #16]
 80074ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074be:	b292      	uxth	r2, r2
 80074c0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f006 faa6 	bl	800da14 <HAL_PCD_SetupStageCallback>
 80074c8:	e310      	b.n	8007aec <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80074ca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f280 830c 	bge.w	8007aec <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	b29a      	uxth	r2, r3
 80074dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80074e0:	4013      	ands	r3, r2
 80074e2:	83fb      	strh	r3, [r7, #30]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	8bfa      	ldrh	r2, [r7, #30]
 80074ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074ee:	b292      	uxth	r2, r2
 80074f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	4413      	add	r3, r2
 8007506:	3306      	adds	r3, #6
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6812      	ldr	r2, [r2, #0]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800751a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800751e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d019      	beq.n	800755a <PCD_EP_ISR_Handler+0x1f8>
 8007526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d015      	beq.n	800755a <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007534:	6959      	ldr	r1, [r3, #20]
 8007536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007538:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800753a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800753c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800753e:	b29b      	uxth	r3, r3
 8007540:	f004 fc72 	bl	800be28 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	441a      	add	r2, r3
 800754e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007550:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007552:	2100      	movs	r1, #0
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f006 fa6f 	bl	800da38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007564:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800756c:	2b00      	cmp	r3, #0
 800756e:	f040 82bd 	bne.w	8007aec <PCD_EP_ISR_Handler+0x78a>
 8007572:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007576:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800757a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800757e:	f000 82b5 	beq.w	8007aec <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	61bb      	str	r3, [r7, #24]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007590:	b29b      	uxth	r3, r3
 8007592:	461a      	mov	r2, r3
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	4413      	add	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b3e      	cmp	r3, #62	; 0x3e
 80075b8:	d91d      	bls.n	80075f6 <PCD_EP_ISR_Handler+0x294>
 80075ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	647b      	str	r3, [r7, #68]	; 0x44
 80075c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d102      	bne.n	80075d4 <PCD_EP_ISR_Handler+0x272>
 80075ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d0:	3b01      	subs	r3, #1
 80075d2:	647b      	str	r3, [r7, #68]	; 0x44
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29a      	uxth	r2, r3
 80075da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075dc:	b29b      	uxth	r3, r3
 80075de:	029b      	lsls	r3, r3, #10
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	4313      	orrs	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	e026      	b.n	8007644 <PCD_EP_ISR_Handler+0x2e2>
 80075f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10a      	bne.n	8007614 <PCD_EP_ISR_Handler+0x2b2>
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800760c:	b29a      	uxth	r2, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	e017      	b.n	8007644 <PCD_EP_ISR_Handler+0x2e2>
 8007614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	085b      	lsrs	r3, r3, #1
 800761a:	647b      	str	r3, [r7, #68]	; 0x44
 800761c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <PCD_EP_ISR_Handler+0x2cc>
 8007628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762a:	3301      	adds	r3, #1
 800762c:	647b      	str	r3, [r7, #68]	; 0x44
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29a      	uxth	r2, r3
 8007634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007636:	b29b      	uxth	r3, r3
 8007638:	029b      	lsls	r3, r3, #10
 800763a:	b29b      	uxth	r3, r3
 800763c:	4313      	orrs	r3, r2
 800763e:	b29a      	uxth	r2, r3
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007654:	827b      	strh	r3, [r7, #18]
 8007656:	8a7b      	ldrh	r3, [r7, #18]
 8007658:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800765c:	827b      	strh	r3, [r7, #18]
 800765e:	8a7b      	ldrh	r3, [r7, #18]
 8007660:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007664:	827b      	strh	r3, [r7, #18]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	8a7b      	ldrh	r3, [r7, #18]
 800766c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767c:	b29b      	uxth	r3, r3
 800767e:	8013      	strh	r3, [r2, #0]
 8007680:	e234      	b.n	8007aec <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007696:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800769a:	2b00      	cmp	r3, #0
 800769c:	f280 80fc 	bge.w	8007898 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80076b6:	4013      	ands	r3, r2
 80076b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80076ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076d2:	b292      	uxth	r2, r2
 80076d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80076d6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	4413      	add	r3, r2
 80076ea:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80076ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ee:	7b1b      	ldrb	r3, [r3, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d125      	bne.n	8007740 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	4413      	add	r3, r2
 8007708:	3306      	adds	r3, #6
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800771c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8007720:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 8092 	beq.w	800784e <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007730:	6959      	ldr	r1, [r3, #20]
 8007732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007734:	88da      	ldrh	r2, [r3, #6]
 8007736:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800773a:	f004 fb75 	bl	800be28 <USB_ReadPMA>
 800773e:	e086      	b.n	800784e <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007742:	78db      	ldrb	r3, [r3, #3]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d10a      	bne.n	800775e <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007748:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800774c:	461a      	mov	r2, r3
 800774e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f9d9 	bl	8007b08 <HAL_PCD_EP_DB_Receive>
 8007756:	4603      	mov	r3, r0
 8007758:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800775c:	e077      	b.n	800784e <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007778:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800778e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800779a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800779e:	b29b      	uxth	r3, r3
 80077a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d024      	beq.n	8007806 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	4413      	add	r3, r2
 80077d0:	3302      	adds	r3, #2
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80077e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d02e      	beq.n	800784e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077f6:	6959      	ldr	r1, [r3, #20]
 80077f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077fa:	891a      	ldrh	r2, [r3, #8]
 80077fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007800:	f004 fb12 	bl	800be28 <USB_ReadPMA>
 8007804:	e023      	b.n	800784e <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800780e:	b29b      	uxth	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	4413      	add	r3, r2
 800781a:	3306      	adds	r3, #6
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800782e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007832:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007836:	2b00      	cmp	r3, #0
 8007838:	d009      	beq.n	800784e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007840:	6959      	ldr	r1, [r3, #20]
 8007842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007844:	895a      	ldrh	r2, [r3, #10]
 8007846:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800784a:	f004 faed 	bl	800be28 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800784e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007850:	69da      	ldr	r2, [r3, #28]
 8007852:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007856:	441a      	add	r2, r3
 8007858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800785a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800785c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800785e:	695a      	ldr	r2, [r3, #20]
 8007860:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007864:	441a      	add	r2, r3
 8007866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007868:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800786a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <PCD_EP_ISR_Handler+0x51c>
 8007872:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	429a      	cmp	r2, r3
 800787c:	d206      	bcs.n	800788c <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800787e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f006 f8d7 	bl	800da38 <HAL_PCD_DataOutStageCallback>
 800788a:	e005      	b.n	8007898 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007892:	4618      	mov	r0, r3
 8007894:	f002 fd94 	bl	800a3c0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007898:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800789c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 8123 	beq.w	8007aec <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80078a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	4413      	add	r3, r2
 80078b8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80078d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	441a      	add	r2, r3
 80078e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80078ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80078f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f8:	78db      	ldrb	r3, [r3, #3]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	f040 80a2 	bne.w	8007a44 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8007900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007902:	2200      	movs	r2, #0
 8007904:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007908:	7b1b      	ldrb	r3, [r3, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8093 	beq.w	8007a36 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007910:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d046      	beq.n	80079aa <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800791c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d126      	bne.n	8007972 <PCD_EP_ISR_Handler+0x610>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007932:	b29b      	uxth	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	4413      	add	r3, r2
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
 800793c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	011a      	lsls	r2, r3, #4
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	4413      	add	r3, r2
 8007946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800794a:	623b      	str	r3, [r7, #32]
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007956:	b29a      	uxth	r2, r3
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	801a      	strh	r2, [r3, #0]
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796a:	b29a      	uxth	r2, r3
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	e061      	b.n	8007a36 <PCD_EP_ISR_Handler+0x6d4>
 8007972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d15d      	bne.n	8007a36 <PCD_EP_ISR_Handler+0x6d4>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007988:	b29b      	uxth	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	4413      	add	r3, r2
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	011a      	lsls	r2, r3, #4
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	4413      	add	r3, r2
 800799c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	2200      	movs	r2, #0
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e045      	b.n	8007a36 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d126      	bne.n	8007a06 <PCD_EP_ISR_Handler+0x6a4>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079cc:	4413      	add	r3, r2
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
 80079d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	011a      	lsls	r2, r3, #4
 80079d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d8:	4413      	add	r3, r2
 80079da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079de:	633b      	str	r3, [r7, #48]	; 0x30
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	801a      	strh	r2, [r3, #0]
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	801a      	strh	r2, [r3, #0]
 8007a04:	e017      	b.n	8007a36 <PCD_EP_ISR_Handler+0x6d4>
 8007a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d113      	bne.n	8007a36 <PCD_EP_ISR_Handler+0x6d4>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1c:	4413      	add	r3, r2
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	011a      	lsls	r2, r3, #4
 8007a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a28:	4413      	add	r3, r2
 8007a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a32:	2200      	movs	r2, #0
 8007a34:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f006 f816 	bl	800da6e <HAL_PCD_DataInStageCallback>
 8007a42:	e053      	b.n	8007aec <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d146      	bne.n	8007ade <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	00db      	lsls	r3, r3, #3
 8007a62:	4413      	add	r3, r2
 8007a64:	3302      	adds	r3, #2
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d907      	bls.n	8007a98 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8007a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007a90:	1ad2      	subs	r2, r2, r3
 8007a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a94:	619a      	str	r2, [r3, #24]
 8007a96:	e002      	b.n	8007a9e <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8007a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f005 ffde 	bl	800da6e <HAL_PCD_DataInStageCallback>
 8007ab2:	e01b      	b.n	8007aec <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab6:	695a      	ldr	r2, [r3, #20]
 8007ab8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007abc:	441a      	add	r2, r3
 8007abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ac0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ac4:	69da      	ldr	r2, [r3, #28]
 8007ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007aca:	441a      	add	r2, r3
 8007acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ace:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f002 fc72 	bl	800a3c0 <USB_EPStartXfer>
 8007adc:	e006      	b.n	8007aec <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007ade:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f91b 	bl	8007d22 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	b21b      	sxth	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f6ff ac37 	blt.w	800736c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3758      	adds	r7, #88	; 0x58
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d07e      	beq.n	8007c1e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	4413      	add	r3, r2
 8007b34:	3302      	adds	r3, #2
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	8b7b      	ldrh	r3, [r7, #26]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d306      	bcc.n	8007b62 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	8b7b      	ldrh	r3, [r7, #26]
 8007b5a:	1ad2      	subs	r2, r2, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	619a      	str	r2, [r3, #24]
 8007b60:	e002      	b.n	8007b68 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d123      	bne.n	8007bb8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	461a      	mov	r2, r3
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8a:	833b      	strh	r3, [r7, #24]
 8007b8c:	8b3b      	ldrh	r3, [r7, #24]
 8007b8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b92:	833b      	strh	r3, [r7, #24]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	8b3b      	ldrh	r3, [r7, #24]
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007bb8:	88fb      	ldrh	r3, [r7, #6]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01f      	beq.n	8007c02 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bdc:	82fb      	strh	r3, [r7, #22]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	441a      	add	r2, r3
 8007bec:	8afb      	ldrh	r3, [r7, #22]
 8007bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007c02:	8b7b      	ldrh	r3, [r7, #26]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8087 	beq.w	8007d18 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	6959      	ldr	r1, [r3, #20]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	891a      	ldrh	r2, [r3, #8]
 8007c16:	8b7b      	ldrh	r3, [r7, #26]
 8007c18:	f004 f906 	bl	800be28 <USB_ReadPMA>
 8007c1c:	e07c      	b.n	8007d18 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4413      	add	r3, r2
 8007c32:	3306      	adds	r3, #6
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	6812      	ldr	r2, [r2, #0]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	699a      	ldr	r2, [r3, #24]
 8007c4c:	8b7b      	ldrh	r3, [r7, #26]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d306      	bcc.n	8007c60 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	8b7b      	ldrh	r3, [r7, #26]
 8007c58:	1ad2      	subs	r2, r2, r3
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	619a      	str	r2, [r3, #24]
 8007c5e:	e002      	b.n	8007c66 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2200      	movs	r2, #0
 8007c64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d123      	bne.n	8007cb6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c88:	83fb      	strh	r3, [r7, #30]
 8007c8a:	8bfb      	ldrh	r3, [r7, #30]
 8007c8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c90:	83fb      	strh	r3, [r7, #30]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	441a      	add	r2, r3
 8007ca0:	8bfb      	ldrh	r3, [r7, #30]
 8007ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d11f      	bne.n	8007d00 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cda:	83bb      	strh	r3, [r7, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	441a      	add	r2, r3
 8007cea:	8bbb      	ldrh	r3, [r7, #28]
 8007cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007d00:	8b7b      	ldrh	r3, [r7, #26]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	6959      	ldr	r1, [r3, #20]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	895a      	ldrh	r2, [r3, #10]
 8007d12:	8b7b      	ldrh	r3, [r7, #26]
 8007d14:	f004 f888 	bl	800be28 <USB_ReadPMA>
    }
  }

  return count;
 8007d18:	8b7b      	ldrh	r3, [r7, #26]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b0a4      	sub	sp, #144	; 0x90
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d30:	88fb      	ldrh	r3, [r7, #6]
 8007d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 81dd 	beq.w	80080f6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	4413      	add	r3, r2
 8007d50:	3302      	adds	r3, #2
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d64:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	699a      	ldr	r2, [r3, #24]
 8007d6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d907      	bls.n	8007d84 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	699a      	ldr	r2, [r3, #24]
 8007d78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007d7c:	1ad2      	subs	r2, r2, r3
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	619a      	str	r2, [r3, #24]
 8007d82:	e002      	b.n	8007d8a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2200      	movs	r2, #0
 8007d88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f040 80b9 	bne.w	8007f06 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d126      	bne.n	8007dea <HAL_PCD_EP_DB_Transmit+0xc8>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	4413      	add	r3, r2
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	011a      	lsls	r2, r3, #4
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	e01a      	b.n	8007e20 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d116      	bne.n	8007e20 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e06:	4413      	add	r3, r2
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	011a      	lsls	r2, r3, #4
 8007e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e12:	4413      	add	r3, r2
 8007e14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e18:	633b      	str	r3, [r7, #48]	; 0x30
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d126      	bne.n	8007e7c <HAL_PCD_EP_DB_Transmit+0x15a>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	461a      	mov	r2, r3
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	61fb      	str	r3, [r7, #28]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	011a      	lsls	r2, r3, #4
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	801a      	strh	r2, [r3, #0]
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	e017      	b.n	8007eac <HAL_PCD_EP_DB_Transmit+0x18a>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d113      	bne.n	8007eac <HAL_PCD_EP_DB_Transmit+0x18a>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	4413      	add	r3, r2
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	011a      	lsls	r2, r3, #4
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ea4:	623b      	str	r3, [r7, #32]
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f005 fddb 	bl	800da6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 82fc 	beq.w	80084bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ede:	82fb      	strh	r3, [r7, #22]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	441a      	add	r2, r3
 8007eee:	8afb      	ldrh	r3, [r7, #22]
 8007ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	8013      	strh	r3, [r2, #0]
 8007f04:	e2da      	b.n	80084bc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d021      	beq.n	8007f54 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	441a      	add	r2, r3
 8007f3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	f040 82ae 	bne.w	80084bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	695a      	ldr	r2, [r3, #20]
 8007f64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007f68:	441a      	add	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	69da      	ldr	r2, [r3, #28]
 8007f72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007f76:	441a      	add	r2, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6a1a      	ldr	r2, [r3, #32]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d30b      	bcc.n	8007fa0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6a1a      	ldr	r2, [r3, #32]
 8007f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f98:	1ad2      	subs	r2, r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	621a      	str	r2, [r3, #32]
 8007f9e:	e017      	b.n	8007fd0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d108      	bne.n	8007fba <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8007fa8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007fb8:	e00a      	b.n	8007fd0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d165      	bne.n	80080a4 <HAL_PCD_EP_DB_Transmit+0x382>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fec:	4413      	add	r3, r2
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	011a      	lsls	r2, r3, #4
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800800a:	b29a      	uxth	r2, r3
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	801a      	strh	r2, [r3, #0]
 8008010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008014:	2b3e      	cmp	r3, #62	; 0x3e
 8008016:	d91d      	bls.n	8008054 <HAL_PCD_EP_DB_Transmit+0x332>
 8008018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800801c:	095b      	lsrs	r3, r3, #5
 800801e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008024:	f003 031f 	and.w	r3, r3, #31
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <HAL_PCD_EP_DB_Transmit+0x310>
 800802c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800802e:	3b01      	subs	r3, #1
 8008030:	64bb      	str	r3, [r7, #72]	; 0x48
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29a      	uxth	r2, r3
 8008038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800803a:	b29b      	uxth	r3, r3
 800803c:	029b      	lsls	r3, r3, #10
 800803e:	b29b      	uxth	r3, r3
 8008040:	4313      	orrs	r3, r2
 8008042:	b29b      	uxth	r3, r3
 8008044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804c:	b29a      	uxth	r2, r3
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	801a      	strh	r2, [r3, #0]
 8008052:	e044      	b.n	80080de <HAL_PCD_EP_DB_Transmit+0x3bc>
 8008054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <HAL_PCD_EP_DB_Transmit+0x350>
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800806a:	b29a      	uxth	r2, r3
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	e035      	b.n	80080de <HAL_PCD_EP_DB_Transmit+0x3bc>
 8008072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	64bb      	str	r3, [r7, #72]	; 0x48
 800807a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <HAL_PCD_EP_DB_Transmit+0x36a>
 8008086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008088:	3301      	adds	r3, #1
 800808a:	64bb      	str	r3, [r7, #72]	; 0x48
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29a      	uxth	r2, r3
 8008092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008094:	b29b      	uxth	r3, r3
 8008096:	029b      	lsls	r3, r3, #10
 8008098:	b29b      	uxth	r3, r3
 800809a:	4313      	orrs	r3, r2
 800809c:	b29a      	uxth	r2, r3
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	801a      	strh	r2, [r3, #0]
 80080a2:	e01c      	b.n	80080de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	785b      	ldrb	r3, [r3, #1]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d118      	bne.n	80080de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	647b      	str	r3, [r7, #68]	; 0x44
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c0:	4413      	add	r3, r2
 80080c2:	647b      	str	r3, [r7, #68]	; 0x44
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	011a      	lsls	r2, r3, #4
 80080ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080cc:	4413      	add	r3, r2
 80080ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080d2:	643b      	str	r3, [r7, #64]	; 0x40
 80080d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080d8:	b29a      	uxth	r2, r3
 80080da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6959      	ldr	r1, [r3, #20]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	891a      	ldrh	r2, [r3, #8]
 80080ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f003 fe55 	bl	800bd9e <USB_WritePMA>
 80080f4:	e1e2      	b.n	80084bc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080fe:	b29b      	uxth	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4413      	add	r3, r2
 800810a:	3306      	adds	r3, #6
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	6812      	ldr	r2, [r2, #0]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800811e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800812a:	429a      	cmp	r2, r3
 800812c:	d307      	bcc.n	800813e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	619a      	str	r2, [r3, #24]
 800813c:	e002      	b.n	8008144 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2200      	movs	r2, #0
 8008142:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	f040 80c0 	bne.w	80082ce <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d126      	bne.n	80081a4 <HAL_PCD_EP_DB_Transmit+0x482>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008164:	b29b      	uxth	r3, r3
 8008166:	461a      	mov	r2, r3
 8008168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800816a:	4413      	add	r3, r2
 800816c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	011a      	lsls	r2, r3, #4
 8008174:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008176:	4413      	add	r3, r2
 8008178:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800817c:	67bb      	str	r3, [r7, #120]	; 0x78
 800817e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008188:	b29a      	uxth	r2, r3
 800818a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800818c:	801a      	strh	r2, [r3, #0]
 800818e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800819c:	b29a      	uxth	r2, r3
 800819e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081a0:	801a      	strh	r2, [r3, #0]
 80081a2:	e01a      	b.n	80081da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d116      	bne.n	80081da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	667b      	str	r3, [r7, #100]	; 0x64
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081c0:	4413      	add	r3, r2
 80081c2:	667b      	str	r3, [r7, #100]	; 0x64
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	011a      	lsls	r2, r3, #4
 80081ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081cc:	4413      	add	r3, r2
 80081ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081d2:	663b      	str	r3, [r7, #96]	; 0x60
 80081d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081d6:	2200      	movs	r2, #0
 80081d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	677b      	str	r3, [r7, #116]	; 0x74
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d12b      	bne.n	8008240 <HAL_PCD_EP_DB_Transmit+0x51e>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fc:	4413      	add	r3, r2
 80081fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	011a      	lsls	r2, r3, #4
 8008206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008208:	4413      	add	r3, r2
 800820a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800820e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	b29b      	uxth	r3, r3
 800821a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800821e:	b29a      	uxth	r2, r3
 8008220:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008224:	801a      	strh	r2, [r3, #0]
 8008226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	b29b      	uxth	r3, r3
 800822e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008236:	b29a      	uxth	r2, r3
 8008238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800823c:	801a      	strh	r2, [r3, #0]
 800823e:	e017      	b.n	8008270 <HAL_PCD_EP_DB_Transmit+0x54e>
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d113      	bne.n	8008270 <HAL_PCD_EP_DB_Transmit+0x54e>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008250:	b29b      	uxth	r3, r3
 8008252:	461a      	mov	r2, r3
 8008254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008256:	4413      	add	r3, r2
 8008258:	677b      	str	r3, [r7, #116]	; 0x74
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	011a      	lsls	r2, r3, #4
 8008260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008262:	4413      	add	r3, r2
 8008264:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008268:	673b      	str	r3, [r7, #112]	; 0x70
 800826a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800826c:	2200      	movs	r2, #0
 800826e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	4619      	mov	r1, r3
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f005 fbf9 	bl	800da6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800827c:	88fb      	ldrh	r3, [r7, #6]
 800827e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008282:	2b00      	cmp	r3, #0
 8008284:	f040 811a 	bne.w	80084bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800829e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	441a      	add	r2, r3
 80082b4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80082b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	8013      	strh	r3, [r2, #0]
 80082cc:	e0f6      	b.n	80084bc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d121      	bne.n	800831c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	441a      	add	r2, r3
 8008304:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800830c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008318:	b29b      	uxth	r3, r3
 800831a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008322:	2b01      	cmp	r3, #1
 8008324:	f040 80ca 	bne.w	80084bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	695a      	ldr	r2, [r3, #20]
 800832c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008330:	441a      	add	r2, r3
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	69da      	ldr	r2, [r3, #28]
 800833a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800833e:	441a      	add	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	6a1a      	ldr	r2, [r3, #32]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	429a      	cmp	r2, r3
 800834e:	d30b      	bcc.n	8008368 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6a1a      	ldr	r2, [r3, #32]
 800835c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008360:	1ad2      	subs	r2, r2, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	621a      	str	r2, [r3, #32]
 8008366:	e017      	b.n	8008398 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d108      	bne.n	8008382 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8008370:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008374:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008380:	e00a      	b.n	8008398 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	657b      	str	r3, [r7, #84]	; 0x54
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d165      	bne.n	8008472 <HAL_PCD_EP_DB_Transmit+0x750>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	461a      	mov	r2, r3
 80083b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ba:	4413      	add	r3, r2
 80083bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	011a      	lsls	r2, r3, #4
 80083c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c6:	4413      	add	r3, r2
 80083c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80083ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083d8:	b29a      	uxth	r2, r3
 80083da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083e2:	2b3e      	cmp	r3, #62	; 0x3e
 80083e4:	d91d      	bls.n	8008422 <HAL_PCD_EP_DB_Transmit+0x700>
 80083e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80083ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083f2:	f003 031f 	and.w	r3, r3, #31
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <HAL_PCD_EP_DB_Transmit+0x6de>
 80083fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083fc:	3b01      	subs	r3, #1
 80083fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	b29a      	uxth	r2, r3
 8008406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008408:	b29b      	uxth	r3, r3
 800840a:	029b      	lsls	r3, r3, #10
 800840c:	b29b      	uxth	r3, r3
 800840e:	4313      	orrs	r3, r2
 8008410:	b29b      	uxth	r3, r3
 8008412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841a:	b29a      	uxth	r2, r3
 800841c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	e041      	b.n	80084a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8008422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <HAL_PCD_EP_DB_Transmit+0x71e>
 800842a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008438:	b29a      	uxth	r2, r3
 800843a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800843c:	801a      	strh	r2, [r3, #0]
 800843e:	e032      	b.n	80084a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8008440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008444:	085b      	lsrs	r3, r3, #1
 8008446:	66bb      	str	r3, [r7, #104]	; 0x68
 8008448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <HAL_PCD_EP_DB_Transmit+0x738>
 8008454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008456:	3301      	adds	r3, #1
 8008458:	66bb      	str	r3, [r7, #104]	; 0x68
 800845a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29a      	uxth	r2, r3
 8008460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008462:	b29b      	uxth	r3, r3
 8008464:	029b      	lsls	r3, r3, #10
 8008466:	b29b      	uxth	r3, r3
 8008468:	4313      	orrs	r3, r2
 800846a:	b29a      	uxth	r2, r3
 800846c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800846e:	801a      	strh	r2, [r3, #0]
 8008470:	e019      	b.n	80084a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d115      	bne.n	80084a6 <HAL_PCD_EP_DB_Transmit+0x784>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008488:	4413      	add	r3, r2
 800848a:	657b      	str	r3, [r7, #84]	; 0x54
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	011a      	lsls	r2, r3, #4
 8008492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008494:	4413      	add	r3, r2
 8008496:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800849a:	653b      	str	r3, [r7, #80]	; 0x50
 800849c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6959      	ldr	r1, [r3, #20]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	895a      	ldrh	r2, [r3, #10]
 80084b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f003 fc71 	bl	800bd9e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d6:	82bb      	strh	r3, [r7, #20]
 80084d8:	8abb      	ldrh	r3, [r7, #20]
 80084da:	f083 0310 	eor.w	r3, r3, #16
 80084de:	82bb      	strh	r3, [r7, #20]
 80084e0:	8abb      	ldrh	r3, [r7, #20]
 80084e2:	f083 0320 	eor.w	r3, r3, #32
 80084e6:	82bb      	strh	r3, [r7, #20]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	441a      	add	r2, r3
 80084f6:	8abb      	ldrh	r3, [r7, #20]
 80084f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008508:	b29b      	uxth	r3, r3
 800850a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3790      	adds	r7, #144	; 0x90
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008516:	b480      	push	{r7}
 8008518:	b087      	sub	sp, #28
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	817b      	strh	r3, [r7, #10]
 8008524:	4613      	mov	r3, r2
 8008526:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008528:	897b      	ldrh	r3, [r7, #10]
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	b29b      	uxth	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008534:	897b      	ldrh	r3, [r7, #10]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	617b      	str	r3, [r7, #20]
 800854a:	e009      	b.n	8008560 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800854c:	897a      	ldrh	r2, [r7, #10]
 800854e:	4613      	mov	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008560:	893b      	ldrh	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d107      	bne.n	8008576 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2200      	movs	r2, #0
 800856a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	b29a      	uxth	r2, r3
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	80da      	strh	r2, [r3, #6]
 8008574:	e00b      	b.n	800858e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2201      	movs	r2, #1
 800857a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	b29a      	uxth	r2, r3
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	0c1b      	lsrs	r3, r3, #16
 8008588:	b29a      	uxth	r2, r3
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	371c      	adds	r7, #28
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr
	...

0800859c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e272      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 8087 	beq.w	80086ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80085bc:	4b92      	ldr	r3, [pc, #584]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f003 030c 	and.w	r3, r3, #12
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d00c      	beq.n	80085e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80085c8:	4b8f      	ldr	r3, [pc, #572]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f003 030c 	and.w	r3, r3, #12
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d112      	bne.n	80085fa <HAL_RCC_OscConfig+0x5e>
 80085d4:	4b8c      	ldr	r3, [pc, #560]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e0:	d10b      	bne.n	80085fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085e2:	4b89      	ldr	r3, [pc, #548]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d06c      	beq.n	80086c8 <HAL_RCC_OscConfig+0x12c>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d168      	bne.n	80086c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e24c      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008602:	d106      	bne.n	8008612 <HAL_RCC_OscConfig+0x76>
 8008604:	4b80      	ldr	r3, [pc, #512]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a7f      	ldr	r2, [pc, #508]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 800860a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	e02e      	b.n	8008670 <HAL_RCC_OscConfig+0xd4>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10c      	bne.n	8008634 <HAL_RCC_OscConfig+0x98>
 800861a:	4b7b      	ldr	r3, [pc, #492]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a7a      	ldr	r2, [pc, #488]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	4b78      	ldr	r3, [pc, #480]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a77      	ldr	r2, [pc, #476]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 800862c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	e01d      	b.n	8008670 <HAL_RCC_OscConfig+0xd4>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800863c:	d10c      	bne.n	8008658 <HAL_RCC_OscConfig+0xbc>
 800863e:	4b72      	ldr	r3, [pc, #456]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a71      	ldr	r2, [pc, #452]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	4b6f      	ldr	r3, [pc, #444]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a6e      	ldr	r2, [pc, #440]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	e00b      	b.n	8008670 <HAL_RCC_OscConfig+0xd4>
 8008658:	4b6b      	ldr	r3, [pc, #428]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a6a      	ldr	r2, [pc, #424]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 800865e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	4b68      	ldr	r3, [pc, #416]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a67      	ldr	r2, [pc, #412]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 800866a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800866e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d013      	beq.n	80086a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008678:	f7fd fd42 	bl	8006100 <HAL_GetTick>
 800867c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800867e:	e008      	b.n	8008692 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008680:	f7fd fd3e 	bl	8006100 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b64      	cmp	r3, #100	; 0x64
 800868c:	d901      	bls.n	8008692 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e200      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008692:	4b5d      	ldr	r3, [pc, #372]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0f0      	beq.n	8008680 <HAL_RCC_OscConfig+0xe4>
 800869e:	e014      	b.n	80086ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086a0:	f7fd fd2e 	bl	8006100 <HAL_GetTick>
 80086a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086a6:	e008      	b.n	80086ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086a8:	f7fd fd2a 	bl	8006100 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	2b64      	cmp	r3, #100	; 0x64
 80086b4:	d901      	bls.n	80086ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e1ec      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ba:	4b53      	ldr	r3, [pc, #332]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1f0      	bne.n	80086a8 <HAL_RCC_OscConfig+0x10c>
 80086c6:	e000      	b.n	80086ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d063      	beq.n	800879e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80086d6:	4b4c      	ldr	r3, [pc, #304]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f003 030c 	and.w	r3, r3, #12
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00b      	beq.n	80086fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80086e2:	4b49      	ldr	r3, [pc, #292]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f003 030c 	and.w	r3, r3, #12
 80086ea:	2b08      	cmp	r3, #8
 80086ec:	d11c      	bne.n	8008728 <HAL_RCC_OscConfig+0x18c>
 80086ee:	4b46      	ldr	r3, [pc, #280]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d116      	bne.n	8008728 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086fa:	4b43      	ldr	r3, [pc, #268]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <HAL_RCC_OscConfig+0x176>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d001      	beq.n	8008712 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e1c0      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008712:	4b3d      	ldr	r3, [pc, #244]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4939      	ldr	r1, [pc, #228]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008722:	4313      	orrs	r3, r2
 8008724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008726:	e03a      	b.n	800879e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d020      	beq.n	8008772 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008730:	4b36      	ldr	r3, [pc, #216]	; (800880c <HAL_RCC_OscConfig+0x270>)
 8008732:	2201      	movs	r2, #1
 8008734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008736:	f7fd fce3 	bl	8006100 <HAL_GetTick>
 800873a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800873c:	e008      	b.n	8008750 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800873e:	f7fd fcdf 	bl	8006100 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	d901      	bls.n	8008750 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e1a1      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008750:	4b2d      	ldr	r3, [pc, #180]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0f0      	beq.n	800873e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800875c:	4b2a      	ldr	r3, [pc, #168]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	4927      	ldr	r1, [pc, #156]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 800876c:	4313      	orrs	r3, r2
 800876e:	600b      	str	r3, [r1, #0]
 8008770:	e015      	b.n	800879e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008772:	4b26      	ldr	r3, [pc, #152]	; (800880c <HAL_RCC_OscConfig+0x270>)
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008778:	f7fd fcc2 	bl	8006100 <HAL_GetTick>
 800877c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800877e:	e008      	b.n	8008792 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008780:	f7fd fcbe 	bl	8006100 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b02      	cmp	r3, #2
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e180      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008792:	4b1d      	ldr	r3, [pc, #116]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1f0      	bne.n	8008780 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0308 	and.w	r3, r3, #8
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d03a      	beq.n	8008820 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d019      	beq.n	80087e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087b2:	4b17      	ldr	r3, [pc, #92]	; (8008810 <HAL_RCC_OscConfig+0x274>)
 80087b4:	2201      	movs	r2, #1
 80087b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087b8:	f7fd fca2 	bl	8006100 <HAL_GetTick>
 80087bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087be:	e008      	b.n	80087d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087c0:	f7fd fc9e 	bl	8006100 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e160      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087d2:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <HAL_RCC_OscConfig+0x26c>)
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0f0      	beq.n	80087c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80087de:	2001      	movs	r0, #1
 80087e0:	f000 face 	bl	8008d80 <RCC_Delay>
 80087e4:	e01c      	b.n	8008820 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087e6:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <HAL_RCC_OscConfig+0x274>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087ec:	f7fd fc88 	bl	8006100 <HAL_GetTick>
 80087f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087f2:	e00f      	b.n	8008814 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087f4:	f7fd fc84 	bl	8006100 <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d908      	bls.n	8008814 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e146      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
 8008806:	bf00      	nop
 8008808:	40021000 	.word	0x40021000
 800880c:	42420000 	.word	0x42420000
 8008810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008814:	4b92      	ldr	r3, [pc, #584]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e9      	bne.n	80087f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 80a6 	beq.w	800897a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008832:	4b8b      	ldr	r3, [pc, #556]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10d      	bne.n	800885a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800883e:	4b88      	ldr	r3, [pc, #544]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	4a87      	ldr	r2, [pc, #540]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008848:	61d3      	str	r3, [r2, #28]
 800884a:	4b85      	ldr	r3, [pc, #532]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008852:	60bb      	str	r3, [r7, #8]
 8008854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008856:	2301      	movs	r3, #1
 8008858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800885a:	4b82      	ldr	r3, [pc, #520]	; (8008a64 <HAL_RCC_OscConfig+0x4c8>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008862:	2b00      	cmp	r3, #0
 8008864:	d118      	bne.n	8008898 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008866:	4b7f      	ldr	r3, [pc, #508]	; (8008a64 <HAL_RCC_OscConfig+0x4c8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a7e      	ldr	r2, [pc, #504]	; (8008a64 <HAL_RCC_OscConfig+0x4c8>)
 800886c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008872:	f7fd fc45 	bl	8006100 <HAL_GetTick>
 8008876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008878:	e008      	b.n	800888c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800887a:	f7fd fc41 	bl	8006100 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b64      	cmp	r3, #100	; 0x64
 8008886:	d901      	bls.n	800888c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e103      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800888c:	4b75      	ldr	r3, [pc, #468]	; (8008a64 <HAL_RCC_OscConfig+0x4c8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0f0      	beq.n	800887a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d106      	bne.n	80088ae <HAL_RCC_OscConfig+0x312>
 80088a0:	4b6f      	ldr	r3, [pc, #444]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	4a6e      	ldr	r2, [pc, #440]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088a6:	f043 0301 	orr.w	r3, r3, #1
 80088aa:	6213      	str	r3, [r2, #32]
 80088ac:	e02d      	b.n	800890a <HAL_RCC_OscConfig+0x36e>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10c      	bne.n	80088d0 <HAL_RCC_OscConfig+0x334>
 80088b6:	4b6a      	ldr	r3, [pc, #424]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	4a69      	ldr	r2, [pc, #420]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088bc:	f023 0301 	bic.w	r3, r3, #1
 80088c0:	6213      	str	r3, [r2, #32]
 80088c2:	4b67      	ldr	r3, [pc, #412]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	4a66      	ldr	r2, [pc, #408]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088c8:	f023 0304 	bic.w	r3, r3, #4
 80088cc:	6213      	str	r3, [r2, #32]
 80088ce:	e01c      	b.n	800890a <HAL_RCC_OscConfig+0x36e>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	2b05      	cmp	r3, #5
 80088d6:	d10c      	bne.n	80088f2 <HAL_RCC_OscConfig+0x356>
 80088d8:	4b61      	ldr	r3, [pc, #388]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	4a60      	ldr	r2, [pc, #384]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088de:	f043 0304 	orr.w	r3, r3, #4
 80088e2:	6213      	str	r3, [r2, #32]
 80088e4:	4b5e      	ldr	r3, [pc, #376]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	4a5d      	ldr	r2, [pc, #372]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	6213      	str	r3, [r2, #32]
 80088f0:	e00b      	b.n	800890a <HAL_RCC_OscConfig+0x36e>
 80088f2:	4b5b      	ldr	r3, [pc, #364]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	4a5a      	ldr	r2, [pc, #360]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80088f8:	f023 0301 	bic.w	r3, r3, #1
 80088fc:	6213      	str	r3, [r2, #32]
 80088fe:	4b58      	ldr	r3, [pc, #352]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	4a57      	ldr	r2, [pc, #348]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008904:	f023 0304 	bic.w	r3, r3, #4
 8008908:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d015      	beq.n	800893e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008912:	f7fd fbf5 	bl	8006100 <HAL_GetTick>
 8008916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008918:	e00a      	b.n	8008930 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800891a:	f7fd fbf1 	bl	8006100 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	f241 3288 	movw	r2, #5000	; 0x1388
 8008928:	4293      	cmp	r3, r2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e0b1      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008930:	4b4b      	ldr	r3, [pc, #300]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0ee      	beq.n	800891a <HAL_RCC_OscConfig+0x37e>
 800893c:	e014      	b.n	8008968 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800893e:	f7fd fbdf 	bl	8006100 <HAL_GetTick>
 8008942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008944:	e00a      	b.n	800895c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008946:	f7fd fbdb 	bl	8006100 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	f241 3288 	movw	r2, #5000	; 0x1388
 8008954:	4293      	cmp	r3, r2
 8008956:	d901      	bls.n	800895c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e09b      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800895c:	4b40      	ldr	r3, [pc, #256]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1ee      	bne.n	8008946 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d105      	bne.n	800897a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800896e:	4b3c      	ldr	r3, [pc, #240]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	4a3b      	ldr	r2, [pc, #236]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008978:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 8087 	beq.w	8008a92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008984:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f003 030c 	and.w	r3, r3, #12
 800898c:	2b08      	cmp	r3, #8
 800898e:	d061      	beq.n	8008a54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d146      	bne.n	8008a26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008998:	4b33      	ldr	r3, [pc, #204]	; (8008a68 <HAL_RCC_OscConfig+0x4cc>)
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800899e:	f7fd fbaf 	bl	8006100 <HAL_GetTick>
 80089a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089a6:	f7fd fbab 	bl	8006100 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e06d      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089b8:	4b29      	ldr	r3, [pc, #164]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f0      	bne.n	80089a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089cc:	d108      	bne.n	80089e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80089ce:	4b24      	ldr	r3, [pc, #144]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	4921      	ldr	r1, [pc, #132]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089e0:	4b1f      	ldr	r3, [pc, #124]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a19      	ldr	r1, [r3, #32]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	430b      	orrs	r3, r1
 80089f2:	491b      	ldr	r1, [pc, #108]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089f8:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <HAL_RCC_OscConfig+0x4cc>)
 80089fa:	2201      	movs	r2, #1
 80089fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089fe:	f7fd fb7f 	bl	8006100 <HAL_GetTick>
 8008a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008a04:	e008      	b.n	8008a18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a06:	f7fd fb7b 	bl	8006100 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d901      	bls.n	8008a18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e03d      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008a18:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0f0      	beq.n	8008a06 <HAL_RCC_OscConfig+0x46a>
 8008a24:	e035      	b.n	8008a92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a26:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <HAL_RCC_OscConfig+0x4cc>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a2c:	f7fd fb68 	bl	8006100 <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a34:	f7fd fb64 	bl	8006100 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e026      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a46:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <HAL_RCC_OscConfig+0x4c4>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1f0      	bne.n	8008a34 <HAL_RCC_OscConfig+0x498>
 8008a52:	e01e      	b.n	8008a92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e019      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
 8008a60:	40021000 	.word	0x40021000
 8008a64:	40007000 	.word	0x40007000
 8008a68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <HAL_RCC_OscConfig+0x500>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d106      	bne.n	8008a8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d001      	beq.n	8008a92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e000      	b.n	8008a94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	40021000 	.word	0x40021000

08008aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e0d0      	b.n	8008c56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ab4:	4b6a      	ldr	r3, [pc, #424]	; (8008c60 <HAL_RCC_ClockConfig+0x1c0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d910      	bls.n	8008ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac2:	4b67      	ldr	r3, [pc, #412]	; (8008c60 <HAL_RCC_ClockConfig+0x1c0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f023 0207 	bic.w	r2, r3, #7
 8008aca:	4965      	ldr	r1, [pc, #404]	; (8008c60 <HAL_RCC_ClockConfig+0x1c0>)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ad2:	4b63      	ldr	r3, [pc, #396]	; (8008c60 <HAL_RCC_ClockConfig+0x1c0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d001      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e0b8      	b.n	8008c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d020      	beq.n	8008b32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008afc:	4b59      	ldr	r3, [pc, #356]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	4a58      	ldr	r2, [pc, #352]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008b06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b14:	4b53      	ldr	r3, [pc, #332]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	4a52      	ldr	r2, [pc, #328]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008b1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b20:	4b50      	ldr	r3, [pc, #320]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	494d      	ldr	r1, [pc, #308]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d040      	beq.n	8008bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d107      	bne.n	8008b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b46:	4b47      	ldr	r3, [pc, #284]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d115      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e07f      	b.n	8008c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d107      	bne.n	8008b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b5e:	4b41      	ldr	r3, [pc, #260]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e073      	b.n	8008c56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b6e:	4b3d      	ldr	r3, [pc, #244]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e06b      	b.n	8008c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b7e:	4b39      	ldr	r3, [pc, #228]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f023 0203 	bic.w	r2, r3, #3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	4936      	ldr	r1, [pc, #216]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b90:	f7fd fab6 	bl	8006100 <HAL_GetTick>
 8008b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b96:	e00a      	b.n	8008bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b98:	f7fd fab2 	bl	8006100 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e053      	b.n	8008c56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bae:	4b2d      	ldr	r3, [pc, #180]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f003 020c 	and.w	r2, r3, #12
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d1eb      	bne.n	8008b98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008bc0:	4b27      	ldr	r3, [pc, #156]	; (8008c60 <HAL_RCC_ClockConfig+0x1c0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d210      	bcs.n	8008bf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bce:	4b24      	ldr	r3, [pc, #144]	; (8008c60 <HAL_RCC_ClockConfig+0x1c0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f023 0207 	bic.w	r2, r3, #7
 8008bd6:	4922      	ldr	r1, [pc, #136]	; (8008c60 <HAL_RCC_ClockConfig+0x1c0>)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bde:	4b20      	ldr	r3, [pc, #128]	; (8008c60 <HAL_RCC_ClockConfig+0x1c0>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d001      	beq.n	8008bf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e032      	b.n	8008c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d008      	beq.n	8008c0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bfc:	4b19      	ldr	r3, [pc, #100]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	4916      	ldr	r1, [pc, #88]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c1a:	4b12      	ldr	r3, [pc, #72]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	490e      	ldr	r1, [pc, #56]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008c2e:	f000 f821 	bl	8008c74 <HAL_RCC_GetSysClockFreq>
 8008c32:	4602      	mov	r2, r0
 8008c34:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <HAL_RCC_ClockConfig+0x1c4>)
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	091b      	lsrs	r3, r3, #4
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	490a      	ldr	r1, [pc, #40]	; (8008c68 <HAL_RCC_ClockConfig+0x1c8>)
 8008c40:	5ccb      	ldrb	r3, [r1, r3]
 8008c42:	fa22 f303 	lsr.w	r3, r2, r3
 8008c46:	4a09      	ldr	r2, [pc, #36]	; (8008c6c <HAL_RCC_ClockConfig+0x1cc>)
 8008c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008c4a:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <HAL_RCC_ClockConfig+0x1d0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fd fa14 	bl	800607c <HAL_InitTick>

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	40022000 	.word	0x40022000
 8008c64:	40021000 	.word	0x40021000
 8008c68:	0800ec00 	.word	0x0800ec00
 8008c6c:	20000004 	.word	0x20000004
 8008c70:	20000008 	.word	0x20000008

08008c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60bb      	str	r3, [r7, #8]
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]
 8008c86:	2300      	movs	r3, #0
 8008c88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008c8e:	4b1e      	ldr	r3, [pc, #120]	; (8008d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f003 030c 	and.w	r3, r3, #12
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d002      	beq.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x30>
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d003      	beq.n	8008caa <HAL_RCC_GetSysClockFreq+0x36>
 8008ca2:	e027      	b.n	8008cf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008ca4:	4b19      	ldr	r3, [pc, #100]	; (8008d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8008ca6:	613b      	str	r3, [r7, #16]
      break;
 8008ca8:	e027      	b.n	8008cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	0c9b      	lsrs	r3, r3, #18
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	4a17      	ldr	r2, [pc, #92]	; (8008d10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008cb4:	5cd3      	ldrb	r3, [r2, r3]
 8008cb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d010      	beq.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008cc2:	4b11      	ldr	r3, [pc, #68]	; (8008d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	0c5b      	lsrs	r3, r3, #17
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	4a11      	ldr	r2, [pc, #68]	; (8008d14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008cce:	5cd3      	ldrb	r3, [r2, r3]
 8008cd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a0d      	ldr	r2, [pc, #52]	; (8008d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8008cd6:	fb03 f202 	mul.w	r2, r3, r2
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e004      	b.n	8008cee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008ce8:	fb02 f303 	mul.w	r3, r2, r3
 8008cec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	613b      	str	r3, [r7, #16]
      break;
 8008cf2:	e002      	b.n	8008cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8008cf6:	613b      	str	r3, [r7, #16]
      break;
 8008cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cfa:	693b      	ldr	r3, [r7, #16]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40021000 	.word	0x40021000
 8008d0c:	007a1200 	.word	0x007a1200
 8008d10:	0800ec18 	.word	0x0800ec18
 8008d14:	0800ec28 	.word	0x0800ec28
 8008d18:	003d0900 	.word	0x003d0900

08008d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d20:	4b02      	ldr	r3, [pc, #8]	; (8008d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8008d22:	681b      	ldr	r3, [r3, #0]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr
 8008d2c:	20000004 	.word	0x20000004

08008d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d34:	f7ff fff2 	bl	8008d1c <HAL_RCC_GetHCLKFreq>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	0a1b      	lsrs	r3, r3, #8
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	4903      	ldr	r1, [pc, #12]	; (8008d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d46:	5ccb      	ldrb	r3, [r1, r3]
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	40021000 	.word	0x40021000
 8008d54:	0800ec10 	.word	0x0800ec10

08008d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d5c:	f7ff ffde 	bl	8008d1c <HAL_RCC_GetHCLKFreq>
 8008d60:	4602      	mov	r2, r0
 8008d62:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	0adb      	lsrs	r3, r3, #11
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	4903      	ldr	r1, [pc, #12]	; (8008d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d6e:	5ccb      	ldrb	r3, [r1, r3]
 8008d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40021000 	.word	0x40021000
 8008d7c:	0800ec10 	.word	0x0800ec10

08008d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008d88:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <RCC_Delay+0x34>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a0a      	ldr	r2, [pc, #40]	; (8008db8 <RCC_Delay+0x38>)
 8008d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d92:	0a5b      	lsrs	r3, r3, #9
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	fb02 f303 	mul.w	r3, r2, r3
 8008d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008d9c:	bf00      	nop
  }
  while (Delay --);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	1e5a      	subs	r2, r3, #1
 8008da2:	60fa      	str	r2, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1f9      	bne.n	8008d9c <RCC_Delay+0x1c>
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bc80      	pop	{r7}
 8008db2:	4770      	bx	lr
 8008db4:	20000004 	.word	0x20000004
 8008db8:	10624dd3 	.word	0x10624dd3

08008dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d07d      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ddc:	4b4f      	ldr	r3, [pc, #316]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10d      	bne.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008de8:	4b4c      	ldr	r3, [pc, #304]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	4a4b      	ldr	r2, [pc, #300]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008df2:	61d3      	str	r3, [r2, #28]
 8008df4:	4b49      	ldr	r3, [pc, #292]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfc:	60bb      	str	r3, [r7, #8]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e00:	2301      	movs	r3, #1
 8008e02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e04:	4b46      	ldr	r3, [pc, #280]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d118      	bne.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e10:	4b43      	ldr	r3, [pc, #268]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a42      	ldr	r2, [pc, #264]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e1c:	f7fd f970 	bl	8006100 <HAL_GetTick>
 8008e20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e22:	e008      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e24:	f7fd f96c 	bl	8006100 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	2b64      	cmp	r3, #100	; 0x64
 8008e30:	d901      	bls.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e06d      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e36:	4b3a      	ldr	r3, [pc, #232]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0f0      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e42:	4b36      	ldr	r3, [pc, #216]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d02e      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d027      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e60:	4b2e      	ldr	r3, [pc, #184]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e6a:	4b2e      	ldr	r3, [pc, #184]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e70:	4b2c      	ldr	r3, [pc, #176]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008e76:	4a29      	ldr	r2, [pc, #164]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d014      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e86:	f7fd f93b 	bl	8006100 <HAL_GetTick>
 8008e8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e8c:	e00a      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e8e:	f7fd f937 	bl	8006100 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d901      	bls.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e036      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ea4:	4b1d      	ldr	r3, [pc, #116]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	f003 0302 	and.w	r3, r3, #2
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0ee      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008eb0:	4b1a      	ldr	r3, [pc, #104]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
 8008eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	4917      	ldr	r1, [pc, #92]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d105      	bne.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ec8:	4b14      	ldr	r3, [pc, #80]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	4a13      	ldr	r2, [pc, #76]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ed2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d008      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ee0:	4b0e      	ldr	r3, [pc, #56]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	490b      	ldr	r1, [pc, #44]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008efe:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	4904      	ldr	r1, [pc, #16]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3718      	adds	r7, #24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	40021000 	.word	0x40021000
 8008f20:	40007000 	.word	0x40007000
 8008f24:	42420440 	.word	0x42420440

08008f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e042      	b.n	8008fc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7fc ffe2 	bl	8005f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2224      	movs	r2, #36	; 0x24
 8008f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fb81 	bl	8009674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	691a      	ldr	r2, [r3, #16]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	695a      	ldr	r2, [r3, #20]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af02      	add	r7, sp, #8
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d16d      	bne.n	80090c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <HAL_UART_Transmit+0x2c>
 8008fee:	88fb      	ldrh	r3, [r7, #6]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e066      	b.n	80090c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2221      	movs	r2, #33	; 0x21
 8009002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009006:	f7fd f87b 	bl	8006100 <HAL_GetTick>
 800900a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	88fa      	ldrh	r2, [r7, #6]
 8009010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	88fa      	ldrh	r2, [r7, #6]
 8009016:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009020:	d108      	bne.n	8009034 <HAL_UART_Transmit+0x6c>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d104      	bne.n	8009034 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	61bb      	str	r3, [r7, #24]
 8009032:	e003      	b.n	800903c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009038:	2300      	movs	r3, #0
 800903a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800903c:	e02a      	b.n	8009094 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2200      	movs	r2, #0
 8009046:	2180      	movs	r1, #128	; 0x80
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f980 	bl	800934e <UART_WaitOnFlagUntilTimeout>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e036      	b.n	80090c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10b      	bne.n	8009076 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800906c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	3302      	adds	r3, #2
 8009072:	61bb      	str	r3, [r7, #24]
 8009074:	e007      	b.n	8009086 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	781a      	ldrb	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	3301      	adds	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800908a:	b29b      	uxth	r3, r3
 800908c:	3b01      	subs	r3, #1
 800908e:	b29a      	uxth	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1cf      	bne.n	800903e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2200      	movs	r2, #0
 80090a6:	2140      	movs	r1, #64	; 0x40
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f950 	bl	800934e <UART_WaitOnFlagUntilTimeout>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e006      	b.n	80090c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2220      	movs	r2, #32
 80090bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	e000      	b.n	80090c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80090c4:	2302      	movs	r3, #2
  }
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	4613      	mov	r3, r2
 80090da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b20      	cmp	r3, #32
 80090e6:	d112      	bne.n	800910e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <HAL_UART_Receive_DMA+0x26>
 80090ee:	88fb      	ldrh	r3, [r7, #6]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e00b      	b.n	8009110 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	461a      	mov	r2, r3
 8009102:	68b9      	ldr	r1, [r7, #8]
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f991 	bl	800942c <UART_Start_Receive_DMA>
 800910a:	4603      	mov	r3, r0
 800910c:	e000      	b.n	8009110 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800910e:	2302      	movs	r3, #2
  }
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	bc80      	pop	{r7}
 8009128:	4770      	bx	lr

0800912a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009132:	bf00      	nop
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	bc80      	pop	{r7}
 800913a:	4770      	bx	lr

0800913c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	bc80      	pop	{r7}
 8009150:	4770      	bx	lr

08009152 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b09c      	sub	sp, #112	; 0x70
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d172      	bne.n	8009254 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800916e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009170:	2200      	movs	r2, #0
 8009172:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	330c      	adds	r3, #12
 800917a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800918a:	66bb      	str	r3, [r7, #104]	; 0x68
 800918c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	330c      	adds	r3, #12
 8009192:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009194:	65ba      	str	r2, [r7, #88]	; 0x58
 8009196:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800919a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e5      	bne.n	8009174 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3314      	adds	r3, #20
 80091ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	f023 0301 	bic.w	r3, r3, #1
 80091be:	667b      	str	r3, [r7, #100]	; 0x64
 80091c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3314      	adds	r3, #20
 80091c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80091c8:	647a      	str	r2, [r7, #68]	; 0x44
 80091ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e5      	bne.n	80091a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3314      	adds	r3, #20
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	623b      	str	r3, [r7, #32]
   return(result);
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091f2:	663b      	str	r3, [r7, #96]	; 0x60
 80091f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3314      	adds	r3, #20
 80091fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091fc:	633a      	str	r2, [r7, #48]	; 0x30
 80091fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e5      	bne.n	80091dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009212:	2220      	movs	r2, #32
 8009214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800921a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921c:	2b01      	cmp	r3, #1
 800921e:	d119      	bne.n	8009254 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	330c      	adds	r3, #12
 8009226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0310 	bic.w	r3, r3, #16
 8009236:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	330c      	adds	r3, #12
 800923e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009240:	61fa      	str	r2, [r7, #28]
 8009242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009244:	69b9      	ldr	r1, [r7, #24]
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	e841 2300 	strex	r3, r2, [r1]
 800924c:	617b      	str	r3, [r7, #20]
   return(result);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e5      	bne.n	8009220 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009256:	2200      	movs	r2, #0
 8009258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800925c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925e:	2b01      	cmp	r3, #1
 8009260:	d106      	bne.n	8009270 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009266:	4619      	mov	r1, r3
 8009268:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800926a:	f7ff ff67 	bl	800913c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800926e:	e002      	b.n	8009276 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009270:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009272:	f7fc f82f 	bl	80052d4 <HAL_UART_RxCpltCallback>
}
 8009276:	bf00      	nop
 8009278:	3770      	adds	r7, #112	; 0x70
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009296:	2b01      	cmp	r3, #1
 8009298:	d108      	bne.n	80092ac <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800929e:	085b      	lsrs	r3, r3, #1
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	4619      	mov	r1, r3
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7ff ff49 	bl	800913c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092aa:	e002      	b.n	80092b2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7ff ff33 	bl	8009118 <HAL_UART_RxHalfCpltCallback>
}
 80092b2:	bf00      	nop
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bf14      	ite	ne
 80092da:	2301      	movne	r3, #1
 80092dc:	2300      	moveq	r3, #0
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b21      	cmp	r3, #33	; 0x21
 80092ec:	d108      	bne.n	8009300 <UART_DMAError+0x46>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d005      	beq.n	8009300 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2200      	movs	r2, #0
 80092f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80092fa:	68b8      	ldr	r0, [r7, #8]
 80092fc:	f000 f930 	bl	8009560 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930a:	2b00      	cmp	r3, #0
 800930c:	bf14      	ite	ne
 800930e:	2301      	movne	r3, #1
 8009310:	2300      	moveq	r3, #0
 8009312:	b2db      	uxtb	r3, r3
 8009314:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b22      	cmp	r3, #34	; 0x22
 8009320:	d108      	bne.n	8009334 <UART_DMAError+0x7a>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d005      	beq.n	8009334 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	2200      	movs	r2, #0
 800932c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800932e:	68b8      	ldr	r0, [r7, #8]
 8009330:	f000 f93d 	bl	80095ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009338:	f043 0210 	orr.w	r2, r3, #16
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009340:	68b8      	ldr	r0, [r7, #8]
 8009342:	f7ff fef2 	bl	800912a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b090      	sub	sp, #64	; 0x40
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	603b      	str	r3, [r7, #0]
 800935a:	4613      	mov	r3, r2
 800935c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800935e:	e050      	b.n	8009402 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009366:	d04c      	beq.n	8009402 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <UART_WaitOnFlagUntilTimeout+0x30>
 800936e:	f7fc fec7 	bl	8006100 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800937a:	429a      	cmp	r2, r3
 800937c:	d241      	bcs.n	8009402 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	330c      	adds	r3, #12
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	e853 3f00 	ldrex	r3, [r3]
 800938c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	330c      	adds	r3, #12
 800939c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800939e:	637a      	str	r2, [r7, #52]	; 0x34
 80093a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e5      	bne.n	800937e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3314      	adds	r3, #20
 80093b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	613b      	str	r3, [r7, #16]
   return(result);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f023 0301 	bic.w	r3, r3, #1
 80093c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3314      	adds	r3, #20
 80093d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093d2:	623a      	str	r2, [r7, #32]
 80093d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	69f9      	ldr	r1, [r7, #28]
 80093d8:	6a3a      	ldr	r2, [r7, #32]
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	61bb      	str	r3, [r7, #24]
   return(result);
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e5      	bne.n	80093b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2220      	movs	r2, #32
 80093ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2220      	movs	r2, #32
 80093f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e00f      	b.n	8009422 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4013      	ands	r3, r2
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	429a      	cmp	r2, r3
 8009410:	bf0c      	ite	eq
 8009412:	2301      	moveq	r3, #1
 8009414:	2300      	movne	r3, #0
 8009416:	b2db      	uxtb	r3, r3
 8009418:	461a      	mov	r2, r3
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	429a      	cmp	r2, r3
 800941e:	d09f      	beq.n	8009360 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3740      	adds	r7, #64	; 0x40
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b098      	sub	sp, #96	; 0x60
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	88fa      	ldrh	r2, [r7, #6]
 8009444:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2222      	movs	r2, #34	; 0x22
 8009450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009458:	4a3e      	ldr	r2, [pc, #248]	; (8009554 <UART_Start_Receive_DMA+0x128>)
 800945a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009460:	4a3d      	ldr	r2, [pc, #244]	; (8009558 <UART_Start_Receive_DMA+0x12c>)
 8009462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009468:	4a3c      	ldr	r2, [pc, #240]	; (800955c <UART_Start_Receive_DMA+0x130>)
 800946a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009470:	2200      	movs	r2, #0
 8009472:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009474:	f107 0308 	add.w	r3, r7, #8
 8009478:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3304      	adds	r3, #4
 8009484:	4619      	mov	r1, r3
 8009486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	f7fc ffce 	bl	800642c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009490:	2300      	movs	r3, #0
 8009492:	613b      	str	r3, [r7, #16]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	613b      	str	r3, [r7, #16]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	613b      	str	r3, [r7, #16]
 80094a4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d019      	beq.n	80094e2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	330c      	adds	r3, #12
 80094b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	330c      	adds	r3, #12
 80094cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80094d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80094d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80094dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e5      	bne.n	80094ae <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3314      	adds	r3, #20
 80094e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	f043 0301 	orr.w	r3, r3, #1
 80094f8:	657b      	str	r3, [r7, #84]	; 0x54
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3314      	adds	r3, #20
 8009500:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009502:	63ba      	str	r2, [r7, #56]	; 0x38
 8009504:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e5      	bne.n	80094e2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3314      	adds	r3, #20
 800951c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	617b      	str	r3, [r7, #20]
   return(result);
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800952c:	653b      	str	r3, [r7, #80]	; 0x50
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3314      	adds	r3, #20
 8009534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009536:	627a      	str	r2, [r7, #36]	; 0x24
 8009538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953a:	6a39      	ldr	r1, [r7, #32]
 800953c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	61fb      	str	r3, [r7, #28]
   return(result);
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e5      	bne.n	8009516 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3760      	adds	r7, #96	; 0x60
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	08009153 	.word	0x08009153
 8009558:	0800927f 	.word	0x0800927f
 800955c:	080092bb 	.word	0x080092bb

08009560 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009560:	b480      	push	{r7}
 8009562:	b089      	sub	sp, #36	; 0x24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	330c      	adds	r3, #12
 800956e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	60bb      	str	r3, [r7, #8]
   return(result);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800957e:	61fb      	str	r3, [r7, #28]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	330c      	adds	r3, #12
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	61ba      	str	r2, [r7, #24]
 800958a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6979      	ldr	r1, [r7, #20]
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	613b      	str	r3, [r7, #16]
   return(result);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e5      	bne.n	8009568 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80095a4:	bf00      	nop
 80095a6:	3724      	adds	r7, #36	; 0x24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr

080095ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b095      	sub	sp, #84	; 0x54
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	330c      	adds	r3, #12
 80095bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	330c      	adds	r3, #12
 80095d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095d6:	643a      	str	r2, [r7, #64]	; 0x40
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e5      	bne.n	80095b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3314      	adds	r3, #20
 80095f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	f023 0301 	bic.w	r3, r3, #1
 8009600:	64bb      	str	r3, [r7, #72]	; 0x48
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3314      	adds	r3, #20
 8009608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800960a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800960c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e5      	bne.n	80095ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009622:	2b01      	cmp	r3, #1
 8009624:	d119      	bne.n	800965a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	330c      	adds	r3, #12
 800962c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	60bb      	str	r3, [r7, #8]
   return(result);
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f023 0310 	bic.w	r3, r3, #16
 800963c:	647b      	str	r3, [r7, #68]	; 0x44
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	330c      	adds	r3, #12
 8009644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009646:	61ba      	str	r2, [r7, #24]
 8009648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6979      	ldr	r1, [r7, #20]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	613b      	str	r3, [r7, #16]
   return(result);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e5      	bne.n	8009626 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2220      	movs	r2, #32
 800965e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009668:	bf00      	nop
 800966a:	3754      	adds	r7, #84	; 0x54
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr
	...

08009674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	431a      	orrs	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80096ae:	f023 030c 	bic.w	r3, r3, #12
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	68b9      	ldr	r1, [r7, #8]
 80096b8:	430b      	orrs	r3, r1
 80096ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699a      	ldr	r2, [r3, #24]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a2c      	ldr	r2, [pc, #176]	; (8009788 <UART_SetConfig+0x114>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d103      	bne.n	80096e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80096dc:	f7ff fb3c 	bl	8008d58 <HAL_RCC_GetPCLK2Freq>
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	e002      	b.n	80096ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80096e4:	f7ff fb24 	bl	8008d30 <HAL_RCC_GetPCLK1Freq>
 80096e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009a      	lsls	r2, r3, #2
 80096f4:	441a      	add	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009700:	4a22      	ldr	r2, [pc, #136]	; (800978c <UART_SetConfig+0x118>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	0119      	lsls	r1, r3, #4
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4613      	mov	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	009a      	lsls	r2, r3, #2
 8009714:	441a      	add	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009720:	4b1a      	ldr	r3, [pc, #104]	; (800978c <UART_SetConfig+0x118>)
 8009722:	fba3 0302 	umull	r0, r3, r3, r2
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	2064      	movs	r0, #100	; 0x64
 800972a:	fb00 f303 	mul.w	r3, r0, r3
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	011b      	lsls	r3, r3, #4
 8009732:	3332      	adds	r3, #50	; 0x32
 8009734:	4a15      	ldr	r2, [pc, #84]	; (800978c <UART_SetConfig+0x118>)
 8009736:	fba2 2303 	umull	r2, r3, r2, r3
 800973a:	095b      	lsrs	r3, r3, #5
 800973c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009740:	4419      	add	r1, r3
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009a      	lsls	r2, r3, #2
 800974c:	441a      	add	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	fbb2 f2f3 	udiv	r2, r2, r3
 8009758:	4b0c      	ldr	r3, [pc, #48]	; (800978c <UART_SetConfig+0x118>)
 800975a:	fba3 0302 	umull	r0, r3, r3, r2
 800975e:	095b      	lsrs	r3, r3, #5
 8009760:	2064      	movs	r0, #100	; 0x64
 8009762:	fb00 f303 	mul.w	r3, r0, r3
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	011b      	lsls	r3, r3, #4
 800976a:	3332      	adds	r3, #50	; 0x32
 800976c:	4a07      	ldr	r2, [pc, #28]	; (800978c <UART_SetConfig+0x118>)
 800976e:	fba2 2303 	umull	r2, r3, r2, r3
 8009772:	095b      	lsrs	r3, r3, #5
 8009774:	f003 020f 	and.w	r2, r3, #15
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	440a      	add	r2, r1
 800977e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009780:	bf00      	nop
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	40013800 	.word	0x40013800
 800978c:	51eb851f 	.word	0x51eb851f

08009790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009790:	b084      	sub	sp, #16
 8009792:	b480      	push	{r7}
 8009794:	b083      	sub	sp, #12
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	f107 0014 	add.w	r0, r7, #20
 800979e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bc80      	pop	{r7}
 80097ac:	b004      	add	sp, #16
 80097ae:	4770      	bx	lr

080097b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80097c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80097c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bc80      	pop	{r7}
 80097da:	4770      	bx	lr

080097dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80097e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80097e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	43db      	mvns	r3, r3
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	4013      	ands	r3, r2
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	bc80      	pop	{r7}
 800980e:	4770      	bx	lr

08009810 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	bc80      	pop	{r7}
 8009826:	4770      	bx	lr

08009828 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009828:	b084      	sub	sp, #16
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	f107 0014 	add.w	r0, r7, #20
 8009836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	bc80      	pop	{r7}
 8009864:	b004      	add	sp, #16
 8009866:	4770      	bx	lr

08009868 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009868:	b480      	push	{r7}
 800986a:	b09d      	sub	sp, #116	; 0x74
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800988a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	78db      	ldrb	r3, [r3, #3]
 8009896:	2b03      	cmp	r3, #3
 8009898:	d81f      	bhi.n	80098da <USB_ActivateEndpoint+0x72>
 800989a:	a201      	add	r2, pc, #4	; (adr r2, 80098a0 <USB_ActivateEndpoint+0x38>)
 800989c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a0:	080098b1 	.word	0x080098b1
 80098a4:	080098cd 	.word	0x080098cd
 80098a8:	080098e3 	.word	0x080098e3
 80098ac:	080098bf 	.word	0x080098bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80098b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80098bc:	e012      	b.n	80098e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80098be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80098c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80098ca:	e00b      	b.n	80098e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80098cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80098d8:	e004      	b.n	80098e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80098e0:	e000      	b.n	80098e4 <USB_ActivateEndpoint+0x7c>
      break;
 80098e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	441a      	add	r2, r3
 80098ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009902:	b29b      	uxth	r3, r3
 8009904:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991c:	b29a      	uxth	r2, r3
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	b29b      	uxth	r3, r3
 8009924:	4313      	orrs	r3, r2
 8009926:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	441a      	add	r2, r3
 8009934:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800993c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009948:	b29b      	uxth	r3, r3
 800994a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	7b1b      	ldrb	r3, [r3, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	f040 8178 	bne.w	8009c46 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 8084 	beq.w	8009a68 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	61bb      	str	r3, [r7, #24]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800996a:	b29b      	uxth	r3, r3
 800996c:	461a      	mov	r2, r3
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	4413      	add	r3, r2
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	011a      	lsls	r2, r3, #4
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009982:	617b      	str	r3, [r7, #20]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	88db      	ldrh	r3, [r3, #6]
 8009988:	085b      	lsrs	r3, r3, #1
 800998a:	b29b      	uxth	r3, r3
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	b29a      	uxth	r2, r3
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	4413      	add	r3, r2
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	827b      	strh	r3, [r7, #18]
 80099a2:	8a7b      	ldrh	r3, [r7, #18]
 80099a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01b      	beq.n	80099e4 <USB_ActivateEndpoint+0x17c>
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c2:	823b      	strh	r3, [r7, #16]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	441a      	add	r2, r3
 80099ce:	8a3b      	ldrh	r3, [r7, #16]
 80099d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	78db      	ldrb	r3, [r3, #3]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d020      	beq.n	8009a2e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a02:	81bb      	strh	r3, [r7, #12]
 8009a04:	89bb      	ldrh	r3, [r7, #12]
 8009a06:	f083 0320 	eor.w	r3, r3, #32
 8009a0a:	81bb      	strh	r3, [r7, #12]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	441a      	add	r2, r3
 8009a16:	89bb      	ldrh	r3, [r7, #12]
 8009a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	8013      	strh	r3, [r2, #0]
 8009a2c:	e2d5      	b.n	8009fda <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a44:	81fb      	strh	r3, [r7, #14]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	441a      	add	r2, r3
 8009a50:	89fb      	ldrh	r3, [r7, #14]
 8009a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	8013      	strh	r3, [r2, #0]
 8009a66:	e2b8      	b.n	8009fda <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	461a      	mov	r2, r3
 8009a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a78:	4413      	add	r3, r2
 8009a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	011a      	lsls	r2, r3, #4
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	88db      	ldrh	r3, [r3, #6]
 8009a90:	085b      	lsrs	r3, r3, #1
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aac:	4413      	add	r3, r2
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	011a      	lsls	r2, r3, #4
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	4413      	add	r3, r2
 8009aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	801a      	strh	r2, [r3, #0]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ad6:	d91d      	bls.n	8009b14 <USB_ActivateEndpoint+0x2ac>
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	095b      	lsrs	r3, r3, #5
 8009ade:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	f003 031f 	and.w	r3, r3, #31
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <USB_ActivateEndpoint+0x28a>
 8009aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aee:	3b01      	subs	r3, #1
 8009af0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	029b      	lsls	r3, r3, #10
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	4313      	orrs	r3, r2
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	801a      	strh	r2, [r3, #0]
 8009b12:	e026      	b.n	8009b62 <USB_ActivateEndpoint+0x2fa>
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <USB_ActivateEndpoint+0x2ca>
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	801a      	strh	r2, [r3, #0]
 8009b30:	e017      	b.n	8009b62 <USB_ActivateEndpoint+0x2fa>
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	085b      	lsrs	r3, r3, #1
 8009b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <USB_ActivateEndpoint+0x2e4>
 8009b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b48:	3301      	adds	r3, #1
 8009b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	029b      	lsls	r3, r3, #10
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009b70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d01b      	beq.n	8009bb2 <USB_ActivateEndpoint+0x34a>
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4413      	add	r3, r2
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b90:	843b      	strh	r3, [r7, #32]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	441a      	add	r2, r3
 8009b9c:	8c3b      	ldrh	r3, [r7, #32]
 8009b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d124      	bne.n	8009c04 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd0:	83bb      	strh	r3, [r7, #28]
 8009bd2:	8bbb      	ldrh	r3, [r7, #28]
 8009bd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bd8:	83bb      	strh	r3, [r7, #28]
 8009bda:	8bbb      	ldrh	r3, [r7, #28]
 8009bdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009be0:	83bb      	strh	r3, [r7, #28]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	441a      	add	r2, r3
 8009bec:	8bbb      	ldrh	r3, [r7, #28]
 8009bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	8013      	strh	r3, [r2, #0]
 8009c02:	e1ea      	b.n	8009fda <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1a:	83fb      	strh	r3, [r7, #30]
 8009c1c:	8bfb      	ldrh	r3, [r7, #30]
 8009c1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c22:	83fb      	strh	r3, [r7, #30]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	441a      	add	r2, r3
 8009c2e:	8bfb      	ldrh	r3, [r7, #30]
 8009c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	8013      	strh	r3, [r2, #0]
 8009c44:	e1c9      	b.n	8009fda <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	78db      	ldrb	r3, [r3, #3]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d11e      	bne.n	8009c8c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c64:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	441a      	add	r2, r3
 8009c72:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c7e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	8013      	strh	r3, [r2, #0]
 8009c8a:	e01d      	b.n	8009cc8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	441a      	add	r2, r3
 8009cb0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cd8:	4413      	add	r3, r2
 8009cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	011a      	lsls	r2, r3, #4
 8009ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cea:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	891b      	ldrh	r3, [r3, #8]
 8009cf0:	085b      	lsrs	r3, r3, #1
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cfa:	801a      	strh	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d0c:	4413      	add	r3, r2
 8009d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	011a      	lsls	r2, r3, #4
 8009d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	895b      	ldrh	r3, [r3, #10]
 8009d24:	085b      	lsrs	r3, r3, #1
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	785b      	ldrb	r3, [r3, #1]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f040 8093 	bne.w	8009e60 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009d4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d01b      	beq.n	8009d8e <USB_ActivateEndpoint+0x526>
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	441a      	add	r2, r3
 8009d78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	881b      	ldrh	r3, [r3, #0]
 8009d9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009d9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01b      	beq.n	8009dde <USB_ActivateEndpoint+0x576>
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	441a      	add	r2, r3
 8009dc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df4:	873b      	strh	r3, [r7, #56]	; 0x38
 8009df6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009df8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009dfc:	873b      	strh	r3, [r7, #56]	; 0x38
 8009dfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e04:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	441a      	add	r2, r3
 8009e10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	441a      	add	r2, r3
 8009e48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	8013      	strh	r3, [r2, #0]
 8009e5e:	e0bc      	b.n	8009fda <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d01d      	beq.n	8009eb8 <USB_ActivateEndpoint+0x650>
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	441a      	add	r2, r3
 8009ea0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009ec8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01d      	beq.n	8009f10 <USB_ActivateEndpoint+0x6a8>
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	441a      	add	r2, r3
 8009ef8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	78db      	ldrb	r3, [r3, #3]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d024      	beq.n	8009f62 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f36:	f083 0320 	eor.w	r3, r3, #32
 8009f3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	441a      	add	r2, r3
 8009f48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	8013      	strh	r3, [r2, #0]
 8009f60:	e01d      	b.n	8009f9e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	441a      	add	r2, r3
 8009f86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	441a      	add	r2, r3
 8009fc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009fda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3774      	adds	r7, #116	; 0x74
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bc80      	pop	{r7}
 8009fe6:	4770      	bx	lr

08009fe8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b08d      	sub	sp, #52	; 0x34
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	7b1b      	ldrb	r3, [r3, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f040 808e 	bne.w	800a118 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	785b      	ldrb	r3, [r3, #1]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d044      	beq.n	800a08e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	81bb      	strh	r3, [r7, #12]
 800a012:	89bb      	ldrh	r3, [r7, #12]
 800a014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01b      	beq.n	800a054 <USB_DeactivateEndpoint+0x6c>
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a032:	817b      	strh	r3, [r7, #10]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	441a      	add	r2, r3
 800a03e:	897b      	ldrh	r3, [r7, #10]
 800a040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a04c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a050:	b29b      	uxth	r3, r3
 800a052:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	881b      	ldrh	r3, [r3, #0]
 800a060:	b29b      	uxth	r3, r3
 800a062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a06a:	813b      	strh	r3, [r7, #8]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	441a      	add	r2, r3
 800a076:	893b      	ldrh	r3, [r7, #8]
 800a078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a088:	b29b      	uxth	r3, r3
 800a08a:	8013      	strh	r3, [r2, #0]
 800a08c:	e192      	b.n	800a3b4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	827b      	strh	r3, [r7, #18]
 800a09c:	8a7b      	ldrh	r3, [r7, #18]
 800a09e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d01b      	beq.n	800a0de <USB_DeactivateEndpoint+0xf6>
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0bc:	823b      	strh	r3, [r7, #16]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	441a      	add	r2, r3
 800a0c8:	8a3b      	ldrh	r3, [r7, #16]
 800a0ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0f4:	81fb      	strh	r3, [r7, #14]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	441a      	add	r2, r3
 800a100:	89fb      	ldrh	r3, [r7, #14]
 800a102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a10a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a112:	b29b      	uxth	r3, r3
 800a114:	8013      	strh	r3, [r2, #0]
 800a116:	e14d      	b.n	800a3b4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f040 80a5 	bne.w	800a26c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	843b      	strh	r3, [r7, #32]
 800a130:	8c3b      	ldrh	r3, [r7, #32]
 800a132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01b      	beq.n	800a172 <USB_DeactivateEndpoint+0x18a>
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	b29b      	uxth	r3, r3
 800a148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a14c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a150:	83fb      	strh	r3, [r7, #30]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	441a      	add	r2, r3
 800a15c:	8bfb      	ldrh	r3, [r7, #30]
 800a15e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a16a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16e:	b29b      	uxth	r3, r3
 800a170:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	83bb      	strh	r3, [r7, #28]
 800a180:	8bbb      	ldrh	r3, [r7, #28]
 800a182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01b      	beq.n	800a1c2 <USB_DeactivateEndpoint+0x1da>
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	b29b      	uxth	r3, r3
 800a198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a19c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a0:	837b      	strh	r3, [r7, #26]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	441a      	add	r2, r3
 800a1ac:	8b7b      	ldrh	r3, [r7, #26]
 800a1ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d8:	833b      	strh	r3, [r7, #24]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	441a      	add	r2, r3
 800a1e4:	8b3b      	ldrh	r3, [r7, #24]
 800a1e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	b29b      	uxth	r3, r3
 800a208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a20c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a210:	82fb      	strh	r3, [r7, #22]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	441a      	add	r2, r3
 800a21c:	8afb      	ldrh	r3, [r7, #22]
 800a21e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22e:	b29b      	uxth	r3, r3
 800a230:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	b29b      	uxth	r3, r3
 800a240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a248:	82bb      	strh	r3, [r7, #20]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	441a      	add	r2, r3
 800a254:	8abb      	ldrh	r3, [r7, #20]
 800a256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a25a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a25e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a266:	b29b      	uxth	r3, r3
 800a268:	8013      	strh	r3, [r2, #0]
 800a26a:	e0a3      	b.n	800a3b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	881b      	ldrh	r3, [r3, #0]
 800a278:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a27a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a27c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01b      	beq.n	800a2bc <USB_DeactivateEndpoint+0x2d4>
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	881b      	ldrh	r3, [r3, #0]
 800a290:	b29b      	uxth	r3, r3
 800a292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	441a      	add	r2, r3
 800a2a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a2ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d01b      	beq.n	800a30c <USB_DeactivateEndpoint+0x324>
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ea:	853b      	strh	r3, [r7, #40]	; 0x28
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	441a      	add	r2, r3
 800a2f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a304:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a308:	b29b      	uxth	r3, r3
 800a30a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a322:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	441a      	add	r2, r3
 800a32e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a340:	b29b      	uxth	r3, r3
 800a342:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	b29b      	uxth	r3, r3
 800a352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a35a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	441a      	add	r2, r3
 800a366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a36c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a378:	b29b      	uxth	r3, r3
 800a37a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a392:	847b      	strh	r3, [r7, #34]	; 0x22
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	441a      	add	r2, r3
 800a39e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3734      	adds	r7, #52	; 0x34
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bc80      	pop	{r7}
 800a3be:	4770      	bx	lr

0800a3c0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b0c2      	sub	sp, #264	; 0x108
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3ce:	6018      	str	r0, [r3, #0]
 800a3d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3d8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	785b      	ldrb	r3, [r3, #1]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	f040 86b7 	bne.w	800b15a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	699a      	ldr	r2, [r3, #24]
 800a3f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	429a      	cmp	r2, r3
 800a406:	d908      	bls.n	800a41a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a418:	e007      	b.n	800a42a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a41e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a42e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	7b1b      	ldrb	r3, [r3, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d13a      	bne.n	800a4b0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6959      	ldr	r1, [r3, #20]
 800a446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	88da      	ldrh	r2, [r3, #6]
 800a452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a456:	b29b      	uxth	r3, r3
 800a458:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a45c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a460:	6800      	ldr	r0, [r0, #0]
 800a462:	f001 fc9c 	bl	800bd9e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	613b      	str	r3, [r7, #16]
 800a472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a480:	b29b      	uxth	r3, r3
 800a482:	461a      	mov	r2, r3
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	4413      	add	r3, r2
 800a488:	613b      	str	r3, [r7, #16]
 800a48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	011a      	lsls	r2, r3, #4
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	4413      	add	r3, r2
 800a49c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	801a      	strh	r2, [r3, #0]
 800a4ac:	f000 be1f 	b.w	800b0ee <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	78db      	ldrb	r3, [r3, #3]
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	f040 8462 	bne.w	800ad86 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6a1a      	ldr	r2, [r3, #32]
 800a4ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	f240 83df 	bls.w	800ac9e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a506:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	441a      	add	r2, r3
 800a524:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a52c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a530:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a538:	b29b      	uxth	r3, r3
 800a53a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6a1a      	ldr	r2, [r3, #32]
 800a548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a54c:	1ad2      	subs	r2, r2, r3
 800a54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	881b      	ldrh	r3, [r3, #0]
 800a576:	b29b      	uxth	r3, r3
 800a578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 81c7 	beq.w	800a910 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	633b      	str	r3, [r7, #48]	; 0x30
 800a58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	785b      	ldrb	r3, [r3, #1]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d177      	bne.n	800a68e <USB_EPStartXfer+0x2ce>
 800a59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	4413      	add	r3, r2
 800a5c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	011a      	lsls	r2, r3, #4
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a5d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	881b      	ldrh	r3, [r3, #0]
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e8:	801a      	strh	r2, [r3, #0]
 800a5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ee:	2b3e      	cmp	r3, #62	; 0x3e
 800a5f0:	d921      	bls.n	800a636 <USB_EPStartXfer+0x276>
 800a5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f6:	095b      	lsrs	r3, r3, #5
 800a5f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a600:	f003 031f 	and.w	r3, r3, #31
 800a604:	2b00      	cmp	r3, #0
 800a606:	d104      	bne.n	800a612 <USB_EPStartXfer+0x252>
 800a608:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a60c:	3b01      	subs	r3, #1
 800a60e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	b29a      	uxth	r2, r3
 800a618:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	029b      	lsls	r3, r3, #10
 800a620:	b29b      	uxth	r3, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	b29b      	uxth	r3, r3
 800a626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a62a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a62e:	b29a      	uxth	r2, r3
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	801a      	strh	r2, [r3, #0]
 800a634:	e050      	b.n	800a6d8 <USB_EPStartXfer+0x318>
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10a      	bne.n	800a654 <USB_EPStartXfer+0x294>
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	b29b      	uxth	r3, r3
 800a644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	801a      	strh	r2, [r3, #0]
 800a652:	e041      	b.n	800a6d8 <USB_EPStartXfer+0x318>
 800a654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a658:	085b      	lsrs	r3, r3, #1
 800a65a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <USB_EPStartXfer+0x2b4>
 800a66a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a66e:	3301      	adds	r3, #1
 800a670:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	881b      	ldrh	r3, [r3, #0]
 800a678:	b29a      	uxth	r2, r3
 800a67a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a67e:	b29b      	uxth	r3, r3
 800a680:	029b      	lsls	r3, r3, #10
 800a682:	b29b      	uxth	r3, r3
 800a684:	4313      	orrs	r3, r2
 800a686:	b29a      	uxth	r2, r3
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	801a      	strh	r2, [r3, #0]
 800a68c:	e024      	b.n	800a6d8 <USB_EPStartXfer+0x318>
 800a68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d11c      	bne.n	800a6d8 <USB_EPStartXfer+0x318>
 800a69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	4413      	add	r3, r2
 800a6b4:	633b      	str	r3, [r7, #48]	; 0x30
 800a6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	011a      	lsls	r2, r3, #4
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	895b      	ldrh	r3, [r3, #10]
 800a6e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6959      	ldr	r1, [r3, #20]
 800a6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a6fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a702:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a706:	6800      	ldr	r0, [r0, #0]
 800a708:	f001 fb49 	bl	800bd9e <USB_WritePMA>
            ep->xfer_buff += len;
 800a70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	695a      	ldr	r2, [r3, #20]
 800a718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a71c:	441a      	add	r2, r3
 800a71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a72e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6a1a      	ldr	r2, [r3, #32]
 800a736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	429a      	cmp	r2, r3
 800a744:	d90f      	bls.n	800a766 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a74a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6a1a      	ldr	r2, [r3, #32]
 800a752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a756:	1ad2      	subs	r2, r2, r3
 800a758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	621a      	str	r2, [r3, #32]
 800a764:	e00e      	b.n	800a784 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2200      	movs	r2, #0
 800a782:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d177      	bne.n	800a884 <USB_EPStartXfer+0x4c4>
 800a794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	61bb      	str	r3, [r7, #24]
 800a7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	61bb      	str	r3, [r7, #24]
 800a7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	011a      	lsls	r2, r3, #4
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	881b      	ldrh	r3, [r3, #0]
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	801a      	strh	r2, [r3, #0]
 800a7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e4:	2b3e      	cmp	r3, #62	; 0x3e
 800a7e6:	d921      	bls.n	800a82c <USB_EPStartXfer+0x46c>
 800a7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ec:	095b      	lsrs	r3, r3, #5
 800a7ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f6:	f003 031f 	and.w	r3, r3, #31
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <USB_EPStartXfer+0x448>
 800a7fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a802:	3b01      	subs	r3, #1
 800a804:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a812:	b29b      	uxth	r3, r3
 800a814:	029b      	lsls	r3, r3, #10
 800a816:	b29b      	uxth	r3, r3
 800a818:	4313      	orrs	r3, r2
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a824:	b29a      	uxth	r2, r3
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	801a      	strh	r2, [r3, #0]
 800a82a:	e056      	b.n	800a8da <USB_EPStartXfer+0x51a>
 800a82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10a      	bne.n	800a84a <USB_EPStartXfer+0x48a>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	881b      	ldrh	r3, [r3, #0]
 800a838:	b29b      	uxth	r3, r3
 800a83a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a83e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a842:	b29a      	uxth	r2, r3
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	801a      	strh	r2, [r3, #0]
 800a848:	e047      	b.n	800a8da <USB_EPStartXfer+0x51a>
 800a84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84e:	085b      	lsrs	r3, r3, #1
 800a850:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a858:	f003 0301 	and.w	r3, r3, #1
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d004      	beq.n	800a86a <USB_EPStartXfer+0x4aa>
 800a860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a864:	3301      	adds	r3, #1
 800a866:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	b29a      	uxth	r2, r3
 800a870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a874:	b29b      	uxth	r3, r3
 800a876:	029b      	lsls	r3, r3, #10
 800a878:	b29b      	uxth	r3, r3
 800a87a:	4313      	orrs	r3, r2
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	801a      	strh	r2, [r3, #0]
 800a882:	e02a      	b.n	800a8da <USB_EPStartXfer+0x51a>
 800a884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	785b      	ldrb	r3, [r3, #1]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d122      	bne.n	800a8da <USB_EPStartXfer+0x51a>
 800a894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	623b      	str	r3, [r7, #32]
 800a8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	623b      	str	r3, [r7, #32]
 800a8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	011a      	lsls	r2, r3, #4
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8ce:	61fb      	str	r3, [r7, #28]
 800a8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	891b      	ldrh	r3, [r3, #8]
 800a8e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6959      	ldr	r1, [r3, #20]
 800a8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a900:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a904:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a908:	6800      	ldr	r0, [r0, #0]
 800a90a:	f001 fa48 	bl	800bd9e <USB_WritePMA>
 800a90e:	e3ee      	b.n	800b0ee <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	785b      	ldrb	r3, [r3, #1]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d177      	bne.n	800aa10 <USB_EPStartXfer+0x650>
 800a920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a92c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	461a      	mov	r2, r3
 800a93e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a940:	4413      	add	r3, r2
 800a942:	64bb      	str	r3, [r7, #72]	; 0x48
 800a944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	011a      	lsls	r2, r3, #4
 800a952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a954:	4413      	add	r3, r2
 800a956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a95a:	647b      	str	r3, [r7, #68]	; 0x44
 800a95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	b29b      	uxth	r3, r3
 800a962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a966:	b29a      	uxth	r2, r3
 800a968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a96a:	801a      	strh	r2, [r3, #0]
 800a96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a970:	2b3e      	cmp	r3, #62	; 0x3e
 800a972:	d921      	bls.n	800a9b8 <USB_EPStartXfer+0x5f8>
 800a974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a978:	095b      	lsrs	r3, r3, #5
 800a97a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a982:	f003 031f 	and.w	r3, r3, #31
 800a986:	2b00      	cmp	r3, #0
 800a988:	d104      	bne.n	800a994 <USB_EPStartXfer+0x5d4>
 800a98a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a98e:	3b01      	subs	r3, #1
 800a990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	b29a      	uxth	r2, r3
 800a99a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	029b      	lsls	r3, r3, #10
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9b4:	801a      	strh	r2, [r3, #0]
 800a9b6:	e056      	b.n	800aa66 <USB_EPStartXfer+0x6a6>
 800a9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <USB_EPStartXfer+0x616>
 800a9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9d2:	801a      	strh	r2, [r3, #0]
 800a9d4:	e047      	b.n	800aa66 <USB_EPStartXfer+0x6a6>
 800a9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9da:	085b      	lsrs	r3, r3, #1
 800a9dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d004      	beq.n	800a9f6 <USB_EPStartXfer+0x636>
 800a9ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	029b      	lsls	r3, r3, #10
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	4313      	orrs	r3, r2
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa0c:	801a      	strh	r2, [r3, #0]
 800aa0e:	e02a      	b.n	800aa66 <USB_EPStartXfer+0x6a6>
 800aa10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	785b      	ldrb	r3, [r3, #1]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d122      	bne.n	800aa66 <USB_EPStartXfer+0x6a6>
 800aa20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	653b      	str	r3, [r7, #80]	; 0x50
 800aa2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa40:	4413      	add	r3, r2
 800aa42:	653b      	str	r3, [r7, #80]	; 0x50
 800aa44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	011a      	lsls	r2, r3, #4
 800aa52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa54:	4413      	add	r3, r2
 800aa56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aa66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	891b      	ldrh	r3, [r3, #8]
 800aa72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6959      	ldr	r1, [r3, #20]
 800aa82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa94:	6800      	ldr	r0, [r0, #0]
 800aa96:	f001 f982 	bl	800bd9e <USB_WritePMA>
            ep->xfer_buff += len;
 800aa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	695a      	ldr	r2, [r3, #20]
 800aaa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaaa:	441a      	add	r2, r3
 800aaac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6a1a      	ldr	r2, [r3, #32]
 800aac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d90f      	bls.n	800aaf4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800aad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6a1a      	ldr	r2, [r3, #32]
 800aae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae4:	1ad2      	subs	r2, r2, r3
 800aae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	621a      	str	r2, [r3, #32]
 800aaf2:	e00e      	b.n	800ab12 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ab04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	643b      	str	r3, [r7, #64]	; 0x40
 800ab1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	785b      	ldrb	r3, [r3, #1]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d177      	bne.n	800ac1e <USB_EPStartXfer+0x85e>
 800ab2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4e:	4413      	add	r3, r2
 800ab50:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	011a      	lsls	r2, r3, #4
 800ab60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab62:	4413      	add	r3, r2
 800ab64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab68:	637b      	str	r3, [r7, #52]	; 0x34
 800ab6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab78:	801a      	strh	r2, [r3, #0]
 800ab7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab7e:	2b3e      	cmp	r3, #62	; 0x3e
 800ab80:	d921      	bls.n	800abc6 <USB_EPStartXfer+0x806>
 800ab82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab86:	095b      	lsrs	r3, r3, #5
 800ab88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab90:	f003 031f 	and.w	r3, r3, #31
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d104      	bne.n	800aba2 <USB_EPStartXfer+0x7e2>
 800ab98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abac:	b29b      	uxth	r3, r3
 800abae:	029b      	lsls	r3, r3, #10
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	4313      	orrs	r3, r2
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc2:	801a      	strh	r2, [r3, #0]
 800abc4:	e050      	b.n	800ac68 <USB_EPStartXfer+0x8a8>
 800abc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10a      	bne.n	800abe4 <USB_EPStartXfer+0x824>
 800abce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd0:	881b      	ldrh	r3, [r3, #0]
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abdc:	b29a      	uxth	r2, r3
 800abde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe0:	801a      	strh	r2, [r3, #0]
 800abe2:	e041      	b.n	800ac68 <USB_EPStartXfer+0x8a8>
 800abe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe8:	085b      	lsrs	r3, r3, #1
 800abea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d004      	beq.n	800ac04 <USB_EPStartXfer+0x844>
 800abfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abfe:	3301      	adds	r3, #1
 800ac00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	029b      	lsls	r3, r3, #10
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	4313      	orrs	r3, r2
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1a:	801a      	strh	r2, [r3, #0]
 800ac1c:	e024      	b.n	800ac68 <USB_EPStartXfer+0x8a8>
 800ac1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	785b      	ldrb	r3, [r3, #1]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d11c      	bne.n	800ac68 <USB_EPStartXfer+0x8a8>
 800ac2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac42:	4413      	add	r3, r2
 800ac44:	643b      	str	r3, [r7, #64]	; 0x40
 800ac46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	011a      	lsls	r2, r3, #4
 800ac54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac56:	4413      	add	r3, r2
 800ac58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ac68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	895b      	ldrh	r3, [r3, #10]
 800ac74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	6959      	ldr	r1, [r3, #20]
 800ac84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac96:	6800      	ldr	r0, [r0, #0]
 800ac98:	f001 f881 	bl	800bd9e <USB_WritePMA>
 800ac9c:	e227      	b.n	800b0ee <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ac9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800acae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4413      	add	r3, r2
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	b29b      	uxth	r3, r3
 800accc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800acd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800acd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	441a      	add	r2, r3
 800acf2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800acf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	461a      	mov	r2, r3
 800ad28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad2a:	4413      	add	r3, r2
 800ad2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	011a      	lsls	r2, r3, #4
 800ad3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad3e:	4413      	add	r3, r2
 800ad40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad44:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	891b      	ldrh	r3, [r3, #8]
 800ad5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	6959      	ldr	r1, [r3, #20]
 800ad6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad7e:	6800      	ldr	r0, [r0, #0]
 800ad80:	f001 f80d 	bl	800bd9e <USB_WritePMA>
 800ad84:	e1b3      	b.n	800b0ee <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ad86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6a1a      	ldr	r2, [r3, #32]
 800ad92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad96:	1ad2      	subs	r2, r2, r3
 800ad98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ada4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 80c6 	beq.w	800af58 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800adcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	673b      	str	r3, [r7, #112]	; 0x70
 800add8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800addc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	785b      	ldrb	r3, [r3, #1]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d177      	bne.n	800aed8 <USB_EPStartXfer+0xb18>
 800ade8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	66bb      	str	r3, [r7, #104]	; 0x68
 800adf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	461a      	mov	r2, r3
 800ae06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae08:	4413      	add	r3, r2
 800ae0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	011a      	lsls	r2, r3, #4
 800ae1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ae22:	667b      	str	r3, [r7, #100]	; 0x64
 800ae24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae26:	881b      	ldrh	r3, [r3, #0]
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae32:	801a      	strh	r2, [r3, #0]
 800ae34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae38:	2b3e      	cmp	r3, #62	; 0x3e
 800ae3a:	d921      	bls.n	800ae80 <USB_EPStartXfer+0xac0>
 800ae3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae40:	095b      	lsrs	r3, r3, #5
 800ae42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4a:	f003 031f 	and.w	r3, r3, #31
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d104      	bne.n	800ae5c <USB_EPStartXfer+0xa9c>
 800ae52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae56:	3b01      	subs	r3, #1
 800ae58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae5e:	881b      	ldrh	r3, [r3, #0]
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	029b      	lsls	r3, r3, #10
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae7c:	801a      	strh	r2, [r3, #0]
 800ae7e:	e050      	b.n	800af22 <USB_EPStartXfer+0xb62>
 800ae80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <USB_EPStartXfer+0xade>
 800ae88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae9a:	801a      	strh	r2, [r3, #0]
 800ae9c:	e041      	b.n	800af22 <USB_EPStartXfer+0xb62>
 800ae9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea2:	085b      	lsrs	r3, r3, #1
 800aea4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d004      	beq.n	800aebe <USB_EPStartXfer+0xafe>
 800aeb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aeb8:	3301      	adds	r3, #1
 800aeba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	029b      	lsls	r3, r3, #10
 800aecc:	b29b      	uxth	r3, r3
 800aece:	4313      	orrs	r3, r2
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aed4:	801a      	strh	r2, [r3, #0]
 800aed6:	e024      	b.n	800af22 <USB_EPStartXfer+0xb62>
 800aed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	785b      	ldrb	r3, [r3, #1]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d11c      	bne.n	800af22 <USB_EPStartXfer+0xb62>
 800aee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	461a      	mov	r2, r3
 800aefa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aefc:	4413      	add	r3, r2
 800aefe:	673b      	str	r3, [r7, #112]	; 0x70
 800af00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	011a      	lsls	r2, r3, #4
 800af0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af10:	4413      	add	r3, r2
 800af12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af16:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1c:	b29a      	uxth	r2, r3
 800af1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800af22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	895b      	ldrh	r3, [r3, #10]
 800af2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6959      	ldr	r1, [r3, #20]
 800af3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af42:	b29b      	uxth	r3, r3
 800af44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af50:	6800      	ldr	r0, [r0, #0]
 800af52:	f000 ff24 	bl	800bd9e <USB_WritePMA>
 800af56:	e0ca      	b.n	800b0ee <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	785b      	ldrb	r3, [r3, #1]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d177      	bne.n	800b058 <USB_EPStartXfer+0xc98>
 800af68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af82:	b29b      	uxth	r3, r3
 800af84:	461a      	mov	r2, r3
 800af86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af88:	4413      	add	r3, r2
 800af8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	011a      	lsls	r2, r3, #4
 800af9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af9c:	4413      	add	r3, r2
 800af9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800afa2:	67bb      	str	r3, [r7, #120]	; 0x78
 800afa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afae:	b29a      	uxth	r2, r3
 800afb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afb2:	801a      	strh	r2, [r3, #0]
 800afb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb8:	2b3e      	cmp	r3, #62	; 0x3e
 800afba:	d921      	bls.n	800b000 <USB_EPStartXfer+0xc40>
 800afbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc0:	095b      	lsrs	r3, r3, #5
 800afc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800afc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afca:	f003 031f 	and.w	r3, r3, #31
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d104      	bne.n	800afdc <USB_EPStartXfer+0xc1c>
 800afd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800afd6:	3b01      	subs	r3, #1
 800afd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800afdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	029b      	lsls	r3, r3, #10
 800afea:	b29b      	uxth	r3, r3
 800afec:	4313      	orrs	r3, r2
 800afee:	b29b      	uxth	r3, r3
 800aff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aff8:	b29a      	uxth	r2, r3
 800affa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800affc:	801a      	strh	r2, [r3, #0]
 800affe:	e05c      	b.n	800b0ba <USB_EPStartXfer+0xcfa>
 800b000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <USB_EPStartXfer+0xc5e>
 800b008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b016:	b29a      	uxth	r2, r3
 800b018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b01a:	801a      	strh	r2, [r3, #0]
 800b01c:	e04d      	b.n	800b0ba <USB_EPStartXfer+0xcfa>
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	085b      	lsrs	r3, r3, #1
 800b024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <USB_EPStartXfer+0xc7e>
 800b034:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b038:	3301      	adds	r3, #1
 800b03a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b03e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b040:	881b      	ldrh	r3, [r3, #0]
 800b042:	b29a      	uxth	r2, r3
 800b044:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b048:	b29b      	uxth	r3, r3
 800b04a:	029b      	lsls	r3, r3, #10
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	4313      	orrs	r3, r2
 800b050:	b29a      	uxth	r2, r3
 800b052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b054:	801a      	strh	r2, [r3, #0]
 800b056:	e030      	b.n	800b0ba <USB_EPStartXfer+0xcfa>
 800b058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	785b      	ldrb	r3, [r3, #1]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d128      	bne.n	800b0ba <USB_EPStartXfer+0xcfa>
 800b068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b06c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b084:	b29b      	uxth	r3, r3
 800b086:	461a      	mov	r2, r3
 800b088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b08c:	4413      	add	r3, r2
 800b08e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	011a      	lsls	r2, r3, #4
 800b0a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b0aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	891b      	ldrh	r3, [r3, #8]
 800b0c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6959      	ldr	r1, [r3, #20]
 800b0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b0e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b0e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b0e8:	6800      	ldr	r0, [r0, #0]
 800b0ea:	f000 fe58 	bl	800bd9e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b114:	817b      	strh	r3, [r7, #10]
 800b116:	897b      	ldrh	r3, [r7, #10]
 800b118:	f083 0310 	eor.w	r3, r3, #16
 800b11c:	817b      	strh	r3, [r7, #10]
 800b11e:	897b      	ldrh	r3, [r7, #10]
 800b120:	f083 0320 	eor.w	r3, r3, #32
 800b124:	817b      	strh	r3, [r7, #10]
 800b126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	441a      	add	r2, r3
 800b140:	897b      	ldrh	r3, [r7, #10]
 800b142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b14a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b152:	b29b      	uxth	r3, r3
 800b154:	8013      	strh	r3, [r2, #0]
 800b156:	f000 bcde 	b.w	800bb16 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b15e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	7b1b      	ldrb	r3, [r3, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	f040 80bb 	bne.w	800b2e2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	699a      	ldr	r2, [r3, #24]
 800b178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	429a      	cmp	r2, r3
 800b186:	d917      	bls.n	800b1b8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b19c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	699a      	ldr	r2, [r3, #24]
 800b1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a8:	1ad2      	subs	r2, r2, r3
 800b1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	619a      	str	r2, [r3, #24]
 800b1b6:	e00e      	b.n	800b1d6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b1d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	011a      	lsls	r2, r3, #4
 800b20e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b212:	4413      	add	r3, r2
 800b214:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b21c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	b29b      	uxth	r3, r3
 800b224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b228:	b29a      	uxth	r2, r3
 800b22a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b22e:	801a      	strh	r2, [r3, #0]
 800b230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b234:	2b3e      	cmp	r3, #62	; 0x3e
 800b236:	d924      	bls.n	800b282 <USB_EPStartXfer+0xec2>
 800b238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23c:	095b      	lsrs	r3, r3, #5
 800b23e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b246:	f003 031f 	and.w	r3, r3, #31
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d104      	bne.n	800b258 <USB_EPStartXfer+0xe98>
 800b24e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b252:	3b01      	subs	r3, #1
 800b254:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b25c:	881b      	ldrh	r3, [r3, #0]
 800b25e:	b29a      	uxth	r2, r3
 800b260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b264:	b29b      	uxth	r3, r3
 800b266:	029b      	lsls	r3, r3, #10
 800b268:	b29b      	uxth	r3, r3
 800b26a:	4313      	orrs	r3, r2
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b276:	b29a      	uxth	r2, r3
 800b278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b27c:	801a      	strh	r2, [r3, #0]
 800b27e:	f000 bc10 	b.w	800baa2 <USB_EPStartXfer+0x16e2>
 800b282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10c      	bne.n	800b2a4 <USB_EPStartXfer+0xee4>
 800b28a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b28e:	881b      	ldrh	r3, [r3, #0]
 800b290:	b29b      	uxth	r3, r3
 800b292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2a0:	801a      	strh	r2, [r3, #0]
 800b2a2:	e3fe      	b.n	800baa2 <USB_EPStartXfer+0x16e2>
 800b2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a8:	085b      	lsrs	r3, r3, #1
 800b2aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d004      	beq.n	800b2c4 <USB_EPStartXfer+0xf04>
 800b2ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2be:	3301      	adds	r3, #1
 800b2c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	b29a      	uxth	r2, r3
 800b2cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	029b      	lsls	r3, r3, #10
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2de:	801a      	strh	r2, [r3, #0]
 800b2e0:	e3df      	b.n	800baa2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	78db      	ldrb	r3, [r3, #3]
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	f040 8218 	bne.w	800b724 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	785b      	ldrb	r3, [r3, #1]
 800b300:	2b00      	cmp	r3, #0
 800b302:	f040 809d 	bne.w	800b440 <USB_EPStartXfer+0x1080>
 800b306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b322:	b29b      	uxth	r3, r3
 800b324:	461a      	mov	r2, r3
 800b326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b32a:	4413      	add	r3, r2
 800b32c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	011a      	lsls	r2, r3, #4
 800b33e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b342:	4413      	add	r3, r2
 800b344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b34c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	b29b      	uxth	r3, r3
 800b354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b358:	b29a      	uxth	r2, r3
 800b35a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b35e:	801a      	strh	r2, [r3, #0]
 800b360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b3e      	cmp	r3, #62	; 0x3e
 800b36e:	d92b      	bls.n	800b3c8 <USB_EPStartXfer+0x1008>
 800b370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	095b      	lsrs	r3, r3, #5
 800b37e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	f003 031f 	and.w	r3, r3, #31
 800b392:	2b00      	cmp	r3, #0
 800b394:	d104      	bne.n	800b3a0 <USB_EPStartXfer+0xfe0>
 800b396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b39a:	3b01      	subs	r3, #1
 800b39c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3a4:	881b      	ldrh	r3, [r3, #0]
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	029b      	lsls	r3, r3, #10
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3c4:	801a      	strh	r2, [r3, #0]
 800b3c6:	e070      	b.n	800b4aa <USB_EPStartXfer+0x10ea>
 800b3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10c      	bne.n	800b3f2 <USB_EPStartXfer+0x1032>
 800b3d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3ee:	801a      	strh	r2, [r3, #0]
 800b3f0:	e05b      	b.n	800b4aa <USB_EPStartXfer+0x10ea>
 800b3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	085b      	lsrs	r3, r3, #1
 800b400:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	f003 0301 	and.w	r3, r3, #1
 800b414:	2b00      	cmp	r3, #0
 800b416:	d004      	beq.n	800b422 <USB_EPStartXfer+0x1062>
 800b418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b41c:	3301      	adds	r3, #1
 800b41e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b426:	881b      	ldrh	r3, [r3, #0]
 800b428:	b29a      	uxth	r2, r3
 800b42a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b42e:	b29b      	uxth	r3, r3
 800b430:	029b      	lsls	r3, r3, #10
 800b432:	b29b      	uxth	r3, r3
 800b434:	4313      	orrs	r3, r2
 800b436:	b29a      	uxth	r2, r3
 800b438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b43c:	801a      	strh	r2, [r3, #0]
 800b43e:	e034      	b.n	800b4aa <USB_EPStartXfer+0x10ea>
 800b440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	785b      	ldrb	r3, [r3, #1]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d12c      	bne.n	800b4aa <USB_EPStartXfer+0x10ea>
 800b450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	461a      	mov	r2, r3
 800b470:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b474:	4413      	add	r3, r2
 800b476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	011a      	lsls	r2, r3, #4
 800b488:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b48c:	4413      	add	r3, r2
 800b48e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4a8:	801a      	strh	r2, [r3, #0]
 800b4aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	785b      	ldrb	r3, [r3, #1]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f040 809d 	bne.w	800b604 <USB_EPStartXfer+0x1244>
 800b4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	011a      	lsls	r2, r3, #4
 800b502:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b506:	4413      	add	r3, r2
 800b508:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b50c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	b29b      	uxth	r3, r3
 800b518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b522:	801a      	strh	r2, [r3, #0]
 800b524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b3e      	cmp	r3, #62	; 0x3e
 800b532:	d92b      	bls.n	800b58c <USB_EPStartXfer+0x11cc>
 800b534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	095b      	lsrs	r3, r3, #5
 800b542:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f003 031f 	and.w	r3, r3, #31
 800b556:	2b00      	cmp	r3, #0
 800b558:	d104      	bne.n	800b564 <USB_EPStartXfer+0x11a4>
 800b55a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b55e:	3b01      	subs	r3, #1
 800b560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b570:	b29b      	uxth	r3, r3
 800b572:	029b      	lsls	r3, r3, #10
 800b574:	b29b      	uxth	r3, r3
 800b576:	4313      	orrs	r3, r2
 800b578:	b29b      	uxth	r3, r3
 800b57a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b57e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b582:	b29a      	uxth	r2, r3
 800b584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b588:	801a      	strh	r2, [r3, #0]
 800b58a:	e069      	b.n	800b660 <USB_EPStartXfer+0x12a0>
 800b58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10c      	bne.n	800b5b6 <USB_EPStartXfer+0x11f6>
 800b59c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5b2:	801a      	strh	r2, [r3, #0]
 800b5b4:	e054      	b.n	800b660 <USB_EPStartXfer+0x12a0>
 800b5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	085b      	lsrs	r3, r3, #1
 800b5c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d004      	beq.n	800b5e6 <USB_EPStartXfer+0x1226>
 800b5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	029b      	lsls	r3, r3, #10
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b600:	801a      	strh	r2, [r3, #0]
 800b602:	e02d      	b.n	800b660 <USB_EPStartXfer+0x12a0>
 800b604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	785b      	ldrb	r3, [r3, #1]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d125      	bne.n	800b660 <USB_EPStartXfer+0x12a0>
 800b614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b622:	b29b      	uxth	r3, r3
 800b624:	461a      	mov	r2, r3
 800b626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b62a:	4413      	add	r3, r2
 800b62c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	011a      	lsls	r2, r3, #4
 800b63e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b642:	4413      	add	r3, r2
 800b644:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b648:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	b29a      	uxth	r2, r3
 800b65a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b65e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	69db      	ldr	r3, [r3, #28]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 8218 	beq.w	800baa2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	881b      	ldrh	r3, [r3, #0]
 800b68e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b692:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d005      	beq.n	800b6aa <USB_EPStartXfer+0x12ea>
 800b69e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10d      	bne.n	800b6c6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b6aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b6ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f040 81f5 	bne.w	800baa2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b6b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f040 81ee 	bne.w	800baa2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ec:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	441a      	add	r2, r3
 800b70a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b70e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b71a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b71e:	b29b      	uxth	r3, r3
 800b720:	8013      	strh	r3, [r2, #0]
 800b722:	e1be      	b.n	800baa2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	78db      	ldrb	r3, [r3, #3]
 800b730:	2b01      	cmp	r3, #1
 800b732:	f040 81b4 	bne.w	800ba9e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	699a      	ldr	r2, [r3, #24]
 800b742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d917      	bls.n	800b782 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	699a      	ldr	r2, [r3, #24]
 800b76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b772:	1ad2      	subs	r2, r2, r3
 800b774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	619a      	str	r2, [r3, #24]
 800b780:	e00e      	b.n	800b7a0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2200      	movs	r2, #0
 800b79e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	785b      	ldrb	r3, [r3, #1]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f040 8085 	bne.w	800b8bc <USB_EPStartXfer+0x14fc>
 800b7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	011a      	lsls	r2, r3, #4
 800b7ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b7f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b804:	b29a      	uxth	r2, r3
 800b806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b80a:	801a      	strh	r2, [r3, #0]
 800b80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b810:	2b3e      	cmp	r3, #62	; 0x3e
 800b812:	d923      	bls.n	800b85c <USB_EPStartXfer+0x149c>
 800b814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b818:	095b      	lsrs	r3, r3, #5
 800b81a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b822:	f003 031f 	and.w	r3, r3, #31
 800b826:	2b00      	cmp	r3, #0
 800b828:	d104      	bne.n	800b834 <USB_EPStartXfer+0x1474>
 800b82a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b82e:	3b01      	subs	r3, #1
 800b830:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b840:	b29b      	uxth	r3, r3
 800b842:	029b      	lsls	r3, r3, #10
 800b844:	b29b      	uxth	r3, r3
 800b846:	4313      	orrs	r3, r2
 800b848:	b29b      	uxth	r3, r3
 800b84a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b84e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b852:	b29a      	uxth	r2, r3
 800b854:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b858:	801a      	strh	r2, [r3, #0]
 800b85a:	e060      	b.n	800b91e <USB_EPStartXfer+0x155e>
 800b85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10c      	bne.n	800b87e <USB_EPStartXfer+0x14be>
 800b864:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b874:	b29a      	uxth	r2, r3
 800b876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b87a:	801a      	strh	r2, [r3, #0]
 800b87c:	e04f      	b.n	800b91e <USB_EPStartXfer+0x155e>
 800b87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b882:	085b      	lsrs	r3, r3, #1
 800b884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88c:	f003 0301 	and.w	r3, r3, #1
 800b890:	2b00      	cmp	r3, #0
 800b892:	d004      	beq.n	800b89e <USB_EPStartXfer+0x14de>
 800b894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b898:	3301      	adds	r3, #1
 800b89a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b89e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	029b      	lsls	r3, r3, #10
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8b8:	801a      	strh	r2, [r3, #0]
 800b8ba:	e030      	b.n	800b91e <USB_EPStartXfer+0x155e>
 800b8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	785b      	ldrb	r3, [r3, #1]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d128      	bne.n	800b91e <USB_EPStartXfer+0x155e>
 800b8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	011a      	lsls	r2, r3, #4
 800b904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b908:	4413      	add	r3, r2
 800b90a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b90e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b916:	b29a      	uxth	r2, r3
 800b918:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b91c:	801a      	strh	r2, [r3, #0]
 800b91e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b92c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	785b      	ldrb	r3, [r3, #1]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f040 8085 	bne.w	800ba48 <USB_EPStartXfer+0x1688>
 800b93e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	461a      	mov	r2, r3
 800b95e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b962:	4413      	add	r3, r2
 800b964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	011a      	lsls	r2, r3, #4
 800b976:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b97a:	4413      	add	r3, r2
 800b97c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b990:	b29a      	uxth	r2, r3
 800b992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b996:	801a      	strh	r2, [r3, #0]
 800b998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99c:	2b3e      	cmp	r3, #62	; 0x3e
 800b99e:	d923      	bls.n	800b9e8 <USB_EPStartXfer+0x1628>
 800b9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a4:	095b      	lsrs	r3, r3, #5
 800b9a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ae:	f003 031f 	and.w	r3, r3, #31
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d104      	bne.n	800b9c0 <USB_EPStartXfer+0x1600>
 800b9b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	029b      	lsls	r3, r3, #10
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9e4:	801a      	strh	r2, [r3, #0]
 800b9e6:	e05c      	b.n	800baa2 <USB_EPStartXfer+0x16e2>
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10c      	bne.n	800ba0a <USB_EPStartXfer+0x164a>
 800b9f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba06:	801a      	strh	r2, [r3, #0]
 800ba08:	e04b      	b.n	800baa2 <USB_EPStartXfer+0x16e2>
 800ba0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0e:	085b      	lsrs	r3, r3, #1
 800ba10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d004      	beq.n	800ba2a <USB_EPStartXfer+0x166a>
 800ba20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba24:	3301      	adds	r3, #1
 800ba26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	029b      	lsls	r3, r3, #10
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba44:	801a      	strh	r2, [r3, #0]
 800ba46:	e02c      	b.n	800baa2 <USB_EPStartXfer+0x16e2>
 800ba48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	785b      	ldrb	r3, [r3, #1]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d124      	bne.n	800baa2 <USB_EPStartXfer+0x16e2>
 800ba58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	461a      	mov	r2, r3
 800ba6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba6e:	4413      	add	r3, r2
 800ba70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	011a      	lsls	r2, r3, #4
 800ba82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba86:	4413      	add	r3, r2
 800ba88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba9a:	801a      	strh	r2, [r3, #0]
 800ba9c:	e001      	b.n	800baa2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e03a      	b.n	800bb18 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800baa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bac8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bacc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bad0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bad4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bad8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800badc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bae0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	441a      	add	r2, r3
 800bafe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	785b      	ldrb	r3, [r3, #1]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d020      	beq.n	800bb76 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb4a:	81bb      	strh	r3, [r7, #12]
 800bb4c:	89bb      	ldrh	r3, [r7, #12]
 800bb4e:	f083 0310 	eor.w	r3, r3, #16
 800bb52:	81bb      	strh	r3, [r7, #12]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	441a      	add	r2, r3
 800bb5e:	89bb      	ldrh	r3, [r7, #12]
 800bb60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	8013      	strh	r3, [r2, #0]
 800bb74:	e01f      	b.n	800bbb6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	881b      	ldrh	r3, [r3, #0]
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb8c:	81fb      	strh	r3, [r7, #14]
 800bb8e:	89fb      	ldrh	r3, [r7, #14]
 800bb90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bb94:	81fb      	strh	r3, [r7, #14]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	441a      	add	r2, r3
 800bba0:	89fb      	ldrh	r3, [r7, #14]
 800bba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bc80      	pop	{r7}
 800bbc0:	4770      	bx	lr

0800bbc2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b087      	sub	sp, #28
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	7b1b      	ldrb	r3, [r3, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f040 809d 	bne.w	800bd10 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	785b      	ldrb	r3, [r3, #1]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d04c      	beq.n	800bc78 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4413      	add	r3, r2
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	823b      	strh	r3, [r7, #16]
 800bbec:	8a3b      	ldrh	r3, [r7, #16]
 800bbee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d01b      	beq.n	800bc2e <USB_EPClearStall+0x6c>
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4413      	add	r3, r2
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc0c:	81fb      	strh	r3, [r7, #14]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	441a      	add	r2, r3
 800bc18:	89fb      	ldrh	r3, [r7, #14]
 800bc1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	78db      	ldrb	r3, [r3, #3]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d06c      	beq.n	800bd10 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc4c:	81bb      	strh	r3, [r7, #12]
 800bc4e:	89bb      	ldrh	r3, [r7, #12]
 800bc50:	f083 0320 	eor.w	r3, r3, #32
 800bc54:	81bb      	strh	r3, [r7, #12]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	441a      	add	r2, r3
 800bc60:	89bb      	ldrh	r3, [r7, #12]
 800bc62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	8013      	strh	r3, [r2, #0]
 800bc76:	e04b      	b.n	800bd10 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	82fb      	strh	r3, [r7, #22]
 800bc86:	8afb      	ldrh	r3, [r7, #22]
 800bc88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d01b      	beq.n	800bcc8 <USB_EPClearStall+0x106>
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	881b      	ldrh	r3, [r3, #0]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bca6:	82bb      	strh	r3, [r7, #20]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	441a      	add	r2, r3
 800bcb2:	8abb      	ldrh	r3, [r7, #20]
 800bcb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bcc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcde:	827b      	strh	r3, [r7, #18]
 800bce0:	8a7b      	ldrh	r3, [r7, #18]
 800bce2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bce6:	827b      	strh	r3, [r7, #18]
 800bce8:	8a7b      	ldrh	r3, [r7, #18]
 800bcea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bcee:	827b      	strh	r3, [r7, #18]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	441a      	add	r2, r3
 800bcfa:	8a7b      	ldrh	r3, [r7, #18]
 800bcfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	371c      	adds	r7, #28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bc80      	pop	{r7}
 800bd1a:	4770      	bx	lr

0800bd1c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bd28:	78fb      	ldrb	r3, [r7, #3]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d103      	bne.n	800bd36 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2280      	movs	r2, #128	; 0x80
 800bd32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bc80      	pop	{r7}
 800bd40:	4770      	bx	lr

0800bd42 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b083      	sub	sp, #12
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bc80      	pop	{r7}
 800bd54:	4770      	bx	lr

0800bd56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b083      	sub	sp, #12
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bc80      	pop	{r7}
 800bd68:	4770      	bx	lr

0800bd6a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bd6a:	b480      	push	{r7}
 800bd6c:	b085      	sub	sp, #20
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bc80      	pop	{r7}
 800bd86:	4770      	bx	lr

0800bd88 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bc80      	pop	{r7}
 800bd9c:	4770      	bx	lr

0800bd9e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b08b      	sub	sp, #44	; 0x2c
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	60f8      	str	r0, [r7, #12]
 800bda6:	60b9      	str	r1, [r7, #8]
 800bda8:	4611      	mov	r1, r2
 800bdaa:	461a      	mov	r2, r3
 800bdac:	460b      	mov	r3, r1
 800bdae:	80fb      	strh	r3, [r7, #6]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bdb4:	88bb      	ldrh	r3, [r7, #4]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	085b      	lsrs	r3, r3, #1
 800bdba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bdc4:	88fb      	ldrh	r3, [r7, #6]
 800bdc6:	005a      	lsls	r2, r3, #1
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdd0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd6:	e01e      	b.n	800be16 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	3301      	adds	r3, #1
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	021b      	lsls	r3, r3, #8
 800bde6:	b21a      	sxth	r2, r3
 800bde8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	b21b      	sxth	r3, r3
 800bdf0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	8a7a      	ldrh	r2, [r7, #18]
 800bdf6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bdf8:	6a3b      	ldr	r3, [r7, #32]
 800bdfa:	3302      	adds	r3, #2
 800bdfc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	3302      	adds	r3, #2
 800be02:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	3301      	adds	r3, #1
 800be08:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	3301      	adds	r3, #1
 800be0e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	3b01      	subs	r3, #1
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1dd      	bne.n	800bdd8 <USB_WritePMA+0x3a>
  }
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	372c      	adds	r7, #44	; 0x2c
 800be22:	46bd      	mov	sp, r7
 800be24:	bc80      	pop	{r7}
 800be26:	4770      	bx	lr

0800be28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800be28:	b480      	push	{r7}
 800be2a:	b08b      	sub	sp, #44	; 0x2c
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	4611      	mov	r1, r2
 800be34:	461a      	mov	r2, r3
 800be36:	460b      	mov	r3, r1
 800be38:	80fb      	strh	r3, [r7, #6]
 800be3a:	4613      	mov	r3, r2
 800be3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800be3e:	88bb      	ldrh	r3, [r7, #4]
 800be40:	085b      	lsrs	r3, r3, #1
 800be42:	b29b      	uxth	r3, r3
 800be44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be4e:	88fb      	ldrh	r3, [r7, #6]
 800be50:	005a      	lsls	r2, r3, #1
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	4413      	add	r3, r2
 800be56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be5a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
 800be60:	e01b      	b.n	800be9a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800be62:	6a3b      	ldr	r3, [r7, #32]
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	b29b      	uxth	r3, r3
 800be68:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800be6a:	6a3b      	ldr	r3, [r7, #32]
 800be6c:	3302      	adds	r3, #2
 800be6e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	b2da      	uxtb	r2, r3
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	3301      	adds	r3, #1
 800be7c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	0a1b      	lsrs	r3, r3, #8
 800be82:	b2da      	uxtb	r2, r3
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	3301      	adds	r3, #1
 800be8c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800be8e:	6a3b      	ldr	r3, [r7, #32]
 800be90:	3302      	adds	r3, #2
 800be92:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	3b01      	subs	r3, #1
 800be98:	627b      	str	r3, [r7, #36]	; 0x24
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1e0      	bne.n	800be62 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bea0:	88bb      	ldrh	r3, [r7, #4]
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d007      	beq.n	800bebc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	701a      	strb	r2, [r3, #0]
  }
}
 800bebc:	bf00      	nop
 800bebe:	372c      	adds	r7, #44	; 0x2c
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bc80      	pop	{r7}
 800bec4:	4770      	bx	lr

0800bec6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b084      	sub	sp, #16
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	460b      	mov	r3, r1
 800bed0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bed2:	2300      	movs	r3, #0
 800bed4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	7c1b      	ldrb	r3, [r3, #16]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d115      	bne.n	800bf0a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bede:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bee2:	2202      	movs	r2, #2
 800bee4:	2181      	movs	r1, #129	; 0x81
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f001 fea5 	bl	800dc36 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bef6:	2202      	movs	r2, #2
 800bef8:	2101      	movs	r1, #1
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f001 fe9b 	bl	800dc36 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800bf08:	e012      	b.n	800bf30 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf0a:	2340      	movs	r3, #64	; 0x40
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	2181      	movs	r1, #129	; 0x81
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f001 fe90 	bl	800dc36 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf1c:	2340      	movs	r3, #64	; 0x40
 800bf1e:	2202      	movs	r2, #2
 800bf20:	2101      	movs	r1, #1
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f001 fe87 	bl	800dc36 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf30:	2308      	movs	r3, #8
 800bf32:	2203      	movs	r2, #3
 800bf34:	2182      	movs	r1, #130	; 0x82
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f001 fe7d 	bl	800dc36 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf42:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bf46:	f001 ff9d 	bl	800de84 <USBD_static_malloc>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d102      	bne.n	800bf62 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	73fb      	strb	r3, [r7, #15]
 800bf60:	e026      	b.n	800bfb0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf68:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	7c1b      	ldrb	r3, [r3, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d109      	bne.n	800bfa0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf96:	2101      	movs	r1, #1
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f001 ff3d 	bl	800de18 <USBD_LL_PrepareReceive>
 800bf9e:	e007      	b.n	800bfb0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfa6:	2340      	movs	r3, #64	; 0x40
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f001 ff34 	bl	800de18 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b084      	sub	sp, #16
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bfca:	2181      	movs	r1, #129	; 0x81
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f001 fe58 	bl	800dc82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bfd8:	2101      	movs	r1, #1
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f001 fe51 	bl	800dc82 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bfe8:	2182      	movs	r1, #130	; 0x82
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f001 fe49 	bl	800dc82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00e      	beq.n	800c01e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c010:	4618      	mov	r0, r3
 800c012:	f001 ff43 	bl	800de9c <USBD_static_free>
    pdev->pClassData = NULL;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800c01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c038:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c03a:	2300      	movs	r3, #0
 800c03c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d039      	beq.n	800c0c6 <USBD_CDC_Setup+0x9e>
 800c052:	2b20      	cmp	r3, #32
 800c054:	d17f      	bne.n	800c156 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	88db      	ldrh	r3, [r3, #6]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d029      	beq.n	800c0b2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	b25b      	sxtb	r3, r3
 800c064:	2b00      	cmp	r3, #0
 800c066:	da11      	bge.n	800c08c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c074:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	88d2      	ldrh	r2, [r2, #6]
 800c07a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c07c:	6939      	ldr	r1, [r7, #16]
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	88db      	ldrh	r3, [r3, #6]
 800c082:	461a      	mov	r2, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 fa0a 	bl	800d49e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c08a:	e06b      	b.n	800c164 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	785a      	ldrb	r2, [r3, #1]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	88db      	ldrh	r3, [r3, #6]
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c0a2:	6939      	ldr	r1, [r7, #16]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	88db      	ldrh	r3, [r3, #6]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f001 fa25 	bl	800d4fa <USBD_CtlPrepareRx>
      break;
 800c0b0:	e058      	b.n	800c164 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	7850      	ldrb	r0, [r2, #1]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	6839      	ldr	r1, [r7, #0]
 800c0c2:	4798      	blx	r3
      break;
 800c0c4:	e04e      	b.n	800c164 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	785b      	ldrb	r3, [r3, #1]
 800c0ca:	2b0b      	cmp	r3, #11
 800c0cc:	d02e      	beq.n	800c12c <USBD_CDC_Setup+0x104>
 800c0ce:	2b0b      	cmp	r3, #11
 800c0d0:	dc38      	bgt.n	800c144 <USBD_CDC_Setup+0x11c>
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <USBD_CDC_Setup+0xb4>
 800c0d6:	2b0a      	cmp	r3, #10
 800c0d8:	d014      	beq.n	800c104 <USBD_CDC_Setup+0xdc>
 800c0da:	e033      	b.n	800c144 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0e2:	2b03      	cmp	r3, #3
 800c0e4:	d107      	bne.n	800c0f6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c0e6:	f107 030c 	add.w	r3, r7, #12
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f001 f9d5 	bl	800d49e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0f4:	e02e      	b.n	800c154 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f001 f966 	bl	800d3ca <USBD_CtlError>
            ret = USBD_FAIL;
 800c0fe:	2302      	movs	r3, #2
 800c100:	75fb      	strb	r3, [r7, #23]
          break;
 800c102:	e027      	b.n	800c154 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d107      	bne.n	800c11e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c10e:	f107 030f 	add.w	r3, r7, #15
 800c112:	2201      	movs	r2, #1
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f001 f9c1 	bl	800d49e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c11c:	e01a      	b.n	800c154 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f001 f952 	bl	800d3ca <USBD_CtlError>
            ret = USBD_FAIL;
 800c126:	2302      	movs	r3, #2
 800c128:	75fb      	strb	r3, [r7, #23]
          break;
 800c12a:	e013      	b.n	800c154 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c132:	2b03      	cmp	r3, #3
 800c134:	d00d      	beq.n	800c152 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 f946 	bl	800d3ca <USBD_CtlError>
            ret = USBD_FAIL;
 800c13e:	2302      	movs	r3, #2
 800c140:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c142:	e006      	b.n	800c152 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 f93f 	bl	800d3ca <USBD_CtlError>
          ret = USBD_FAIL;
 800c14c:	2302      	movs	r3, #2
 800c14e:	75fb      	strb	r3, [r7, #23]
          break;
 800c150:	e000      	b.n	800c154 <USBD_CDC_Setup+0x12c>
          break;
 800c152:	bf00      	nop
      }
      break;
 800c154:	e006      	b.n	800c164 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f001 f936 	bl	800d3ca <USBD_CtlError>
      ret = USBD_FAIL;
 800c15e:	2302      	movs	r3, #2
 800c160:	75fb      	strb	r3, [r7, #23]
      break;
 800c162:	bf00      	nop
  }

  return ret;
 800c164:	7dfb      	ldrb	r3, [r7, #23]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b084      	sub	sp, #16
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	460b      	mov	r3, r1
 800c178:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c180:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c188:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c190:	2b00      	cmp	r3, #0
 800c192:	d03a      	beq.n	800c20a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c194:	78fa      	ldrb	r2, [r7, #3]
 800c196:	6879      	ldr	r1, [r7, #4]
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	440b      	add	r3, r1
 800c1a2:	331c      	adds	r3, #28
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d029      	beq.n	800c1fe <USBD_CDC_DataIn+0x90>
 800c1aa:	78fa      	ldrb	r2, [r7, #3]
 800c1ac:	6879      	ldr	r1, [r7, #4]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	440b      	add	r3, r1
 800c1b8:	331c      	adds	r3, #28
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	78f9      	ldrb	r1, [r7, #3]
 800c1be:	68b8      	ldr	r0, [r7, #8]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	440b      	add	r3, r1
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	4403      	add	r3, r0
 800c1ca:	3338      	adds	r3, #56	; 0x38
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	fbb2 f1f3 	udiv	r1, r2, r3
 800c1d2:	fb01 f303 	mul.w	r3, r1, r3
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d110      	bne.n	800c1fe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c1dc:	78fa      	ldrb	r2, [r7, #3]
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	440b      	add	r3, r1
 800c1ea:	331c      	adds	r3, #28
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c1f0:	78f9      	ldrb	r1, [r7, #3]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f001 fdeb 	bl	800ddd2 <USBD_LL_Transmit>
 800c1fc:	e003      	b.n	800c206 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	e000      	b.n	800c20c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c20a:	2302      	movs	r3, #2
  }
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c226:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c228:	78fb      	ldrb	r3, [r7, #3]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f001 fe16 	bl	800de5e <USBD_LL_GetRxDataSize>
 800c232:	4602      	mov	r2, r0
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00d      	beq.n	800c260 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c258:	4611      	mov	r1, r2
 800c25a:	4798      	blx	r3

    return USBD_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	e000      	b.n	800c262 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c260:	2302      	movs	r3, #2
  }
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c278:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c280:	2b00      	cmp	r3, #0
 800c282:	d015      	beq.n	800c2b0 <USBD_CDC_EP0_RxReady+0x46>
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c28a:	2bff      	cmp	r3, #255	; 0xff
 800c28c:	d010      	beq.n	800c2b0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c29c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2a4:	b292      	uxth	r2, r2
 800c2a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	22ff      	movs	r2, #255	; 0xff
 800c2ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2243      	movs	r2, #67	; 0x43
 800c2c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c2ca:	4b03      	ldr	r3, [pc, #12]	; (800c2d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bc80      	pop	{r7}
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	20000098 	.word	0x20000098

0800c2dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2243      	movs	r2, #67	; 0x43
 800c2e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c2ea:	4b03      	ldr	r3, [pc, #12]	; (800c2f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bc80      	pop	{r7}
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	20000054 	.word	0x20000054

0800c2fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2243      	movs	r2, #67	; 0x43
 800c308:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c30a:	4b03      	ldr	r3, [pc, #12]	; (800c318 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	bc80      	pop	{r7}
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	200000dc 	.word	0x200000dc

0800c31c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	220a      	movs	r2, #10
 800c328:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c32a:	4b03      	ldr	r3, [pc, #12]	; (800c338 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	bc80      	pop	{r7}
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	20000010 	.word	0x20000010

0800c33c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c346:	2302      	movs	r3, #2
 800c348:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d005      	beq.n	800c35c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c358:	2300      	movs	r3, #0
 800c35a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	bc80      	pop	{r7}
 800c366:	4770      	bx	lr

0800c368 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c368:	b480      	push	{r7}
 800c36a:	b087      	sub	sp, #28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	4613      	mov	r3, r2
 800c374:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c386:	88fa      	ldrh	r2, [r7, #6]
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	371c      	adds	r7, #28
 800c394:	46bd      	mov	sp, r7
 800c396:	bc80      	pop	{r7}
 800c398:	4770      	bx	lr

0800c39a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c39a:	b480      	push	{r7}
 800c39c:	b085      	sub	sp, #20
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3aa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bc80      	pop	{r7}
 800c3be:	4770      	bx	lr

0800c3c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d01c      	beq.n	800c414 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d115      	bne.n	800c410 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c402:	b29b      	uxth	r3, r3
 800c404:	2181      	movs	r1, #129	; 0x81
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f001 fce3 	bl	800ddd2 <USBD_LL_Transmit>

      return USBD_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	e002      	b.n	800c416 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c410:	2301      	movs	r3, #1
 800c412:	e000      	b.n	800c416 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c414:	2302      	movs	r3, #2
  }
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b084      	sub	sp, #16
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c42c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c434:	2b00      	cmp	r3, #0
 800c436:	d017      	beq.n	800c468 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	7c1b      	ldrb	r3, [r3, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d109      	bne.n	800c454 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c44a:	2101      	movs	r1, #1
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f001 fce3 	bl	800de18 <USBD_LL_PrepareReceive>
 800c452:	e007      	b.n	800c464 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c45a:	2340      	movs	r3, #64	; 0x40
 800c45c:	2101      	movs	r1, #1
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f001 fcda 	bl	800de18 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c464:	2300      	movs	r3, #0
 800c466:	e000      	b.n	800c46a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c468:	2302      	movs	r3, #2
  }
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b084      	sub	sp, #16
 800c476:	af00      	add	r7, sp, #0
 800c478:	60f8      	str	r0, [r7, #12]
 800c47a:	60b9      	str	r1, [r7, #8]
 800c47c:	4613      	mov	r3, r2
 800c47e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c486:	2302      	movs	r3, #2
 800c488:	e01a      	b.n	800c4c0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c490:	2b00      	cmp	r3, #0
 800c492:	d003      	beq.n	800c49c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2200      	movs	r2, #0
 800c498:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d003      	beq.n	800c4aa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	79fa      	ldrb	r2, [r7, #7]
 800c4b6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f001 fb47 	bl	800db4c <USBD_LL_Init>

  return USBD_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d006      	beq.n	800c4ea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	73fb      	strb	r3, [r7, #15]
 800c4e8:	e001      	b.n	800c4ee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c4ea:	2302      	movs	r3, #2
 800c4ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bc80      	pop	{r7}
 800c4f8:	4770      	bx	lr

0800c4fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f001 fb7c 	bl	800dc00 <USBD_LL_Start>

  return USBD_OK;
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c512:	b480      	push	{r7}
 800c514:	b083      	sub	sp, #12
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	bc80      	pop	{r7}
 800c524:	4770      	bx	lr

0800c526 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	460b      	mov	r3, r1
 800c530:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c532:	2302      	movs	r3, #2
 800c534:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00c      	beq.n	800c55a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	78fa      	ldrb	r2, [r7, #3]
 800c54a:	4611      	mov	r1, r2
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	4798      	blx	r3
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	460b      	mov	r3, r1
 800c56e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	78fa      	ldrb	r2, [r7, #3]
 800c57a:	4611      	mov	r1, r2
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	4798      	blx	r3

  return USBD_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fed8 	bl	800d352 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c5be:	f003 031f 	and.w	r3, r3, #31
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d016      	beq.n	800c5f4 <USBD_LL_SetupStage+0x6a>
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d81c      	bhi.n	800c604 <USBD_LL_SetupStage+0x7a>
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d002      	beq.n	800c5d4 <USBD_LL_SetupStage+0x4a>
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d008      	beq.n	800c5e4 <USBD_LL_SetupStage+0x5a>
 800c5d2:	e017      	b.n	800c604 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 f9cb 	bl	800c978 <USBD_StdDevReq>
      break;
 800c5e2:	e01a      	b.n	800c61a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fa2d 	bl	800ca4c <USBD_StdItfReq>
      break;
 800c5f2:	e012      	b.n	800c61a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fa6d 	bl	800cadc <USBD_StdEPReq>
      break;
 800c602:	e00a      	b.n	800c61a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c60a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	4619      	mov	r1, r3
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f001 fb54 	bl	800dcc0 <USBD_LL_StallEP>
      break;
 800c618:	bf00      	nop
  }

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	460b      	mov	r3, r1
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c632:	7afb      	ldrb	r3, [r7, #11]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d14b      	bne.n	800c6d0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c63e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c646:	2b03      	cmp	r3, #3
 800c648:	d134      	bne.n	800c6b4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	68da      	ldr	r2, [r3, #12]
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	429a      	cmp	r2, r3
 800c654:	d919      	bls.n	800c68a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	68da      	ldr	r2, [r3, #12]
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d203      	bcs.n	800c678 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c674:	b29b      	uxth	r3, r3
 800c676:	e002      	b.n	800c67e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	461a      	mov	r2, r3
 800c680:	6879      	ldr	r1, [r7, #4]
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f000 ff57 	bl	800d536 <USBD_CtlContinueRx>
 800c688:	e038      	b.n	800c6fc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00a      	beq.n	800c6ac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c69c:	2b03      	cmp	r3, #3
 800c69e:	d105      	bne.n	800c6ac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f000 ff54 	bl	800d55a <USBD_CtlSendStatus>
 800c6b2:	e023      	b.n	800c6fc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6ba:	2b05      	cmp	r3, #5
 800c6bc:	d11e      	bne.n	800c6fc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f001 faf9 	bl	800dcc0 <USBD_LL_StallEP>
 800c6ce:	e015      	b.n	800c6fc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00d      	beq.n	800c6f8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	d108      	bne.n	800c6f8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ec:	699b      	ldr	r3, [r3, #24]
 800c6ee:	7afa      	ldrb	r2, [r7, #11]
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	4798      	blx	r3
 800c6f6:	e001      	b.n	800c6fc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	e000      	b.n	800c6fe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3718      	adds	r7, #24
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b086      	sub	sp, #24
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	60f8      	str	r0, [r7, #12]
 800c70e:	460b      	mov	r3, r1
 800c710:	607a      	str	r2, [r7, #4]
 800c712:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c714:	7afb      	ldrb	r3, [r7, #11]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d17f      	bne.n	800c81a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	3314      	adds	r3, #20
 800c71e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c726:	2b02      	cmp	r3, #2
 800c728:	d15c      	bne.n	800c7e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	68da      	ldr	r2, [r3, #12]
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	429a      	cmp	r2, r3
 800c734:	d915      	bls.n	800c762 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	68da      	ldr	r2, [r3, #12]
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	1ad2      	subs	r2, r2, r3
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	b29b      	uxth	r3, r3
 800c74a:	461a      	mov	r2, r3
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f000 fec1 	bl	800d4d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c754:	2300      	movs	r3, #0
 800c756:	2200      	movs	r2, #0
 800c758:	2100      	movs	r1, #0
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f001 fb5c 	bl	800de18 <USBD_LL_PrepareReceive>
 800c760:	e04e      	b.n	800c800 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	6912      	ldr	r2, [r2, #16]
 800c76a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c76e:	fb01 f202 	mul.w	r2, r1, r2
 800c772:	1a9b      	subs	r3, r3, r2
 800c774:	2b00      	cmp	r3, #0
 800c776:	d11c      	bne.n	800c7b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	689a      	ldr	r2, [r3, #8]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c780:	429a      	cmp	r2, r3
 800c782:	d316      	bcc.n	800c7b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	689a      	ldr	r2, [r3, #8]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c78e:	429a      	cmp	r2, r3
 800c790:	d20f      	bcs.n	800c7b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c792:	2200      	movs	r2, #0
 800c794:	2100      	movs	r1, #0
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f000 fe9d 	bl	800d4d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f001 fb34 	bl	800de18 <USBD_LL_PrepareReceive>
 800c7b0:	e026      	b.n	800c800 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00a      	beq.n	800c7d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c7c4:	2b03      	cmp	r3, #3
 800c7c6:	d105      	bne.n	800c7d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c7d4:	2180      	movs	r1, #128	; 0x80
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f001 fa72 	bl	800dcc0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 fecf 	bl	800d580 <USBD_CtlReceiveStatus>
 800c7e2:	e00d      	b.n	800c800 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c7ea:	2b04      	cmp	r3, #4
 800c7ec:	d004      	beq.n	800c7f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d103      	bne.n	800c800 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c7f8:	2180      	movs	r1, #128	; 0x80
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f001 fa60 	bl	800dcc0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c806:	2b01      	cmp	r3, #1
 800c808:	d11d      	bne.n	800c846 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	f7ff fe81 	bl	800c512 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c818:	e015      	b.n	800c846 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00d      	beq.n	800c842 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c82c:	2b03      	cmp	r3, #3
 800c82e:	d108      	bne.n	800c842 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	7afa      	ldrb	r2, [r7, #11]
 800c83a:	4611      	mov	r1, r2
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	4798      	blx	r3
 800c840:	e001      	b.n	800c846 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c842:	2302      	movs	r3, #2
 800c844:	e000      	b.n	800c848 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c858:	2340      	movs	r3, #64	; 0x40
 800c85a:	2200      	movs	r2, #0
 800c85c:	2100      	movs	r1, #0
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f001 f9e9 	bl	800dc36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2240      	movs	r2, #64	; 0x40
 800c870:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c874:	2340      	movs	r3, #64	; 0x40
 800c876:	2200      	movs	r2, #0
 800c878:	2180      	movs	r1, #128	; 0x80
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f001 f9db 	bl	800dc36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2240      	movs	r2, #64	; 0x40
 800c88a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2201      	movs	r2, #1
 800c890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d009      	beq.n	800c8c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	6852      	ldr	r2, [r2, #4]
 800c8c0:	b2d2      	uxtb	r2, r2
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	4798      	blx	r3
  }

  return USBD_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b083      	sub	sp, #12
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	460b      	mov	r3, r1
 800c8dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	78fa      	ldrb	r2, [r7, #3]
 800c8e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bc80      	pop	{r7}
 800c8ee:	4770      	bx	lr

0800c8f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2204      	movs	r2, #4
 800c908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	bc80      	pop	{r7}
 800c916:	4770      	bx	lr

0800c918 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c926:	2b04      	cmp	r3, #4
 800c928:	d105      	bne.n	800c936 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bc80      	pop	{r7}
 800c940:	4770      	bx	lr

0800c942 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b082      	sub	sp, #8
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c950:	2b03      	cmp	r3, #3
 800c952:	d10b      	bne.n	800c96c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c95a:	69db      	ldr	r3, [r3, #28]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d005      	beq.n	800c96c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c966:	69db      	ldr	r3, [r3, #28]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
	...

0800c978 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c98e:	2b40      	cmp	r3, #64	; 0x40
 800c990:	d005      	beq.n	800c99e <USBD_StdDevReq+0x26>
 800c992:	2b40      	cmp	r3, #64	; 0x40
 800c994:	d84f      	bhi.n	800ca36 <USBD_StdDevReq+0xbe>
 800c996:	2b00      	cmp	r3, #0
 800c998:	d009      	beq.n	800c9ae <USBD_StdDevReq+0x36>
 800c99a:	2b20      	cmp	r3, #32
 800c99c:	d14b      	bne.n	800ca36 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	4798      	blx	r3
      break;
 800c9ac:	e048      	b.n	800ca40 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	785b      	ldrb	r3, [r3, #1]
 800c9b2:	2b09      	cmp	r3, #9
 800c9b4:	d839      	bhi.n	800ca2a <USBD_StdDevReq+0xb2>
 800c9b6:	a201      	add	r2, pc, #4	; (adr r2, 800c9bc <USBD_StdDevReq+0x44>)
 800c9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9bc:	0800ca0d 	.word	0x0800ca0d
 800c9c0:	0800ca21 	.word	0x0800ca21
 800c9c4:	0800ca2b 	.word	0x0800ca2b
 800c9c8:	0800ca17 	.word	0x0800ca17
 800c9cc:	0800ca2b 	.word	0x0800ca2b
 800c9d0:	0800c9ef 	.word	0x0800c9ef
 800c9d4:	0800c9e5 	.word	0x0800c9e5
 800c9d8:	0800ca2b 	.word	0x0800ca2b
 800c9dc:	0800ca03 	.word	0x0800ca03
 800c9e0:	0800c9f9 	.word	0x0800c9f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f9dc 	bl	800cda4 <USBD_GetDescriptor>
          break;
 800c9ec:	e022      	b.n	800ca34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fb3f 	bl	800d074 <USBD_SetAddress>
          break;
 800c9f6:	e01d      	b.n	800ca34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c9f8:	6839      	ldr	r1, [r7, #0]
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fb7e 	bl	800d0fc <USBD_SetConfig>
          break;
 800ca00:	e018      	b.n	800ca34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fc07 	bl	800d218 <USBD_GetConfig>
          break;
 800ca0a:	e013      	b.n	800ca34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fc37 	bl	800d282 <USBD_GetStatus>
          break;
 800ca14:	e00e      	b.n	800ca34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fc65 	bl	800d2e8 <USBD_SetFeature>
          break;
 800ca1e:	e009      	b.n	800ca34 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fc74 	bl	800d310 <USBD_ClrFeature>
          break;
 800ca28:	e004      	b.n	800ca34 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fccc 	bl	800d3ca <USBD_CtlError>
          break;
 800ca32:	bf00      	nop
      }
      break;
 800ca34:	e004      	b.n	800ca40 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 fcc6 	bl	800d3ca <USBD_CtlError>
      break;
 800ca3e:	bf00      	nop
  }

  return ret;
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop

0800ca4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca62:	2b40      	cmp	r3, #64	; 0x40
 800ca64:	d005      	beq.n	800ca72 <USBD_StdItfReq+0x26>
 800ca66:	2b40      	cmp	r3, #64	; 0x40
 800ca68:	d82e      	bhi.n	800cac8 <USBD_StdItfReq+0x7c>
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <USBD_StdItfReq+0x26>
 800ca6e:	2b20      	cmp	r3, #32
 800ca70:	d12a      	bne.n	800cac8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d81d      	bhi.n	800caba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	889b      	ldrh	r3, [r3, #4]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d813      	bhi.n	800cab0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	4798      	blx	r3
 800ca96:	4603      	mov	r3, r0
 800ca98:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	88db      	ldrh	r3, [r3, #6]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d110      	bne.n	800cac4 <USBD_StdItfReq+0x78>
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10d      	bne.n	800cac4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fd56 	bl	800d55a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800caae:	e009      	b.n	800cac4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fc89 	bl	800d3ca <USBD_CtlError>
          break;
 800cab8:	e004      	b.n	800cac4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fc84 	bl	800d3ca <USBD_CtlError>
          break;
 800cac2:	e000      	b.n	800cac6 <USBD_StdItfReq+0x7a>
          break;
 800cac4:	bf00      	nop
      }
      break;
 800cac6:	e004      	b.n	800cad2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800cac8:	6839      	ldr	r1, [r7, #0]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fc7d 	bl	800d3ca <USBD_CtlError>
      break;
 800cad0:	bf00      	nop
  }

  return USBD_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	889b      	ldrh	r3, [r3, #4]
 800caee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800caf8:	2b40      	cmp	r3, #64	; 0x40
 800cafa:	d007      	beq.n	800cb0c <USBD_StdEPReq+0x30>
 800cafc:	2b40      	cmp	r3, #64	; 0x40
 800cafe:	f200 8146 	bhi.w	800cd8e <USBD_StdEPReq+0x2b2>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00a      	beq.n	800cb1c <USBD_StdEPReq+0x40>
 800cb06:	2b20      	cmp	r3, #32
 800cb08:	f040 8141 	bne.w	800cd8e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	4798      	blx	r3
      break;
 800cb1a:	e13d      	b.n	800cd98 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb24:	2b20      	cmp	r3, #32
 800cb26:	d10a      	bne.n	800cb3e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	6839      	ldr	r1, [r7, #0]
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	4798      	blx	r3
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]

        return ret;
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	e12d      	b.n	800cd9a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	785b      	ldrb	r3, [r3, #1]
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d007      	beq.n	800cb56 <USBD_StdEPReq+0x7a>
 800cb46:	2b03      	cmp	r3, #3
 800cb48:	f300 811b 	bgt.w	800cd82 <USBD_StdEPReq+0x2a6>
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d072      	beq.n	800cc36 <USBD_StdEPReq+0x15a>
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d03a      	beq.n	800cbca <USBD_StdEPReq+0xee>
 800cb54:	e115      	b.n	800cd82 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d002      	beq.n	800cb66 <USBD_StdEPReq+0x8a>
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d015      	beq.n	800cb90 <USBD_StdEPReq+0xb4>
 800cb64:	e02b      	b.n	800cbbe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb66:	7bbb      	ldrb	r3, [r7, #14]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00c      	beq.n	800cb86 <USBD_StdEPReq+0xaa>
 800cb6c:	7bbb      	ldrb	r3, [r7, #14]
 800cb6e:	2b80      	cmp	r3, #128	; 0x80
 800cb70:	d009      	beq.n	800cb86 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cb72:	7bbb      	ldrb	r3, [r7, #14]
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f001 f8a2 	bl	800dcc0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cb7c:	2180      	movs	r1, #128	; 0x80
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f001 f89e 	bl	800dcc0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb84:	e020      	b.n	800cbc8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fc1e 	bl	800d3ca <USBD_CtlError>
              break;
 800cb8e:	e01b      	b.n	800cbc8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	885b      	ldrh	r3, [r3, #2]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10e      	bne.n	800cbb6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800cb98:	7bbb      	ldrb	r3, [r7, #14]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00b      	beq.n	800cbb6 <USBD_StdEPReq+0xda>
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
 800cba0:	2b80      	cmp	r3, #128	; 0x80
 800cba2:	d008      	beq.n	800cbb6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	88db      	ldrh	r3, [r3, #6]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d104      	bne.n	800cbb6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f001 f885 	bl	800dcc0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fccf 	bl	800d55a <USBD_CtlSendStatus>

              break;
 800cbbc:	e004      	b.n	800cbc8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800cbbe:	6839      	ldr	r1, [r7, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fc02 	bl	800d3ca <USBD_CtlError>
              break;
 800cbc6:	bf00      	nop
          }
          break;
 800cbc8:	e0e0      	b.n	800cd8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d002      	beq.n	800cbda <USBD_StdEPReq+0xfe>
 800cbd4:	2b03      	cmp	r3, #3
 800cbd6:	d015      	beq.n	800cc04 <USBD_StdEPReq+0x128>
 800cbd8:	e026      	b.n	800cc28 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00c      	beq.n	800cbfa <USBD_StdEPReq+0x11e>
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	2b80      	cmp	r3, #128	; 0x80
 800cbe4:	d009      	beq.n	800cbfa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cbe6:	7bbb      	ldrb	r3, [r7, #14]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f001 f868 	bl	800dcc0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cbf0:	2180      	movs	r1, #128	; 0x80
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f001 f864 	bl	800dcc0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbf8:	e01c      	b.n	800cc34 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fbe4 	bl	800d3ca <USBD_CtlError>
              break;
 800cc02:	e017      	b.n	800cc34 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	885b      	ldrh	r3, [r3, #2]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d112      	bne.n	800cc32 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc0c:	7bbb      	ldrb	r3, [r7, #14]
 800cc0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d004      	beq.n	800cc20 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc16:	7bbb      	ldrb	r3, [r7, #14]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 f86f 	bl	800dcfe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 fc9a 	bl	800d55a <USBD_CtlSendStatus>
              }
              break;
 800cc26:	e004      	b.n	800cc32 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800cc28:	6839      	ldr	r1, [r7, #0]
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fbcd 	bl	800d3ca <USBD_CtlError>
              break;
 800cc30:	e000      	b.n	800cc34 <USBD_StdEPReq+0x158>
              break;
 800cc32:	bf00      	nop
          }
          break;
 800cc34:	e0aa      	b.n	800cd8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d002      	beq.n	800cc46 <USBD_StdEPReq+0x16a>
 800cc40:	2b03      	cmp	r3, #3
 800cc42:	d032      	beq.n	800ccaa <USBD_StdEPReq+0x1ce>
 800cc44:	e097      	b.n	800cd76 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc46:	7bbb      	ldrb	r3, [r7, #14]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d007      	beq.n	800cc5c <USBD_StdEPReq+0x180>
 800cc4c:	7bbb      	ldrb	r3, [r7, #14]
 800cc4e:	2b80      	cmp	r3, #128	; 0x80
 800cc50:	d004      	beq.n	800cc5c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800cc52:	6839      	ldr	r1, [r7, #0]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fbb8 	bl	800d3ca <USBD_CtlError>
                break;
 800cc5a:	e091      	b.n	800cd80 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	da0b      	bge.n	800cc7c <USBD_StdEPReq+0x1a0>
 800cc64:	7bbb      	ldrb	r3, [r7, #14]
 800cc66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4413      	add	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	3310      	adds	r3, #16
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	4413      	add	r3, r2
 800cc78:	3304      	adds	r3, #4
 800cc7a:	e00b      	b.n	800cc94 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc82:	4613      	mov	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	4413      	add	r3, r2
 800cc92:	3304      	adds	r3, #4
 800cc94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	2202      	movs	r2, #2
 800cca0:	4619      	mov	r1, r3
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fbfb 	bl	800d49e <USBD_CtlSendData>
              break;
 800cca8:	e06a      	b.n	800cd80 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ccaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	da11      	bge.n	800ccd6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	f003 020f 	and.w	r2, r3, #15
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	440b      	add	r3, r1
 800ccc4:	3318      	adds	r3, #24
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d117      	bne.n	800ccfc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 fb7b 	bl	800d3ca <USBD_CtlError>
                  break;
 800ccd4:	e054      	b.n	800cd80 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ccd6:	7bbb      	ldrb	r3, [r7, #14]
 800ccd8:	f003 020f 	and.w	r2, r3, #15
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	440b      	add	r3, r1
 800cce8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d104      	bne.n	800ccfc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ccf2:	6839      	ldr	r1, [r7, #0]
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 fb68 	bl	800d3ca <USBD_CtlError>
                  break;
 800ccfa:	e041      	b.n	800cd80 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	da0b      	bge.n	800cd1c <USBD_StdEPReq+0x240>
 800cd04:	7bbb      	ldrb	r3, [r7, #14]
 800cd06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	4413      	add	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	3310      	adds	r3, #16
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	4413      	add	r3, r2
 800cd18:	3304      	adds	r3, #4
 800cd1a:	e00b      	b.n	800cd34 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd1c:	7bbb      	ldrb	r3, [r7, #14]
 800cd1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd22:	4613      	mov	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4413      	add	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	4413      	add	r3, r2
 800cd32:	3304      	adds	r3, #4
 800cd34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd36:	7bbb      	ldrb	r3, [r7, #14]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d002      	beq.n	800cd42 <USBD_StdEPReq+0x266>
 800cd3c:	7bbb      	ldrb	r3, [r7, #14]
 800cd3e:	2b80      	cmp	r3, #128	; 0x80
 800cd40:	d103      	bne.n	800cd4a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	2200      	movs	r2, #0
 800cd46:	601a      	str	r2, [r3, #0]
 800cd48:	e00e      	b.n	800cd68 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800cd4a:	7bbb      	ldrb	r3, [r7, #14]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fff4 	bl	800dd3c <USBD_LL_IsStallEP>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d003      	beq.n	800cd62 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	601a      	str	r2, [r3, #0]
 800cd60:	e002      	b.n	800cd68 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2200      	movs	r2, #0
 800cd66:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fb95 	bl	800d49e <USBD_CtlSendData>
              break;
 800cd74:	e004      	b.n	800cd80 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fb26 	bl	800d3ca <USBD_CtlError>
              break;
 800cd7e:	bf00      	nop
          }
          break;
 800cd80:	e004      	b.n	800cd8c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800cd82:	6839      	ldr	r1, [r7, #0]
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 fb20 	bl	800d3ca <USBD_CtlError>
          break;
 800cd8a:	bf00      	nop
      }
      break;
 800cd8c:	e004      	b.n	800cd98 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fb1a 	bl	800d3ca <USBD_CtlError>
      break;
 800cd96:	bf00      	nop
  }

  return ret;
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
	...

0800cda4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	885b      	ldrh	r3, [r3, #2]
 800cdbe:	0a1b      	lsrs	r3, r3, #8
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	2b06      	cmp	r3, #6
 800cdc6:	f200 8128 	bhi.w	800d01a <USBD_GetDescriptor+0x276>
 800cdca:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <USBD_GetDescriptor+0x2c>)
 800cdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd0:	0800cded 	.word	0x0800cded
 800cdd4:	0800ce05 	.word	0x0800ce05
 800cdd8:	0800ce45 	.word	0x0800ce45
 800cddc:	0800d01b 	.word	0x0800d01b
 800cde0:	0800d01b 	.word	0x0800d01b
 800cde4:	0800cfbb 	.word	0x0800cfbb
 800cde8:	0800cfe7 	.word	0x0800cfe7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	7c12      	ldrb	r2, [r2, #16]
 800cdf8:	f107 0108 	add.w	r1, r7, #8
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	4798      	blx	r3
 800ce00:	60f8      	str	r0, [r7, #12]
      break;
 800ce02:	e112      	b.n	800d02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	7c1b      	ldrb	r3, [r3, #16]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10d      	bne.n	800ce28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce14:	f107 0208 	add.w	r2, r7, #8
 800ce18:	4610      	mov	r0, r2
 800ce1a:	4798      	blx	r3
 800ce1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	3301      	adds	r3, #1
 800ce22:	2202      	movs	r2, #2
 800ce24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ce26:	e100      	b.n	800d02a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce30:	f107 0208 	add.w	r2, r7, #8
 800ce34:	4610      	mov	r0, r2
 800ce36:	4798      	blx	r3
 800ce38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	2202      	movs	r2, #2
 800ce40:	701a      	strb	r2, [r3, #0]
      break;
 800ce42:	e0f2      	b.n	800d02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	885b      	ldrh	r3, [r3, #2]
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	2b05      	cmp	r3, #5
 800ce4c:	f200 80ac 	bhi.w	800cfa8 <USBD_GetDescriptor+0x204>
 800ce50:	a201      	add	r2, pc, #4	; (adr r2, 800ce58 <USBD_GetDescriptor+0xb4>)
 800ce52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce56:	bf00      	nop
 800ce58:	0800ce71 	.word	0x0800ce71
 800ce5c:	0800cea5 	.word	0x0800cea5
 800ce60:	0800ced9 	.word	0x0800ced9
 800ce64:	0800cf0d 	.word	0x0800cf0d
 800ce68:	0800cf41 	.word	0x0800cf41
 800ce6c:	0800cf75 	.word	0x0800cf75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00b      	beq.n	800ce94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	7c12      	ldrb	r2, [r2, #16]
 800ce88:	f107 0108 	add.w	r1, r7, #8
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	4798      	blx	r3
 800ce90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce92:	e091      	b.n	800cfb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fa97 	bl	800d3ca <USBD_CtlError>
            err++;
 800ce9c:	7afb      	ldrb	r3, [r7, #11]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	72fb      	strb	r3, [r7, #11]
          break;
 800cea2:	e089      	b.n	800cfb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00b      	beq.n	800cec8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	7c12      	ldrb	r2, [r2, #16]
 800cebc:	f107 0108 	add.w	r1, r7, #8
 800cec0:	4610      	mov	r0, r2
 800cec2:	4798      	blx	r3
 800cec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec6:	e077      	b.n	800cfb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fa7d 	bl	800d3ca <USBD_CtlError>
            err++;
 800ced0:	7afb      	ldrb	r3, [r7, #11]
 800ced2:	3301      	adds	r3, #1
 800ced4:	72fb      	strb	r3, [r7, #11]
          break;
 800ced6:	e06f      	b.n	800cfb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00b      	beq.n	800cefc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	7c12      	ldrb	r2, [r2, #16]
 800cef0:	f107 0108 	add.w	r1, r7, #8
 800cef4:	4610      	mov	r0, r2
 800cef6:	4798      	blx	r3
 800cef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cefa:	e05d      	b.n	800cfb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cefc:	6839      	ldr	r1, [r7, #0]
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fa63 	bl	800d3ca <USBD_CtlError>
            err++;
 800cf04:	7afb      	ldrb	r3, [r7, #11]
 800cf06:	3301      	adds	r3, #1
 800cf08:	72fb      	strb	r3, [r7, #11]
          break;
 800cf0a:	e055      	b.n	800cfb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf12:	691b      	ldr	r3, [r3, #16]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00b      	beq.n	800cf30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	7c12      	ldrb	r2, [r2, #16]
 800cf24:	f107 0108 	add.w	r1, r7, #8
 800cf28:	4610      	mov	r0, r2
 800cf2a:	4798      	blx	r3
 800cf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf2e:	e043      	b.n	800cfb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 fa49 	bl	800d3ca <USBD_CtlError>
            err++;
 800cf38:	7afb      	ldrb	r3, [r7, #11]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf3e:	e03b      	b.n	800cfb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf46:	695b      	ldr	r3, [r3, #20]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00b      	beq.n	800cf64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf52:	695b      	ldr	r3, [r3, #20]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	7c12      	ldrb	r2, [r2, #16]
 800cf58:	f107 0108 	add.w	r1, r7, #8
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	4798      	blx	r3
 800cf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf62:	e029      	b.n	800cfb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fa2f 	bl	800d3ca <USBD_CtlError>
            err++;
 800cf6c:	7afb      	ldrb	r3, [r7, #11]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	72fb      	strb	r3, [r7, #11]
          break;
 800cf72:	e021      	b.n	800cfb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00b      	beq.n	800cf98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	7c12      	ldrb	r2, [r2, #16]
 800cf8c:	f107 0108 	add.w	r1, r7, #8
 800cf90:	4610      	mov	r0, r2
 800cf92:	4798      	blx	r3
 800cf94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf96:	e00f      	b.n	800cfb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf98:	6839      	ldr	r1, [r7, #0]
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fa15 	bl	800d3ca <USBD_CtlError>
            err++;
 800cfa0:	7afb      	ldrb	r3, [r7, #11]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfa6:	e007      	b.n	800cfb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fa0d 	bl	800d3ca <USBD_CtlError>
          err++;
 800cfb0:	7afb      	ldrb	r3, [r7, #11]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800cfb6:	e038      	b.n	800d02a <USBD_GetDescriptor+0x286>
 800cfb8:	e037      	b.n	800d02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	7c1b      	ldrb	r3, [r3, #16]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d109      	bne.n	800cfd6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfca:	f107 0208 	add.w	r2, r7, #8
 800cfce:	4610      	mov	r0, r2
 800cfd0:	4798      	blx	r3
 800cfd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfd4:	e029      	b.n	800d02a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cfd6:	6839      	ldr	r1, [r7, #0]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 f9f6 	bl	800d3ca <USBD_CtlError>
        err++;
 800cfde:	7afb      	ldrb	r3, [r7, #11]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	72fb      	strb	r3, [r7, #11]
      break;
 800cfe4:	e021      	b.n	800d02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7c1b      	ldrb	r3, [r3, #16]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10d      	bne.n	800d00a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff6:	f107 0208 	add.w	r2, r7, #8
 800cffa:	4610      	mov	r0, r2
 800cffc:	4798      	blx	r3
 800cffe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	3301      	adds	r3, #1
 800d004:	2207      	movs	r2, #7
 800d006:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d008:	e00f      	b.n	800d02a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f9dc 	bl	800d3ca <USBD_CtlError>
        err++;
 800d012:	7afb      	ldrb	r3, [r7, #11]
 800d014:	3301      	adds	r3, #1
 800d016:	72fb      	strb	r3, [r7, #11]
      break;
 800d018:	e007      	b.n	800d02a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d01a:	6839      	ldr	r1, [r7, #0]
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 f9d4 	bl	800d3ca <USBD_CtlError>
      err++;
 800d022:	7afb      	ldrb	r3, [r7, #11]
 800d024:	3301      	adds	r3, #1
 800d026:	72fb      	strb	r3, [r7, #11]
      break;
 800d028:	bf00      	nop
  }

  if (err != 0U)
 800d02a:	7afb      	ldrb	r3, [r7, #11]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d11c      	bne.n	800d06a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d030:	893b      	ldrh	r3, [r7, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d011      	beq.n	800d05a <USBD_GetDescriptor+0x2b6>
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	88db      	ldrh	r3, [r3, #6]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00d      	beq.n	800d05a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	88da      	ldrh	r2, [r3, #6]
 800d042:	893b      	ldrh	r3, [r7, #8]
 800d044:	4293      	cmp	r3, r2
 800d046:	bf28      	it	cs
 800d048:	4613      	movcs	r3, r2
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d04e:	893b      	ldrh	r3, [r7, #8]
 800d050:	461a      	mov	r2, r3
 800d052:	68f9      	ldr	r1, [r7, #12]
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fa22 	bl	800d49e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	88db      	ldrh	r3, [r3, #6]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d104      	bne.n	800d06c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 fa79 	bl	800d55a <USBD_CtlSendStatus>
 800d068:	e000      	b.n	800d06c <USBD_GetDescriptor+0x2c8>
    return;
 800d06a:	bf00      	nop
    }
  }
}
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop

0800d074 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	889b      	ldrh	r3, [r3, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d130      	bne.n	800d0e8 <USBD_SetAddress+0x74>
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	88db      	ldrh	r3, [r3, #6]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d12c      	bne.n	800d0e8 <USBD_SetAddress+0x74>
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	885b      	ldrh	r3, [r3, #2]
 800d092:	2b7f      	cmp	r3, #127	; 0x7f
 800d094:	d828      	bhi.n	800d0e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	885b      	ldrh	r3, [r3, #2]
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0a8:	2b03      	cmp	r3, #3
 800d0aa:	d104      	bne.n	800d0b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f98b 	bl	800d3ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b4:	e01d      	b.n	800d0f2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	7bfa      	ldrb	r2, [r7, #15]
 800d0ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d0be:	7bfb      	ldrb	r3, [r7, #15]
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 fe66 	bl	800dd94 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fa46 	bl	800d55a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0ce:	7bfb      	ldrb	r3, [r7, #15]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2202      	movs	r2, #2
 800d0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0dc:	e009      	b.n	800d0f2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0e6:	e004      	b.n	800d0f2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0e8:	6839      	ldr	r1, [r7, #0]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f96d 	bl	800d3ca <USBD_CtlError>
  }
}
 800d0f0:	bf00      	nop
 800d0f2:	bf00      	nop
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
	...

0800d0fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	885b      	ldrh	r3, [r3, #2]
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	4b41      	ldr	r3, [pc, #260]	; (800d214 <USBD_SetConfig+0x118>)
 800d10e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d110:	4b40      	ldr	r3, [pc, #256]	; (800d214 <USBD_SetConfig+0x118>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d904      	bls.n	800d122 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f955 	bl	800d3ca <USBD_CtlError>
 800d120:	e075      	b.n	800d20e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d128:	2b02      	cmp	r3, #2
 800d12a:	d002      	beq.n	800d132 <USBD_SetConfig+0x36>
 800d12c:	2b03      	cmp	r3, #3
 800d12e:	d023      	beq.n	800d178 <USBD_SetConfig+0x7c>
 800d130:	e062      	b.n	800d1f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d132:	4b38      	ldr	r3, [pc, #224]	; (800d214 <USBD_SetConfig+0x118>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d01a      	beq.n	800d170 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d13a:	4b36      	ldr	r3, [pc, #216]	; (800d214 <USBD_SetConfig+0x118>)
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	461a      	mov	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2203      	movs	r2, #3
 800d148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d14c:	4b31      	ldr	r3, [pc, #196]	; (800d214 <USBD_SetConfig+0x118>)
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	4619      	mov	r1, r3
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7ff f9e7 	bl	800c526 <USBD_SetClassConfig>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d104      	bne.n	800d168 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 f932 	bl	800d3ca <USBD_CtlError>
            return;
 800d166:	e052      	b.n	800d20e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f9f6 	bl	800d55a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d16e:	e04e      	b.n	800d20e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f9f2 	bl	800d55a <USBD_CtlSendStatus>
        break;
 800d176:	e04a      	b.n	800d20e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d178:	4b26      	ldr	r3, [pc, #152]	; (800d214 <USBD_SetConfig+0x118>)
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d112      	bne.n	800d1a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2202      	movs	r2, #2
 800d184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800d188:	4b22      	ldr	r3, [pc, #136]	; (800d214 <USBD_SetConfig+0x118>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	461a      	mov	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d192:	4b20      	ldr	r3, [pc, #128]	; (800d214 <USBD_SetConfig+0x118>)
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	4619      	mov	r1, r3
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7ff f9e3 	bl	800c564 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 f9db 	bl	800d55a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d1a4:	e033      	b.n	800d20e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d1a6:	4b1b      	ldr	r3, [pc, #108]	; (800d214 <USBD_SetConfig+0x118>)
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d01d      	beq.n	800d1f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7ff f9d1 	bl	800c564 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d1c2:	4b14      	ldr	r3, [pc, #80]	; (800d214 <USBD_SetConfig+0x118>)
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d1cc:	4b11      	ldr	r3, [pc, #68]	; (800d214 <USBD_SetConfig+0x118>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff f9a7 	bl	800c526 <USBD_SetClassConfig>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d104      	bne.n	800d1e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f8f2 	bl	800d3ca <USBD_CtlError>
            return;
 800d1e6:	e012      	b.n	800d20e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f9b6 	bl	800d55a <USBD_CtlSendStatus>
        break;
 800d1ee:	e00e      	b.n	800d20e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f9b2 	bl	800d55a <USBD_CtlSendStatus>
        break;
 800d1f6:	e00a      	b.n	800d20e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f8e5 	bl	800d3ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d200:	4b04      	ldr	r3, [pc, #16]	; (800d214 <USBD_SetConfig+0x118>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7ff f9ac 	bl	800c564 <USBD_ClrClassConfig>
        break;
 800d20c:	bf00      	nop
    }
  }
}
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	200002c4 	.word	0x200002c4

0800d218 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	88db      	ldrh	r3, [r3, #6]
 800d226:	2b01      	cmp	r3, #1
 800d228:	d004      	beq.n	800d234 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f8cc 	bl	800d3ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d232:	e022      	b.n	800d27a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	dc02      	bgt.n	800d244 <USBD_GetConfig+0x2c>
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dc03      	bgt.n	800d24a <USBD_GetConfig+0x32>
 800d242:	e015      	b.n	800d270 <USBD_GetConfig+0x58>
 800d244:	2b03      	cmp	r3, #3
 800d246:	d00b      	beq.n	800d260 <USBD_GetConfig+0x48>
 800d248:	e012      	b.n	800d270 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2200      	movs	r2, #0
 800d24e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	3308      	adds	r3, #8
 800d254:	2201      	movs	r2, #1
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f920 	bl	800d49e <USBD_CtlSendData>
        break;
 800d25e:	e00c      	b.n	800d27a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	3304      	adds	r3, #4
 800d264:	2201      	movs	r2, #1
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 f918 	bl	800d49e <USBD_CtlSendData>
        break;
 800d26e:	e004      	b.n	800d27a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f8a9 	bl	800d3ca <USBD_CtlError>
        break;
 800d278:	bf00      	nop
}
 800d27a:	bf00      	nop
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d292:	3b01      	subs	r3, #1
 800d294:	2b02      	cmp	r3, #2
 800d296:	d81e      	bhi.n	800d2d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	88db      	ldrh	r3, [r3, #6]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d004      	beq.n	800d2aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d2a0:	6839      	ldr	r1, [r7, #0]
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f891 	bl	800d3ca <USBD_CtlError>
        break;
 800d2a8:	e01a      	b.n	800d2e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d005      	beq.n	800d2c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f043 0202 	orr.w	r2, r3, #2
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	330c      	adds	r3, #12
 800d2ca:	2202      	movs	r2, #2
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f8e5 	bl	800d49e <USBD_CtlSendData>
      break;
 800d2d4:	e004      	b.n	800d2e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d2d6:	6839      	ldr	r1, [r7, #0]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 f876 	bl	800d3ca <USBD_CtlError>
      break;
 800d2de:	bf00      	nop
  }
}
 800d2e0:	bf00      	nop
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	885b      	ldrh	r3, [r3, #2]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d106      	bne.n	800d308 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 f929 	bl	800d55a <USBD_CtlSendStatus>
  }
}
 800d308:	bf00      	nop
 800d30a:	3708      	adds	r7, #8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d320:	3b01      	subs	r3, #1
 800d322:	2b02      	cmp	r3, #2
 800d324:	d80b      	bhi.n	800d33e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	885b      	ldrh	r3, [r3, #2]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d10c      	bne.n	800d348 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f90f 	bl	800d55a <USBD_CtlSendStatus>
      }
      break;
 800d33c:	e004      	b.n	800d348 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f842 	bl	800d3ca <USBD_CtlError>
      break;
 800d346:	e000      	b.n	800d34a <USBD_ClrFeature+0x3a>
      break;
 800d348:	bf00      	nop
  }
}
 800d34a:	bf00      	nop
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d352:	b480      	push	{r7}
 800d354:	b083      	sub	sp, #12
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	781a      	ldrb	r2, [r3, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	785a      	ldrb	r2, [r3, #1]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	3302      	adds	r3, #2
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	b29a      	uxth	r2, r3
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	3303      	adds	r3, #3
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	021b      	lsls	r3, r3, #8
 800d37e:	b29b      	uxth	r3, r3
 800d380:	4413      	add	r3, r2
 800d382:	b29a      	uxth	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	3304      	adds	r3, #4
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	b29a      	uxth	r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	3305      	adds	r3, #5
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	b29b      	uxth	r3, r3
 800d398:	021b      	lsls	r3, r3, #8
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	4413      	add	r3, r2
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	3306      	adds	r3, #6
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	3307      	adds	r3, #7
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	021b      	lsls	r3, r3, #8
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	4413      	add	r3, r2
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	80da      	strh	r2, [r3, #6]

}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bc80      	pop	{r7}
 800d3c8:	4770      	bx	lr

0800d3ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b082      	sub	sp, #8
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d3d4:	2180      	movs	r1, #128	; 0x80
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 fc72 	bl	800dcc0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d3dc:	2100      	movs	r1, #0
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 fc6e 	bl	800dcc0 <USBD_LL_StallEP>
}
 800d3e4:	bf00      	nop
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d032      	beq.n	800d468 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f000 f834 	bl	800d470 <USBD_GetLen>
 800d408:	4603      	mov	r3, r0
 800d40a:	3301      	adds	r3, #1
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	b29a      	uxth	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	75fa      	strb	r2, [r7, #23]
 800d41c:	461a      	mov	r2, r3
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	4413      	add	r3, r2
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	7812      	ldrb	r2, [r2, #0]
 800d426:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d428:	7dfb      	ldrb	r3, [r7, #23]
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	75fa      	strb	r2, [r7, #23]
 800d42e:	461a      	mov	r2, r3
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	4413      	add	r3, r2
 800d434:	2203      	movs	r2, #3
 800d436:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d438:	e012      	b.n	800d460 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	1c5a      	adds	r2, r3, #1
 800d43e:	60fa      	str	r2, [r7, #12]
 800d440:	7dfa      	ldrb	r2, [r7, #23]
 800d442:	1c51      	adds	r1, r2, #1
 800d444:	75f9      	strb	r1, [r7, #23]
 800d446:	4611      	mov	r1, r2
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	440a      	add	r2, r1
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	75fa      	strb	r2, [r7, #23]
 800d456:	461a      	mov	r2, r3
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	4413      	add	r3, r2
 800d45c:	2200      	movs	r2, #0
 800d45e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1e8      	bne.n	800d43a <USBD_GetString+0x4e>
    }
  }
}
 800d468:	bf00      	nop
 800d46a:	3718      	adds	r7, #24
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d47c:	e005      	b.n	800d48a <USBD_GetLen+0x1a>
  {
    len++;
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
 800d480:	3301      	adds	r3, #1
 800d482:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	3301      	adds	r3, #1
 800d488:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1f5      	bne.n	800d47e <USBD_GetLen+0xe>
  }

  return len;
 800d492:	7bfb      	ldrb	r3, [r7, #15]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3714      	adds	r7, #20
 800d498:	46bd      	mov	sp, r7
 800d49a:	bc80      	pop	{r7}
 800d49c:	4770      	bx	lr

0800d49e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	60f8      	str	r0, [r7, #12]
 800d4a6:	60b9      	str	r1, [r7, #8]
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d4b4:	88fa      	ldrh	r2, [r7, #6]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d4ba:	88fa      	ldrh	r2, [r7, #6]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4c0:	88fb      	ldrh	r3, [r7, #6]
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f000 fc83 	bl	800ddd2 <USBD_LL_Transmit>

  return USBD_OK;
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b084      	sub	sp, #16
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	60f8      	str	r0, [r7, #12]
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4e4:	88fb      	ldrh	r3, [r7, #6]
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f000 fc71 	bl	800ddd2 <USBD_LL_Transmit>

  return USBD_OK;
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b084      	sub	sp, #16
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	60f8      	str	r0, [r7, #12]
 800d502:	60b9      	str	r1, [r7, #8]
 800d504:	4613      	mov	r3, r2
 800d506:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2203      	movs	r2, #3
 800d50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d510:	88fa      	ldrh	r2, [r7, #6]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d518:	88fa      	ldrh	r2, [r7, #6]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d520:	88fb      	ldrh	r3, [r7, #6]
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	2100      	movs	r1, #0
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 fc76 	bl	800de18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b084      	sub	sp, #16
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	60f8      	str	r0, [r7, #12]
 800d53e:	60b9      	str	r1, [r7, #8]
 800d540:	4613      	mov	r3, r2
 800d542:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d544:	88fb      	ldrh	r3, [r7, #6]
 800d546:	68ba      	ldr	r2, [r7, #8]
 800d548:	2100      	movs	r1, #0
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 fc64 	bl	800de18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b082      	sub	sp, #8
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2204      	movs	r2, #4
 800d566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d56a:	2300      	movs	r3, #0
 800d56c:	2200      	movs	r2, #0
 800d56e:	2100      	movs	r1, #0
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fc2e 	bl	800ddd2 <USBD_LL_Transmit>

  return USBD_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2205      	movs	r2, #5
 800d58c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d590:	2300      	movs	r3, #0
 800d592:	2200      	movs	r2, #0
 800d594:	2100      	movs	r1, #0
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fc3e 	bl	800de18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
	...

0800d5a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4912      	ldr	r1, [pc, #72]	; (800d5f8 <MX_USB_DEVICE_Init+0x50>)
 800d5b0:	4812      	ldr	r0, [pc, #72]	; (800d5fc <MX_USB_DEVICE_Init+0x54>)
 800d5b2:	f7fe ff5e 	bl	800c472 <USBD_Init>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d001      	beq.n	800d5c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d5bc:	f7f8 fbca 	bl	8005d54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d5c0:	490f      	ldr	r1, [pc, #60]	; (800d600 <MX_USB_DEVICE_Init+0x58>)
 800d5c2:	480e      	ldr	r0, [pc, #56]	; (800d5fc <MX_USB_DEVICE_Init+0x54>)
 800d5c4:	f7fe ff80 	bl	800c4c8 <USBD_RegisterClass>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d001      	beq.n	800d5d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d5ce:	f7f8 fbc1 	bl	8005d54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d5d2:	490c      	ldr	r1, [pc, #48]	; (800d604 <MX_USB_DEVICE_Init+0x5c>)
 800d5d4:	4809      	ldr	r0, [pc, #36]	; (800d5fc <MX_USB_DEVICE_Init+0x54>)
 800d5d6:	f7fe feb1 	bl	800c33c <USBD_CDC_RegisterInterface>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d001      	beq.n	800d5e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d5e0:	f7f8 fbb8 	bl	8005d54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d5e4:	4805      	ldr	r0, [pc, #20]	; (800d5fc <MX_USB_DEVICE_Init+0x54>)
 800d5e6:	f7fe ff88 	bl	800c4fa <USBD_Start>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d5f0:	f7f8 fbb0 	bl	8005d54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d5f4:	bf00      	nop
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	20000130 	.word	0x20000130
 800d5fc:	200002c8 	.word	0x200002c8
 800d600:	2000001c 	.word	0x2000001c
 800d604:	20000120 	.word	0x20000120

0800d608 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d60c:	2200      	movs	r2, #0
 800d60e:	4905      	ldr	r1, [pc, #20]	; (800d624 <CDC_Init_FS+0x1c>)
 800d610:	4805      	ldr	r0, [pc, #20]	; (800d628 <CDC_Init_FS+0x20>)
 800d612:	f7fe fea9 	bl	800c368 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d616:	4905      	ldr	r1, [pc, #20]	; (800d62c <CDC_Init_FS+0x24>)
 800d618:	4803      	ldr	r0, [pc, #12]	; (800d628 <CDC_Init_FS+0x20>)
 800d61a:	f7fe febe 	bl	800c39a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d61e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d620:	4618      	mov	r0, r3
 800d622:	bd80      	pop	{r7, pc}
 800d624:	2000078c 	.word	0x2000078c
 800d628:	200002c8 	.word	0x200002c8
 800d62c:	2000058c 	.word	0x2000058c

0800d630 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d630:	b480      	push	{r7}
 800d632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d634:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d636:	4618      	mov	r0, r3
 800d638:	46bd      	mov	sp, r7
 800d63a:	bc80      	pop	{r7}
 800d63c:	4770      	bx	lr
	...

0800d640 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	6039      	str	r1, [r7, #0]
 800d64a:	71fb      	strb	r3, [r7, #7]
 800d64c:	4613      	mov	r3, r2
 800d64e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d650:	79fb      	ldrb	r3, [r7, #7]
 800d652:	2b23      	cmp	r3, #35	; 0x23
 800d654:	d84a      	bhi.n	800d6ec <CDC_Control_FS+0xac>
 800d656:	a201      	add	r2, pc, #4	; (adr r2, 800d65c <CDC_Control_FS+0x1c>)
 800d658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65c:	0800d6ed 	.word	0x0800d6ed
 800d660:	0800d6ed 	.word	0x0800d6ed
 800d664:	0800d6ed 	.word	0x0800d6ed
 800d668:	0800d6ed 	.word	0x0800d6ed
 800d66c:	0800d6ed 	.word	0x0800d6ed
 800d670:	0800d6ed 	.word	0x0800d6ed
 800d674:	0800d6ed 	.word	0x0800d6ed
 800d678:	0800d6ed 	.word	0x0800d6ed
 800d67c:	0800d6ed 	.word	0x0800d6ed
 800d680:	0800d6ed 	.word	0x0800d6ed
 800d684:	0800d6ed 	.word	0x0800d6ed
 800d688:	0800d6ed 	.word	0x0800d6ed
 800d68c:	0800d6ed 	.word	0x0800d6ed
 800d690:	0800d6ed 	.word	0x0800d6ed
 800d694:	0800d6ed 	.word	0x0800d6ed
 800d698:	0800d6ed 	.word	0x0800d6ed
 800d69c:	0800d6ed 	.word	0x0800d6ed
 800d6a0:	0800d6ed 	.word	0x0800d6ed
 800d6a4:	0800d6ed 	.word	0x0800d6ed
 800d6a8:	0800d6ed 	.word	0x0800d6ed
 800d6ac:	0800d6ed 	.word	0x0800d6ed
 800d6b0:	0800d6ed 	.word	0x0800d6ed
 800d6b4:	0800d6ed 	.word	0x0800d6ed
 800d6b8:	0800d6ed 	.word	0x0800d6ed
 800d6bc:	0800d6ed 	.word	0x0800d6ed
 800d6c0:	0800d6ed 	.word	0x0800d6ed
 800d6c4:	0800d6ed 	.word	0x0800d6ed
 800d6c8:	0800d6ed 	.word	0x0800d6ed
 800d6cc:	0800d6ed 	.word	0x0800d6ed
 800d6d0:	0800d6ed 	.word	0x0800d6ed
 800d6d4:	0800d6ed 	.word	0x0800d6ed
 800d6d8:	0800d6ed 	.word	0x0800d6ed
 800d6dc:	0800d6ed 	.word	0x0800d6ed
 800d6e0:	0800d6ed 	.word	0x0800d6ed
 800d6e4:	0800d6ed 	.word	0x0800d6ed
 800d6e8:	0800d6ed 	.word	0x0800d6ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d6ec:	bf00      	nop
  }

  return (USBD_OK);
 800d6ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bc80      	pop	{r7}
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop

0800d6fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  memset(usb_rx_val,0,5);
 800d706:	2205      	movs	r2, #5
 800d708:	2100      	movs	r1, #0
 800d70a:	4812      	ldr	r0, [pc, #72]	; (800d754 <CDC_Receive_FS+0x58>)
 800d70c:	f000 fc40 	bl	800df90 <memset>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d710:	6879      	ldr	r1, [r7, #4]
 800d712:	4811      	ldr	r0, [pc, #68]	; (800d758 <CDC_Receive_FS+0x5c>)
 800d714:	f7fe fe41 	bl	800c39a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d718:	480f      	ldr	r0, [pc, #60]	; (800d758 <CDC_Receive_FS+0x5c>)
 800d71a:	f7fe fe80 	bl	800c41e <USBD_CDC_ReceivePacket>
  for(uint8_t i=0;i<*Len;i++)
 800d71e:	2300      	movs	r3, #0
 800d720:	73fb      	strb	r3, [r7, #15]
 800d722:	e009      	b.n	800d738 <CDC_Receive_FS+0x3c>
	  usb_rx_val[i]=Buf[i];
 800d724:	7bfb      	ldrb	r3, [r7, #15]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	441a      	add	r2, r3
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
 800d72c:	7811      	ldrb	r1, [r2, #0]
 800d72e:	4a09      	ldr	r2, [pc, #36]	; (800d754 <CDC_Receive_FS+0x58>)
 800d730:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0;i<*Len;i++)
 800d732:	7bfb      	ldrb	r3, [r7, #15]
 800d734:	3301      	adds	r3, #1
 800d736:	73fb      	strb	r3, [r7, #15]
 800d738:	7bfa      	ldrb	r2, [r7, #15]
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d3f0      	bcc.n	800d724 <CDC_Receive_FS+0x28>
  usb_send=true;
 800d742:	4b06      	ldr	r3, [pc, #24]	; (800d75c <CDC_Receive_FS+0x60>)
 800d744:	2201      	movs	r2, #1
 800d746:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d748:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	2000098c 	.word	0x2000098c
 800d758:	200002c8 	.word	0x200002c8
 800d75c:	20000991 	.word	0x20000991

0800d760 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	460b      	mov	r3, r1
 800d76a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d770:	4b0d      	ldr	r3, [pc, #52]	; (800d7a8 <CDC_Transmit_FS+0x48>)
 800d772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d776:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d782:	2301      	movs	r3, #1
 800d784:	e00b      	b.n	800d79e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d786:	887b      	ldrh	r3, [r7, #2]
 800d788:	461a      	mov	r2, r3
 800d78a:	6879      	ldr	r1, [r7, #4]
 800d78c:	4806      	ldr	r0, [pc, #24]	; (800d7a8 <CDC_Transmit_FS+0x48>)
 800d78e:	f7fe fdeb 	bl	800c368 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d792:	4805      	ldr	r0, [pc, #20]	; (800d7a8 <CDC_Transmit_FS+0x48>)
 800d794:	f7fe fe14 	bl	800c3c0 <USBD_CDC_TransmitPacket>
 800d798:	4603      	mov	r3, r0
 800d79a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	200002c8 	.word	0x200002c8

0800d7ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	6039      	str	r1, [r7, #0]
 800d7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	2212      	movs	r2, #18
 800d7bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d7be:	4b03      	ldr	r3, [pc, #12]	; (800d7cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bc80      	pop	{r7}
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	2000014c 	.word	0x2000014c

0800d7d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	6039      	str	r1, [r7, #0]
 800d7da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	2204      	movs	r2, #4
 800d7e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7e2:	4b03      	ldr	r3, [pc, #12]	; (800d7f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bc80      	pop	{r7}
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	20000160 	.word	0x20000160

0800d7f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	6039      	str	r1, [r7, #0]
 800d7fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d800:	79fb      	ldrb	r3, [r7, #7]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d105      	bne.n	800d812 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d806:	683a      	ldr	r2, [r7, #0]
 800d808:	4907      	ldr	r1, [pc, #28]	; (800d828 <USBD_FS_ProductStrDescriptor+0x34>)
 800d80a:	4808      	ldr	r0, [pc, #32]	; (800d82c <USBD_FS_ProductStrDescriptor+0x38>)
 800d80c:	f7ff fdee 	bl	800d3ec <USBD_GetString>
 800d810:	e004      	b.n	800d81c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	4904      	ldr	r1, [pc, #16]	; (800d828 <USBD_FS_ProductStrDescriptor+0x34>)
 800d816:	4805      	ldr	r0, [pc, #20]	; (800d82c <USBD_FS_ProductStrDescriptor+0x38>)
 800d818:	f7ff fde8 	bl	800d3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d81c:	4b02      	ldr	r3, [pc, #8]	; (800d828 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	20000994 	.word	0x20000994
 800d82c:	0800ebb8 	.word	0x0800ebb8

0800d830 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	4603      	mov	r3, r0
 800d838:	6039      	str	r1, [r7, #0]
 800d83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d83c:	683a      	ldr	r2, [r7, #0]
 800d83e:	4904      	ldr	r1, [pc, #16]	; (800d850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d840:	4804      	ldr	r0, [pc, #16]	; (800d854 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d842:	f7ff fdd3 	bl	800d3ec <USBD_GetString>
  return USBD_StrDesc;
 800d846:	4b02      	ldr	r3, [pc, #8]	; (800d850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	20000994 	.word	0x20000994
 800d854:	0800ebd0 	.word	0x0800ebd0

0800d858 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	4603      	mov	r3, r0
 800d860:	6039      	str	r1, [r7, #0]
 800d862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	221a      	movs	r2, #26
 800d868:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d86a:	f000 f843 	bl	800d8f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d86e:	4b02      	ldr	r3, [pc, #8]	; (800d878 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d870:	4618      	mov	r0, r3
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	20000164 	.word	0x20000164

0800d87c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	6039      	str	r1, [r7, #0]
 800d886:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d888:	79fb      	ldrb	r3, [r7, #7]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d105      	bne.n	800d89a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	4907      	ldr	r1, [pc, #28]	; (800d8b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d892:	4808      	ldr	r0, [pc, #32]	; (800d8b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d894:	f7ff fdaa 	bl	800d3ec <USBD_GetString>
 800d898:	e004      	b.n	800d8a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	4904      	ldr	r1, [pc, #16]	; (800d8b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d89e:	4805      	ldr	r0, [pc, #20]	; (800d8b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d8a0:	f7ff fda4 	bl	800d3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8a4:	4b02      	ldr	r3, [pc, #8]	; (800d8b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	20000994 	.word	0x20000994
 800d8b4:	0800ebe4 	.word	0x0800ebe4

0800d8b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	6039      	str	r1, [r7, #0]
 800d8c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8c4:	79fb      	ldrb	r3, [r7, #7]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d105      	bne.n	800d8d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8ca:	683a      	ldr	r2, [r7, #0]
 800d8cc:	4907      	ldr	r1, [pc, #28]	; (800d8ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8ce:	4808      	ldr	r0, [pc, #32]	; (800d8f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8d0:	f7ff fd8c 	bl	800d3ec <USBD_GetString>
 800d8d4:	e004      	b.n	800d8e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8d6:	683a      	ldr	r2, [r7, #0]
 800d8d8:	4904      	ldr	r1, [pc, #16]	; (800d8ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8da:	4805      	ldr	r0, [pc, #20]	; (800d8f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8dc:	f7ff fd86 	bl	800d3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8e0:	4b02      	ldr	r3, [pc, #8]	; (800d8ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3708      	adds	r7, #8
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	20000994 	.word	0x20000994
 800d8f0:	0800ebf0 	.word	0x0800ebf0

0800d8f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8fa:	4b0f      	ldr	r3, [pc, #60]	; (800d938 <Get_SerialNum+0x44>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d900:	4b0e      	ldr	r3, [pc, #56]	; (800d93c <Get_SerialNum+0x48>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d906:	4b0e      	ldr	r3, [pc, #56]	; (800d940 <Get_SerialNum+0x4c>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4413      	add	r3, r2
 800d912:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d009      	beq.n	800d92e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d91a:	2208      	movs	r2, #8
 800d91c:	4909      	ldr	r1, [pc, #36]	; (800d944 <Get_SerialNum+0x50>)
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f000 f814 	bl	800d94c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d924:	2204      	movs	r2, #4
 800d926:	4908      	ldr	r1, [pc, #32]	; (800d948 <Get_SerialNum+0x54>)
 800d928:	68b8      	ldr	r0, [r7, #8]
 800d92a:	f000 f80f 	bl	800d94c <IntToUnicode>
  }
}
 800d92e:	bf00      	nop
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	1ffff7e8 	.word	0x1ffff7e8
 800d93c:	1ffff7ec 	.word	0x1ffff7ec
 800d940:	1ffff7f0 	.word	0x1ffff7f0
 800d944:	20000166 	.word	0x20000166
 800d948:	20000176 	.word	0x20000176

0800d94c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b087      	sub	sp, #28
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	4613      	mov	r3, r2
 800d958:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d95e:	2300      	movs	r3, #0
 800d960:	75fb      	strb	r3, [r7, #23]
 800d962:	e027      	b.n	800d9b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	0f1b      	lsrs	r3, r3, #28
 800d968:	2b09      	cmp	r3, #9
 800d96a:	d80b      	bhi.n	800d984 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	0f1b      	lsrs	r3, r3, #28
 800d970:	b2da      	uxtb	r2, r3
 800d972:	7dfb      	ldrb	r3, [r7, #23]
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	4619      	mov	r1, r3
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	440b      	add	r3, r1
 800d97c:	3230      	adds	r2, #48	; 0x30
 800d97e:	b2d2      	uxtb	r2, r2
 800d980:	701a      	strb	r2, [r3, #0]
 800d982:	e00a      	b.n	800d99a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	0f1b      	lsrs	r3, r3, #28
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	7dfb      	ldrb	r3, [r7, #23]
 800d98c:	005b      	lsls	r3, r3, #1
 800d98e:	4619      	mov	r1, r3
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	440b      	add	r3, r1
 800d994:	3237      	adds	r2, #55	; 0x37
 800d996:	b2d2      	uxtb	r2, r2
 800d998:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	011b      	lsls	r3, r3, #4
 800d99e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d9a0:	7dfb      	ldrb	r3, [r7, #23]
 800d9a2:	005b      	lsls	r3, r3, #1
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	68ba      	ldr	r2, [r7, #8]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d9ae:	7dfb      	ldrb	r3, [r7, #23]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	75fb      	strb	r3, [r7, #23]
 800d9b4:	7dfa      	ldrb	r2, [r7, #23]
 800d9b6:	79fb      	ldrb	r3, [r7, #7]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d3d3      	bcc.n	800d964 <IntToUnicode+0x18>
  }
}
 800d9bc:	bf00      	nop
 800d9be:	bf00      	nop
 800d9c0:	371c      	adds	r7, #28
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bc80      	pop	{r7}
 800d9c6:	4770      	bx	lr

0800d9c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a0d      	ldr	r2, [pc, #52]	; (800da0c <HAL_PCD_MspInit+0x44>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d113      	bne.n	800da02 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d9da:	4b0d      	ldr	r3, [pc, #52]	; (800da10 <HAL_PCD_MspInit+0x48>)
 800d9dc:	69db      	ldr	r3, [r3, #28]
 800d9de:	4a0c      	ldr	r2, [pc, #48]	; (800da10 <HAL_PCD_MspInit+0x48>)
 800d9e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9e4:	61d3      	str	r3, [r2, #28]
 800d9e6:	4b0a      	ldr	r3, [pc, #40]	; (800da10 <HAL_PCD_MspInit+0x48>)
 800d9e8:	69db      	ldr	r3, [r3, #28]
 800d9ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9ee:	60fb      	str	r3, [r7, #12]
 800d9f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	2014      	movs	r0, #20
 800d9f8:	f7f8 fc87 	bl	800630a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d9fc:	2014      	movs	r0, #20
 800d9fe:	f7f8 fca0 	bl	8006342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800da02:	bf00      	nop
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	40005c00 	.word	0x40005c00
 800da10:	40021000 	.word	0x40021000

0800da14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800da28:	4619      	mov	r1, r3
 800da2a:	4610      	mov	r0, r2
 800da2c:	f7fe fdad 	bl	800c58a <USBD_LL_SetupStage>
}
 800da30:	bf00      	nop
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	460b      	mov	r3, r1
 800da42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800da4a:	78fa      	ldrb	r2, [r7, #3]
 800da4c:	6879      	ldr	r1, [r7, #4]
 800da4e:	4613      	mov	r3, r2
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	4413      	add	r3, r2
 800da54:	00db      	lsls	r3, r3, #3
 800da56:	440b      	add	r3, r1
 800da58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	78fb      	ldrb	r3, [r7, #3]
 800da60:	4619      	mov	r1, r3
 800da62:	f7fe fddf 	bl	800c624 <USBD_LL_DataOutStage>
}
 800da66:	bf00      	nop
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b082      	sub	sp, #8
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	460b      	mov	r3, r1
 800da78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800da80:	78fa      	ldrb	r2, [r7, #3]
 800da82:	6879      	ldr	r1, [r7, #4]
 800da84:	4613      	mov	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	00db      	lsls	r3, r3, #3
 800da8c:	440b      	add	r3, r1
 800da8e:	333c      	adds	r3, #60	; 0x3c
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	78fb      	ldrb	r3, [r7, #3]
 800da94:	4619      	mov	r1, r3
 800da96:	f7fe fe36 	bl	800c706 <USBD_LL_DataInStage>
}
 800da9a:	bf00      	nop
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b082      	sub	sp, #8
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fe ff46 	bl	800c942 <USBD_LL_SOF>
}
 800dab6:	bf00      	nop
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b084      	sub	sp, #16
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dac6:	2301      	movs	r3, #1
 800dac8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	2b02      	cmp	r3, #2
 800dad0:	d001      	beq.n	800dad6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dad2:	f7f8 f93f 	bl	8005d54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800dadc:	7bfa      	ldrb	r2, [r7, #15]
 800dade:	4611      	mov	r1, r2
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7fe fef6 	bl	800c8d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800daec:	4618      	mov	r0, r3
 800daee:	f7fe feaf 	bl	800c850 <USBD_LL_Reset>
}
 800daf2:	bf00      	nop
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
	...

0800dafc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe fef0 	bl	800c8f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	699b      	ldr	r3, [r3, #24]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d005      	beq.n	800db24 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db18:	4b04      	ldr	r3, [pc, #16]	; (800db2c <HAL_PCD_SuspendCallback+0x30>)
 800db1a:	691b      	ldr	r3, [r3, #16]
 800db1c:	4a03      	ldr	r2, [pc, #12]	; (800db2c <HAL_PCD_SuspendCallback+0x30>)
 800db1e:	f043 0306 	orr.w	r3, r3, #6
 800db22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	e000ed00 	.word	0xe000ed00

0800db30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fe feea 	bl	800c918 <USBD_LL_Resume>
}
 800db44:	bf00      	nop
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800db54:	4a28      	ldr	r2, [pc, #160]	; (800dbf8 <USBD_LL_Init+0xac>)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4a26      	ldr	r2, [pc, #152]	; (800dbf8 <USBD_LL_Init+0xac>)
 800db60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800db64:	4b24      	ldr	r3, [pc, #144]	; (800dbf8 <USBD_LL_Init+0xac>)
 800db66:	4a25      	ldr	r2, [pc, #148]	; (800dbfc <USBD_LL_Init+0xb0>)
 800db68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800db6a:	4b23      	ldr	r3, [pc, #140]	; (800dbf8 <USBD_LL_Init+0xac>)
 800db6c:	2208      	movs	r2, #8
 800db6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800db70:	4b21      	ldr	r3, [pc, #132]	; (800dbf8 <USBD_LL_Init+0xac>)
 800db72:	2202      	movs	r2, #2
 800db74:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800db76:	4b20      	ldr	r3, [pc, #128]	; (800dbf8 <USBD_LL_Init+0xac>)
 800db78:	2200      	movs	r2, #0
 800db7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800db7c:	4b1e      	ldr	r3, [pc, #120]	; (800dbf8 <USBD_LL_Init+0xac>)
 800db7e:	2200      	movs	r2, #0
 800db80:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800db82:	4b1d      	ldr	r3, [pc, #116]	; (800dbf8 <USBD_LL_Init+0xac>)
 800db84:	2200      	movs	r2, #0
 800db86:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800db88:	481b      	ldr	r0, [pc, #108]	; (800dbf8 <USBD_LL_Init+0xac>)
 800db8a:	f7f8 ff98 	bl	8006abe <HAL_PCD_Init>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d001      	beq.n	800db98 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800db94:	f7f8 f8de 	bl	8005d54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800db9e:	2318      	movs	r3, #24
 800dba0:	2200      	movs	r2, #0
 800dba2:	2100      	movs	r1, #0
 800dba4:	f7fa fcb7 	bl	8008516 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbae:	2358      	movs	r3, #88	; 0x58
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	2180      	movs	r1, #128	; 0x80
 800dbb4:	f7fa fcaf 	bl	8008516 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbbe:	23c0      	movs	r3, #192	; 0xc0
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	2181      	movs	r1, #129	; 0x81
 800dbc4:	f7fa fca7 	bl	8008516 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbce:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	2101      	movs	r1, #1
 800dbd6:	f7fa fc9e 	bl	8008516 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	2182      	movs	r1, #130	; 0x82
 800dbe8:	f7fa fc95 	bl	8008516 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20000b94 	.word	0x20000b94
 800dbfc:	40005c00 	.word	0x40005c00

0800dc00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7f9 f850 	bl	8006cbc <HAL_PCD_Start>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f000 f94e 	bl	800dec4 <USBD_Get_USB_Status>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b084      	sub	sp, #16
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
 800dc3e:	4608      	mov	r0, r1
 800dc40:	4611      	mov	r1, r2
 800dc42:	461a      	mov	r2, r3
 800dc44:	4603      	mov	r3, r0
 800dc46:	70fb      	strb	r3, [r7, #3]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	70bb      	strb	r3, [r7, #2]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc50:	2300      	movs	r3, #0
 800dc52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc54:	2300      	movs	r3, #0
 800dc56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc5e:	78bb      	ldrb	r3, [r7, #2]
 800dc60:	883a      	ldrh	r2, [r7, #0]
 800dc62:	78f9      	ldrb	r1, [r7, #3]
 800dc64:	f7f9 f9a5 	bl	8006fb2 <HAL_PCD_EP_Open>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc6c:	7bfb      	ldrb	r3, [r7, #15]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f000 f928 	bl	800dec4 <USBD_Get_USB_Status>
 800dc74:	4603      	mov	r3, r0
 800dc76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc78:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b084      	sub	sp, #16
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc9c:	78fa      	ldrb	r2, [r7, #3]
 800dc9e:	4611      	mov	r1, r2
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7f9 f9e3 	bl	800706c <HAL_PCD_EP_Close>
 800dca6:	4603      	mov	r3, r0
 800dca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcaa:	7bfb      	ldrb	r3, [r7, #15]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f000 f909 	bl	800dec4 <USBD_Get_USB_Status>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dcda:	78fa      	ldrb	r2, [r7, #3]
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7f9 fa8b 	bl	80071fa <HAL_PCD_EP_SetStall>
 800dce4:	4603      	mov	r3, r0
 800dce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f000 f8ea 	bl	800dec4 <USBD_Get_USB_Status>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b084      	sub	sp, #16
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
 800dd06:	460b      	mov	r3, r1
 800dd08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd18:	78fa      	ldrb	r2, [r7, #3]
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7f9 facc 	bl	80072ba <HAL_PCD_EP_ClrStall>
 800dd22:	4603      	mov	r3, r0
 800dd24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 f8cb 	bl	800dec4 <USBD_Get_USB_Status>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd32:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b085      	sub	sp, #20
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	460b      	mov	r3, r1
 800dd46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	da0c      	bge.n	800dd72 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd58:	78fb      	ldrb	r3, [r7, #3]
 800dd5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd5e:	68f9      	ldr	r1, [r7, #12]
 800dd60:	1c5a      	adds	r2, r3, #1
 800dd62:	4613      	mov	r3, r2
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	4413      	add	r3, r2
 800dd68:	00db      	lsls	r3, r3, #3
 800dd6a:	440b      	add	r3, r1
 800dd6c:	3302      	adds	r3, #2
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	e00b      	b.n	800dd8a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd72:	78fb      	ldrb	r3, [r7, #3]
 800dd74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd78:	68f9      	ldr	r1, [r7, #12]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	4413      	add	r3, r2
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	440b      	add	r3, r1
 800dd84:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dd88:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3714      	adds	r7, #20
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bc80      	pop	{r7}
 800dd92:	4770      	bx	lr

0800dd94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b084      	sub	sp, #16
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dda0:	2300      	movs	r3, #0
 800dda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddae:	78fa      	ldrb	r2, [r7, #3]
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7f9 f8d8 	bl	8006f68 <HAL_PCD_SetAddress>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f000 f880 	bl	800dec4 <USBD_Get_USB_Status>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b086      	sub	sp, #24
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	60f8      	str	r0, [r7, #12]
 800ddda:	607a      	str	r2, [r7, #4]
 800dddc:	461a      	mov	r2, r3
 800ddde:	460b      	mov	r3, r1
 800dde0:	72fb      	strb	r3, [r7, #11]
 800dde2:	4613      	mov	r3, r2
 800dde4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ddf4:	893b      	ldrh	r3, [r7, #8]
 800ddf6:	7af9      	ldrb	r1, [r7, #11]
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	f7f9 f9c7 	bl	800718c <HAL_PCD_EP_Transmit>
 800ddfe:	4603      	mov	r3, r0
 800de00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de02:	7dfb      	ldrb	r3, [r7, #23]
 800de04:	4618      	mov	r0, r3
 800de06:	f000 f85d 	bl	800dec4 <USBD_Get_USB_Status>
 800de0a:	4603      	mov	r3, r0
 800de0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3718      	adds	r7, #24
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	607a      	str	r2, [r7, #4]
 800de22:	461a      	mov	r2, r3
 800de24:	460b      	mov	r3, r1
 800de26:	72fb      	strb	r3, [r7, #11]
 800de28:	4613      	mov	r3, r2
 800de2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de2c:	2300      	movs	r3, #0
 800de2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800de3a:	893b      	ldrh	r3, [r7, #8]
 800de3c:	7af9      	ldrb	r1, [r7, #11]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	f7f9 f95c 	bl	80070fc <HAL_PCD_EP_Receive>
 800de44:	4603      	mov	r3, r0
 800de46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 f83a 	bl	800dec4 <USBD_Get_USB_Status>
 800de50:	4603      	mov	r3, r0
 800de52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de54:	7dbb      	ldrb	r3, [r7, #22]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3718      	adds	r7, #24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b082      	sub	sp, #8
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
 800de66:	460b      	mov	r3, r1
 800de68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de70:	78fa      	ldrb	r2, [r7, #3]
 800de72:	4611      	mov	r1, r2
 800de74:	4618      	mov	r0, r3
 800de76:	f7f9 f972 	bl	800715e <HAL_PCD_EP_GetRxCount>
 800de7a:	4603      	mov	r3, r0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800de8c:	4b02      	ldr	r3, [pc, #8]	; (800de98 <USBD_static_malloc+0x14>)
}
 800de8e:	4618      	mov	r0, r3
 800de90:	370c      	adds	r7, #12
 800de92:	46bd      	mov	sp, r7
 800de94:	bc80      	pop	{r7}
 800de96:	4770      	bx	lr
 800de98:	20000e84 	.word	0x20000e84

0800de9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]

}
 800dea4:	bf00      	nop
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bc80      	pop	{r7}
 800deac:	4770      	bx	lr

0800deae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deae:	b480      	push	{r7}
 800deb0:	b083      	sub	sp, #12
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
 800deb6:	460b      	mov	r3, r1
 800deb8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800deba:	bf00      	nop
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	bc80      	pop	{r7}
 800dec2:	4770      	bx	lr

0800dec4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
 800deca:	4603      	mov	r3, r0
 800decc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dece:	2300      	movs	r3, #0
 800ded0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ded2:	79fb      	ldrb	r3, [r7, #7]
 800ded4:	2b03      	cmp	r3, #3
 800ded6:	d817      	bhi.n	800df08 <USBD_Get_USB_Status+0x44>
 800ded8:	a201      	add	r2, pc, #4	; (adr r2, 800dee0 <USBD_Get_USB_Status+0x1c>)
 800deda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dede:	bf00      	nop
 800dee0:	0800def1 	.word	0x0800def1
 800dee4:	0800def7 	.word	0x0800def7
 800dee8:	0800defd 	.word	0x0800defd
 800deec:	0800df03 	.word	0x0800df03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	73fb      	strb	r3, [r7, #15]
    break;
 800def4:	e00b      	b.n	800df0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800def6:	2302      	movs	r3, #2
 800def8:	73fb      	strb	r3, [r7, #15]
    break;
 800defa:	e008      	b.n	800df0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800defc:	2301      	movs	r3, #1
 800defe:	73fb      	strb	r3, [r7, #15]
    break;
 800df00:	e005      	b.n	800df0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df02:	2302      	movs	r3, #2
 800df04:	73fb      	strb	r3, [r7, #15]
    break;
 800df06:	e002      	b.n	800df0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df08:	2302      	movs	r3, #2
 800df0a:	73fb      	strb	r3, [r7, #15]
    break;
 800df0c:	bf00      	nop
  }
  return usb_status;
 800df0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	bc80      	pop	{r7}
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop

0800df1c <_vsniprintf_r>:
 800df1c:	b530      	push	{r4, r5, lr}
 800df1e:	4614      	mov	r4, r2
 800df20:	2c00      	cmp	r4, #0
 800df22:	4605      	mov	r5, r0
 800df24:	461a      	mov	r2, r3
 800df26:	b09b      	sub	sp, #108	; 0x6c
 800df28:	da05      	bge.n	800df36 <_vsniprintf_r+0x1a>
 800df2a:	238b      	movs	r3, #139	; 0x8b
 800df2c:	6003      	str	r3, [r0, #0]
 800df2e:	f04f 30ff 	mov.w	r0, #4294967295
 800df32:	b01b      	add	sp, #108	; 0x6c
 800df34:	bd30      	pop	{r4, r5, pc}
 800df36:	f44f 7302 	mov.w	r3, #520	; 0x208
 800df3a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800df3e:	bf0c      	ite	eq
 800df40:	4623      	moveq	r3, r4
 800df42:	f104 33ff 	addne.w	r3, r4, #4294967295
 800df46:	9302      	str	r3, [sp, #8]
 800df48:	9305      	str	r3, [sp, #20]
 800df4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df4e:	9100      	str	r1, [sp, #0]
 800df50:	9104      	str	r1, [sp, #16]
 800df52:	f8ad 300e 	strh.w	r3, [sp, #14]
 800df56:	4669      	mov	r1, sp
 800df58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800df5a:	f000 f99b 	bl	800e294 <_svfiprintf_r>
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	bfbc      	itt	lt
 800df62:	238b      	movlt	r3, #139	; 0x8b
 800df64:	602b      	strlt	r3, [r5, #0]
 800df66:	2c00      	cmp	r4, #0
 800df68:	d0e3      	beq.n	800df32 <_vsniprintf_r+0x16>
 800df6a:	2200      	movs	r2, #0
 800df6c:	9b00      	ldr	r3, [sp, #0]
 800df6e:	701a      	strb	r2, [r3, #0]
 800df70:	e7df      	b.n	800df32 <_vsniprintf_r+0x16>
	...

0800df74 <vsniprintf>:
 800df74:	b507      	push	{r0, r1, r2, lr}
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	4613      	mov	r3, r2
 800df7a:	460a      	mov	r2, r1
 800df7c:	4601      	mov	r1, r0
 800df7e:	4803      	ldr	r0, [pc, #12]	; (800df8c <vsniprintf+0x18>)
 800df80:	6800      	ldr	r0, [r0, #0]
 800df82:	f7ff ffcb 	bl	800df1c <_vsniprintf_r>
 800df86:	b003      	add	sp, #12
 800df88:	f85d fb04 	ldr.w	pc, [sp], #4
 800df8c:	200001cc 	.word	0x200001cc

0800df90 <memset>:
 800df90:	4603      	mov	r3, r0
 800df92:	4402      	add	r2, r0
 800df94:	4293      	cmp	r3, r2
 800df96:	d100      	bne.n	800df9a <memset+0xa>
 800df98:	4770      	bx	lr
 800df9a:	f803 1b01 	strb.w	r1, [r3], #1
 800df9e:	e7f9      	b.n	800df94 <memset+0x4>

0800dfa0 <__errno>:
 800dfa0:	4b01      	ldr	r3, [pc, #4]	; (800dfa8 <__errno+0x8>)
 800dfa2:	6818      	ldr	r0, [r3, #0]
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	200001cc 	.word	0x200001cc

0800dfac <__libc_init_array>:
 800dfac:	b570      	push	{r4, r5, r6, lr}
 800dfae:	2600      	movs	r6, #0
 800dfb0:	4d0c      	ldr	r5, [pc, #48]	; (800dfe4 <__libc_init_array+0x38>)
 800dfb2:	4c0d      	ldr	r4, [pc, #52]	; (800dfe8 <__libc_init_array+0x3c>)
 800dfb4:	1b64      	subs	r4, r4, r5
 800dfb6:	10a4      	asrs	r4, r4, #2
 800dfb8:	42a6      	cmp	r6, r4
 800dfba:	d109      	bne.n	800dfd0 <__libc_init_array+0x24>
 800dfbc:	f000 fc7a 	bl	800e8b4 <_init>
 800dfc0:	2600      	movs	r6, #0
 800dfc2:	4d0a      	ldr	r5, [pc, #40]	; (800dfec <__libc_init_array+0x40>)
 800dfc4:	4c0a      	ldr	r4, [pc, #40]	; (800dff0 <__libc_init_array+0x44>)
 800dfc6:	1b64      	subs	r4, r4, r5
 800dfc8:	10a4      	asrs	r4, r4, #2
 800dfca:	42a6      	cmp	r6, r4
 800dfcc:	d105      	bne.n	800dfda <__libc_init_array+0x2e>
 800dfce:	bd70      	pop	{r4, r5, r6, pc}
 800dfd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfd4:	4798      	blx	r3
 800dfd6:	3601      	adds	r6, #1
 800dfd8:	e7ee      	b.n	800dfb8 <__libc_init_array+0xc>
 800dfda:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfde:	4798      	blx	r3
 800dfe0:	3601      	adds	r6, #1
 800dfe2:	e7f2      	b.n	800dfca <__libc_init_array+0x1e>
 800dfe4:	0800ec60 	.word	0x0800ec60
 800dfe8:	0800ec60 	.word	0x0800ec60
 800dfec:	0800ec60 	.word	0x0800ec60
 800dff0:	0800ec64 	.word	0x0800ec64

0800dff4 <__retarget_lock_acquire_recursive>:
 800dff4:	4770      	bx	lr

0800dff6 <__retarget_lock_release_recursive>:
 800dff6:	4770      	bx	lr

0800dff8 <_free_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4605      	mov	r5, r0
 800dffc:	2900      	cmp	r1, #0
 800dffe:	d040      	beq.n	800e082 <_free_r+0x8a>
 800e000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e004:	1f0c      	subs	r4, r1, #4
 800e006:	2b00      	cmp	r3, #0
 800e008:	bfb8      	it	lt
 800e00a:	18e4      	addlt	r4, r4, r3
 800e00c:	f000 f8dc 	bl	800e1c8 <__malloc_lock>
 800e010:	4a1c      	ldr	r2, [pc, #112]	; (800e084 <_free_r+0x8c>)
 800e012:	6813      	ldr	r3, [r2, #0]
 800e014:	b933      	cbnz	r3, 800e024 <_free_r+0x2c>
 800e016:	6063      	str	r3, [r4, #4]
 800e018:	6014      	str	r4, [r2, #0]
 800e01a:	4628      	mov	r0, r5
 800e01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e020:	f000 b8d8 	b.w	800e1d4 <__malloc_unlock>
 800e024:	42a3      	cmp	r3, r4
 800e026:	d908      	bls.n	800e03a <_free_r+0x42>
 800e028:	6820      	ldr	r0, [r4, #0]
 800e02a:	1821      	adds	r1, r4, r0
 800e02c:	428b      	cmp	r3, r1
 800e02e:	bf01      	itttt	eq
 800e030:	6819      	ldreq	r1, [r3, #0]
 800e032:	685b      	ldreq	r3, [r3, #4]
 800e034:	1809      	addeq	r1, r1, r0
 800e036:	6021      	streq	r1, [r4, #0]
 800e038:	e7ed      	b.n	800e016 <_free_r+0x1e>
 800e03a:	461a      	mov	r2, r3
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	b10b      	cbz	r3, 800e044 <_free_r+0x4c>
 800e040:	42a3      	cmp	r3, r4
 800e042:	d9fa      	bls.n	800e03a <_free_r+0x42>
 800e044:	6811      	ldr	r1, [r2, #0]
 800e046:	1850      	adds	r0, r2, r1
 800e048:	42a0      	cmp	r0, r4
 800e04a:	d10b      	bne.n	800e064 <_free_r+0x6c>
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	4401      	add	r1, r0
 800e050:	1850      	adds	r0, r2, r1
 800e052:	4283      	cmp	r3, r0
 800e054:	6011      	str	r1, [r2, #0]
 800e056:	d1e0      	bne.n	800e01a <_free_r+0x22>
 800e058:	6818      	ldr	r0, [r3, #0]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	4408      	add	r0, r1
 800e05e:	6010      	str	r0, [r2, #0]
 800e060:	6053      	str	r3, [r2, #4]
 800e062:	e7da      	b.n	800e01a <_free_r+0x22>
 800e064:	d902      	bls.n	800e06c <_free_r+0x74>
 800e066:	230c      	movs	r3, #12
 800e068:	602b      	str	r3, [r5, #0]
 800e06a:	e7d6      	b.n	800e01a <_free_r+0x22>
 800e06c:	6820      	ldr	r0, [r4, #0]
 800e06e:	1821      	adds	r1, r4, r0
 800e070:	428b      	cmp	r3, r1
 800e072:	bf01      	itttt	eq
 800e074:	6819      	ldreq	r1, [r3, #0]
 800e076:	685b      	ldreq	r3, [r3, #4]
 800e078:	1809      	addeq	r1, r1, r0
 800e07a:	6021      	streq	r1, [r4, #0]
 800e07c:	6063      	str	r3, [r4, #4]
 800e07e:	6054      	str	r4, [r2, #4]
 800e080:	e7cb      	b.n	800e01a <_free_r+0x22>
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	200011e4 	.word	0x200011e4

0800e088 <sbrk_aligned>:
 800e088:	b570      	push	{r4, r5, r6, lr}
 800e08a:	4e0e      	ldr	r6, [pc, #56]	; (800e0c4 <sbrk_aligned+0x3c>)
 800e08c:	460c      	mov	r4, r1
 800e08e:	6831      	ldr	r1, [r6, #0]
 800e090:	4605      	mov	r5, r0
 800e092:	b911      	cbnz	r1, 800e09a <sbrk_aligned+0x12>
 800e094:	f000 fbaa 	bl	800e7ec <_sbrk_r>
 800e098:	6030      	str	r0, [r6, #0]
 800e09a:	4621      	mov	r1, r4
 800e09c:	4628      	mov	r0, r5
 800e09e:	f000 fba5 	bl	800e7ec <_sbrk_r>
 800e0a2:	1c43      	adds	r3, r0, #1
 800e0a4:	d00a      	beq.n	800e0bc <sbrk_aligned+0x34>
 800e0a6:	1cc4      	adds	r4, r0, #3
 800e0a8:	f024 0403 	bic.w	r4, r4, #3
 800e0ac:	42a0      	cmp	r0, r4
 800e0ae:	d007      	beq.n	800e0c0 <sbrk_aligned+0x38>
 800e0b0:	1a21      	subs	r1, r4, r0
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	f000 fb9a 	bl	800e7ec <_sbrk_r>
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	d101      	bne.n	800e0c0 <sbrk_aligned+0x38>
 800e0bc:	f04f 34ff 	mov.w	r4, #4294967295
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	bd70      	pop	{r4, r5, r6, pc}
 800e0c4:	200011e8 	.word	0x200011e8

0800e0c8 <_malloc_r>:
 800e0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0cc:	1ccd      	adds	r5, r1, #3
 800e0ce:	f025 0503 	bic.w	r5, r5, #3
 800e0d2:	3508      	adds	r5, #8
 800e0d4:	2d0c      	cmp	r5, #12
 800e0d6:	bf38      	it	cc
 800e0d8:	250c      	movcc	r5, #12
 800e0da:	2d00      	cmp	r5, #0
 800e0dc:	4607      	mov	r7, r0
 800e0de:	db01      	blt.n	800e0e4 <_malloc_r+0x1c>
 800e0e0:	42a9      	cmp	r1, r5
 800e0e2:	d905      	bls.n	800e0f0 <_malloc_r+0x28>
 800e0e4:	230c      	movs	r3, #12
 800e0e6:	2600      	movs	r6, #0
 800e0e8:	603b      	str	r3, [r7, #0]
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e1c4 <_malloc_r+0xfc>
 800e0f4:	f000 f868 	bl	800e1c8 <__malloc_lock>
 800e0f8:	f8d8 3000 	ldr.w	r3, [r8]
 800e0fc:	461c      	mov	r4, r3
 800e0fe:	bb5c      	cbnz	r4, 800e158 <_malloc_r+0x90>
 800e100:	4629      	mov	r1, r5
 800e102:	4638      	mov	r0, r7
 800e104:	f7ff ffc0 	bl	800e088 <sbrk_aligned>
 800e108:	1c43      	adds	r3, r0, #1
 800e10a:	4604      	mov	r4, r0
 800e10c:	d155      	bne.n	800e1ba <_malloc_r+0xf2>
 800e10e:	f8d8 4000 	ldr.w	r4, [r8]
 800e112:	4626      	mov	r6, r4
 800e114:	2e00      	cmp	r6, #0
 800e116:	d145      	bne.n	800e1a4 <_malloc_r+0xdc>
 800e118:	2c00      	cmp	r4, #0
 800e11a:	d048      	beq.n	800e1ae <_malloc_r+0xe6>
 800e11c:	6823      	ldr	r3, [r4, #0]
 800e11e:	4631      	mov	r1, r6
 800e120:	4638      	mov	r0, r7
 800e122:	eb04 0903 	add.w	r9, r4, r3
 800e126:	f000 fb61 	bl	800e7ec <_sbrk_r>
 800e12a:	4581      	cmp	r9, r0
 800e12c:	d13f      	bne.n	800e1ae <_malloc_r+0xe6>
 800e12e:	6821      	ldr	r1, [r4, #0]
 800e130:	4638      	mov	r0, r7
 800e132:	1a6d      	subs	r5, r5, r1
 800e134:	4629      	mov	r1, r5
 800e136:	f7ff ffa7 	bl	800e088 <sbrk_aligned>
 800e13a:	3001      	adds	r0, #1
 800e13c:	d037      	beq.n	800e1ae <_malloc_r+0xe6>
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	442b      	add	r3, r5
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	f8d8 3000 	ldr.w	r3, [r8]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d038      	beq.n	800e1be <_malloc_r+0xf6>
 800e14c:	685a      	ldr	r2, [r3, #4]
 800e14e:	42a2      	cmp	r2, r4
 800e150:	d12b      	bne.n	800e1aa <_malloc_r+0xe2>
 800e152:	2200      	movs	r2, #0
 800e154:	605a      	str	r2, [r3, #4]
 800e156:	e00f      	b.n	800e178 <_malloc_r+0xb0>
 800e158:	6822      	ldr	r2, [r4, #0]
 800e15a:	1b52      	subs	r2, r2, r5
 800e15c:	d41f      	bmi.n	800e19e <_malloc_r+0xd6>
 800e15e:	2a0b      	cmp	r2, #11
 800e160:	d917      	bls.n	800e192 <_malloc_r+0xca>
 800e162:	1961      	adds	r1, r4, r5
 800e164:	42a3      	cmp	r3, r4
 800e166:	6025      	str	r5, [r4, #0]
 800e168:	bf18      	it	ne
 800e16a:	6059      	strne	r1, [r3, #4]
 800e16c:	6863      	ldr	r3, [r4, #4]
 800e16e:	bf08      	it	eq
 800e170:	f8c8 1000 	streq.w	r1, [r8]
 800e174:	5162      	str	r2, [r4, r5]
 800e176:	604b      	str	r3, [r1, #4]
 800e178:	4638      	mov	r0, r7
 800e17a:	f104 060b 	add.w	r6, r4, #11
 800e17e:	f000 f829 	bl	800e1d4 <__malloc_unlock>
 800e182:	f026 0607 	bic.w	r6, r6, #7
 800e186:	1d23      	adds	r3, r4, #4
 800e188:	1af2      	subs	r2, r6, r3
 800e18a:	d0ae      	beq.n	800e0ea <_malloc_r+0x22>
 800e18c:	1b9b      	subs	r3, r3, r6
 800e18e:	50a3      	str	r3, [r4, r2]
 800e190:	e7ab      	b.n	800e0ea <_malloc_r+0x22>
 800e192:	42a3      	cmp	r3, r4
 800e194:	6862      	ldr	r2, [r4, #4]
 800e196:	d1dd      	bne.n	800e154 <_malloc_r+0x8c>
 800e198:	f8c8 2000 	str.w	r2, [r8]
 800e19c:	e7ec      	b.n	800e178 <_malloc_r+0xb0>
 800e19e:	4623      	mov	r3, r4
 800e1a0:	6864      	ldr	r4, [r4, #4]
 800e1a2:	e7ac      	b.n	800e0fe <_malloc_r+0x36>
 800e1a4:	4634      	mov	r4, r6
 800e1a6:	6876      	ldr	r6, [r6, #4]
 800e1a8:	e7b4      	b.n	800e114 <_malloc_r+0x4c>
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	e7cc      	b.n	800e148 <_malloc_r+0x80>
 800e1ae:	230c      	movs	r3, #12
 800e1b0:	4638      	mov	r0, r7
 800e1b2:	603b      	str	r3, [r7, #0]
 800e1b4:	f000 f80e 	bl	800e1d4 <__malloc_unlock>
 800e1b8:	e797      	b.n	800e0ea <_malloc_r+0x22>
 800e1ba:	6025      	str	r5, [r4, #0]
 800e1bc:	e7dc      	b.n	800e178 <_malloc_r+0xb0>
 800e1be:	605b      	str	r3, [r3, #4]
 800e1c0:	deff      	udf	#255	; 0xff
 800e1c2:	bf00      	nop
 800e1c4:	200011e4 	.word	0x200011e4

0800e1c8 <__malloc_lock>:
 800e1c8:	4801      	ldr	r0, [pc, #4]	; (800e1d0 <__malloc_lock+0x8>)
 800e1ca:	f7ff bf13 	b.w	800dff4 <__retarget_lock_acquire_recursive>
 800e1ce:	bf00      	nop
 800e1d0:	200011e0 	.word	0x200011e0

0800e1d4 <__malloc_unlock>:
 800e1d4:	4801      	ldr	r0, [pc, #4]	; (800e1dc <__malloc_unlock+0x8>)
 800e1d6:	f7ff bf0e 	b.w	800dff6 <__retarget_lock_release_recursive>
 800e1da:	bf00      	nop
 800e1dc:	200011e0 	.word	0x200011e0

0800e1e0 <__ssputs_r>:
 800e1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e4:	461f      	mov	r7, r3
 800e1e6:	688e      	ldr	r6, [r1, #8]
 800e1e8:	4682      	mov	sl, r0
 800e1ea:	42be      	cmp	r6, r7
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	4690      	mov	r8, r2
 800e1f0:	680b      	ldr	r3, [r1, #0]
 800e1f2:	d82c      	bhi.n	800e24e <__ssputs_r+0x6e>
 800e1f4:	898a      	ldrh	r2, [r1, #12]
 800e1f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1fa:	d026      	beq.n	800e24a <__ssputs_r+0x6a>
 800e1fc:	6965      	ldr	r5, [r4, #20]
 800e1fe:	6909      	ldr	r1, [r1, #16]
 800e200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e204:	eba3 0901 	sub.w	r9, r3, r1
 800e208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e20c:	1c7b      	adds	r3, r7, #1
 800e20e:	444b      	add	r3, r9
 800e210:	106d      	asrs	r5, r5, #1
 800e212:	429d      	cmp	r5, r3
 800e214:	bf38      	it	cc
 800e216:	461d      	movcc	r5, r3
 800e218:	0553      	lsls	r3, r2, #21
 800e21a:	d527      	bpl.n	800e26c <__ssputs_r+0x8c>
 800e21c:	4629      	mov	r1, r5
 800e21e:	f7ff ff53 	bl	800e0c8 <_malloc_r>
 800e222:	4606      	mov	r6, r0
 800e224:	b360      	cbz	r0, 800e280 <__ssputs_r+0xa0>
 800e226:	464a      	mov	r2, r9
 800e228:	6921      	ldr	r1, [r4, #16]
 800e22a:	f000 fafd 	bl	800e828 <memcpy>
 800e22e:	89a3      	ldrh	r3, [r4, #12]
 800e230:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e238:	81a3      	strh	r3, [r4, #12]
 800e23a:	6126      	str	r6, [r4, #16]
 800e23c:	444e      	add	r6, r9
 800e23e:	6026      	str	r6, [r4, #0]
 800e240:	463e      	mov	r6, r7
 800e242:	6165      	str	r5, [r4, #20]
 800e244:	eba5 0509 	sub.w	r5, r5, r9
 800e248:	60a5      	str	r5, [r4, #8]
 800e24a:	42be      	cmp	r6, r7
 800e24c:	d900      	bls.n	800e250 <__ssputs_r+0x70>
 800e24e:	463e      	mov	r6, r7
 800e250:	4632      	mov	r2, r6
 800e252:	4641      	mov	r1, r8
 800e254:	6820      	ldr	r0, [r4, #0]
 800e256:	f000 faaf 	bl	800e7b8 <memmove>
 800e25a:	2000      	movs	r0, #0
 800e25c:	68a3      	ldr	r3, [r4, #8]
 800e25e:	1b9b      	subs	r3, r3, r6
 800e260:	60a3      	str	r3, [r4, #8]
 800e262:	6823      	ldr	r3, [r4, #0]
 800e264:	4433      	add	r3, r6
 800e266:	6023      	str	r3, [r4, #0]
 800e268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e26c:	462a      	mov	r2, r5
 800e26e:	f000 fae9 	bl	800e844 <_realloc_r>
 800e272:	4606      	mov	r6, r0
 800e274:	2800      	cmp	r0, #0
 800e276:	d1e0      	bne.n	800e23a <__ssputs_r+0x5a>
 800e278:	4650      	mov	r0, sl
 800e27a:	6921      	ldr	r1, [r4, #16]
 800e27c:	f7ff febc 	bl	800dff8 <_free_r>
 800e280:	230c      	movs	r3, #12
 800e282:	f8ca 3000 	str.w	r3, [sl]
 800e286:	89a3      	ldrh	r3, [r4, #12]
 800e288:	f04f 30ff 	mov.w	r0, #4294967295
 800e28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e290:	81a3      	strh	r3, [r4, #12]
 800e292:	e7e9      	b.n	800e268 <__ssputs_r+0x88>

0800e294 <_svfiprintf_r>:
 800e294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e298:	4698      	mov	r8, r3
 800e29a:	898b      	ldrh	r3, [r1, #12]
 800e29c:	4607      	mov	r7, r0
 800e29e:	061b      	lsls	r3, r3, #24
 800e2a0:	460d      	mov	r5, r1
 800e2a2:	4614      	mov	r4, r2
 800e2a4:	b09d      	sub	sp, #116	; 0x74
 800e2a6:	d50e      	bpl.n	800e2c6 <_svfiprintf_r+0x32>
 800e2a8:	690b      	ldr	r3, [r1, #16]
 800e2aa:	b963      	cbnz	r3, 800e2c6 <_svfiprintf_r+0x32>
 800e2ac:	2140      	movs	r1, #64	; 0x40
 800e2ae:	f7ff ff0b 	bl	800e0c8 <_malloc_r>
 800e2b2:	6028      	str	r0, [r5, #0]
 800e2b4:	6128      	str	r0, [r5, #16]
 800e2b6:	b920      	cbnz	r0, 800e2c2 <_svfiprintf_r+0x2e>
 800e2b8:	230c      	movs	r3, #12
 800e2ba:	603b      	str	r3, [r7, #0]
 800e2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c0:	e0d0      	b.n	800e464 <_svfiprintf_r+0x1d0>
 800e2c2:	2340      	movs	r3, #64	; 0x40
 800e2c4:	616b      	str	r3, [r5, #20]
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ca:	2320      	movs	r3, #32
 800e2cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2d0:	2330      	movs	r3, #48	; 0x30
 800e2d2:	f04f 0901 	mov.w	r9, #1
 800e2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800e47c <_svfiprintf_r+0x1e8>
 800e2de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2e2:	4623      	mov	r3, r4
 800e2e4:	469a      	mov	sl, r3
 800e2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2ea:	b10a      	cbz	r2, 800e2f0 <_svfiprintf_r+0x5c>
 800e2ec:	2a25      	cmp	r2, #37	; 0x25
 800e2ee:	d1f9      	bne.n	800e2e4 <_svfiprintf_r+0x50>
 800e2f0:	ebba 0b04 	subs.w	fp, sl, r4
 800e2f4:	d00b      	beq.n	800e30e <_svfiprintf_r+0x7a>
 800e2f6:	465b      	mov	r3, fp
 800e2f8:	4622      	mov	r2, r4
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	f7ff ff6f 	bl	800e1e0 <__ssputs_r>
 800e302:	3001      	adds	r0, #1
 800e304:	f000 80a9 	beq.w	800e45a <_svfiprintf_r+0x1c6>
 800e308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e30a:	445a      	add	r2, fp
 800e30c:	9209      	str	r2, [sp, #36]	; 0x24
 800e30e:	f89a 3000 	ldrb.w	r3, [sl]
 800e312:	2b00      	cmp	r3, #0
 800e314:	f000 80a1 	beq.w	800e45a <_svfiprintf_r+0x1c6>
 800e318:	2300      	movs	r3, #0
 800e31a:	f04f 32ff 	mov.w	r2, #4294967295
 800e31e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e322:	f10a 0a01 	add.w	sl, sl, #1
 800e326:	9304      	str	r3, [sp, #16]
 800e328:	9307      	str	r3, [sp, #28]
 800e32a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e32e:	931a      	str	r3, [sp, #104]	; 0x68
 800e330:	4654      	mov	r4, sl
 800e332:	2205      	movs	r2, #5
 800e334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e338:	4850      	ldr	r0, [pc, #320]	; (800e47c <_svfiprintf_r+0x1e8>)
 800e33a:	f000 fa67 	bl	800e80c <memchr>
 800e33e:	9a04      	ldr	r2, [sp, #16]
 800e340:	b9d8      	cbnz	r0, 800e37a <_svfiprintf_r+0xe6>
 800e342:	06d0      	lsls	r0, r2, #27
 800e344:	bf44      	itt	mi
 800e346:	2320      	movmi	r3, #32
 800e348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e34c:	0711      	lsls	r1, r2, #28
 800e34e:	bf44      	itt	mi
 800e350:	232b      	movmi	r3, #43	; 0x2b
 800e352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e356:	f89a 3000 	ldrb.w	r3, [sl]
 800e35a:	2b2a      	cmp	r3, #42	; 0x2a
 800e35c:	d015      	beq.n	800e38a <_svfiprintf_r+0xf6>
 800e35e:	4654      	mov	r4, sl
 800e360:	2000      	movs	r0, #0
 800e362:	f04f 0c0a 	mov.w	ip, #10
 800e366:	9a07      	ldr	r2, [sp, #28]
 800e368:	4621      	mov	r1, r4
 800e36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e36e:	3b30      	subs	r3, #48	; 0x30
 800e370:	2b09      	cmp	r3, #9
 800e372:	d94d      	bls.n	800e410 <_svfiprintf_r+0x17c>
 800e374:	b1b0      	cbz	r0, 800e3a4 <_svfiprintf_r+0x110>
 800e376:	9207      	str	r2, [sp, #28]
 800e378:	e014      	b.n	800e3a4 <_svfiprintf_r+0x110>
 800e37a:	eba0 0308 	sub.w	r3, r0, r8
 800e37e:	fa09 f303 	lsl.w	r3, r9, r3
 800e382:	4313      	orrs	r3, r2
 800e384:	46a2      	mov	sl, r4
 800e386:	9304      	str	r3, [sp, #16]
 800e388:	e7d2      	b.n	800e330 <_svfiprintf_r+0x9c>
 800e38a:	9b03      	ldr	r3, [sp, #12]
 800e38c:	1d19      	adds	r1, r3, #4
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	9103      	str	r1, [sp, #12]
 800e392:	2b00      	cmp	r3, #0
 800e394:	bfbb      	ittet	lt
 800e396:	425b      	neglt	r3, r3
 800e398:	f042 0202 	orrlt.w	r2, r2, #2
 800e39c:	9307      	strge	r3, [sp, #28]
 800e39e:	9307      	strlt	r3, [sp, #28]
 800e3a0:	bfb8      	it	lt
 800e3a2:	9204      	strlt	r2, [sp, #16]
 800e3a4:	7823      	ldrb	r3, [r4, #0]
 800e3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3a8:	d10c      	bne.n	800e3c4 <_svfiprintf_r+0x130>
 800e3aa:	7863      	ldrb	r3, [r4, #1]
 800e3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800e3ae:	d134      	bne.n	800e41a <_svfiprintf_r+0x186>
 800e3b0:	9b03      	ldr	r3, [sp, #12]
 800e3b2:	3402      	adds	r4, #2
 800e3b4:	1d1a      	adds	r2, r3, #4
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	9203      	str	r2, [sp, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	bfb8      	it	lt
 800e3be:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3c2:	9305      	str	r3, [sp, #20]
 800e3c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800e480 <_svfiprintf_r+0x1ec>
 800e3c8:	2203      	movs	r2, #3
 800e3ca:	4650      	mov	r0, sl
 800e3cc:	7821      	ldrb	r1, [r4, #0]
 800e3ce:	f000 fa1d 	bl	800e80c <memchr>
 800e3d2:	b138      	cbz	r0, 800e3e4 <_svfiprintf_r+0x150>
 800e3d4:	2240      	movs	r2, #64	; 0x40
 800e3d6:	9b04      	ldr	r3, [sp, #16]
 800e3d8:	eba0 000a 	sub.w	r0, r0, sl
 800e3dc:	4082      	lsls	r2, r0
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	3401      	adds	r4, #1
 800e3e2:	9304      	str	r3, [sp, #16]
 800e3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3e8:	2206      	movs	r2, #6
 800e3ea:	4826      	ldr	r0, [pc, #152]	; (800e484 <_svfiprintf_r+0x1f0>)
 800e3ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3f0:	f000 fa0c 	bl	800e80c <memchr>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d038      	beq.n	800e46a <_svfiprintf_r+0x1d6>
 800e3f8:	4b23      	ldr	r3, [pc, #140]	; (800e488 <_svfiprintf_r+0x1f4>)
 800e3fa:	bb1b      	cbnz	r3, 800e444 <_svfiprintf_r+0x1b0>
 800e3fc:	9b03      	ldr	r3, [sp, #12]
 800e3fe:	3307      	adds	r3, #7
 800e400:	f023 0307 	bic.w	r3, r3, #7
 800e404:	3308      	adds	r3, #8
 800e406:	9303      	str	r3, [sp, #12]
 800e408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e40a:	4433      	add	r3, r6
 800e40c:	9309      	str	r3, [sp, #36]	; 0x24
 800e40e:	e768      	b.n	800e2e2 <_svfiprintf_r+0x4e>
 800e410:	460c      	mov	r4, r1
 800e412:	2001      	movs	r0, #1
 800e414:	fb0c 3202 	mla	r2, ip, r2, r3
 800e418:	e7a6      	b.n	800e368 <_svfiprintf_r+0xd4>
 800e41a:	2300      	movs	r3, #0
 800e41c:	f04f 0c0a 	mov.w	ip, #10
 800e420:	4619      	mov	r1, r3
 800e422:	3401      	adds	r4, #1
 800e424:	9305      	str	r3, [sp, #20]
 800e426:	4620      	mov	r0, r4
 800e428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e42c:	3a30      	subs	r2, #48	; 0x30
 800e42e:	2a09      	cmp	r2, #9
 800e430:	d903      	bls.n	800e43a <_svfiprintf_r+0x1a6>
 800e432:	2b00      	cmp	r3, #0
 800e434:	d0c6      	beq.n	800e3c4 <_svfiprintf_r+0x130>
 800e436:	9105      	str	r1, [sp, #20]
 800e438:	e7c4      	b.n	800e3c4 <_svfiprintf_r+0x130>
 800e43a:	4604      	mov	r4, r0
 800e43c:	2301      	movs	r3, #1
 800e43e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e442:	e7f0      	b.n	800e426 <_svfiprintf_r+0x192>
 800e444:	ab03      	add	r3, sp, #12
 800e446:	9300      	str	r3, [sp, #0]
 800e448:	462a      	mov	r2, r5
 800e44a:	4638      	mov	r0, r7
 800e44c:	4b0f      	ldr	r3, [pc, #60]	; (800e48c <_svfiprintf_r+0x1f8>)
 800e44e:	a904      	add	r1, sp, #16
 800e450:	f3af 8000 	nop.w
 800e454:	1c42      	adds	r2, r0, #1
 800e456:	4606      	mov	r6, r0
 800e458:	d1d6      	bne.n	800e408 <_svfiprintf_r+0x174>
 800e45a:	89ab      	ldrh	r3, [r5, #12]
 800e45c:	065b      	lsls	r3, r3, #25
 800e45e:	f53f af2d 	bmi.w	800e2bc <_svfiprintf_r+0x28>
 800e462:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e464:	b01d      	add	sp, #116	; 0x74
 800e466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e46a:	ab03      	add	r3, sp, #12
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	462a      	mov	r2, r5
 800e470:	4638      	mov	r0, r7
 800e472:	4b06      	ldr	r3, [pc, #24]	; (800e48c <_svfiprintf_r+0x1f8>)
 800e474:	a904      	add	r1, sp, #16
 800e476:	f000 f87d 	bl	800e574 <_printf_i>
 800e47a:	e7eb      	b.n	800e454 <_svfiprintf_r+0x1c0>
 800e47c:	0800ec2a 	.word	0x0800ec2a
 800e480:	0800ec30 	.word	0x0800ec30
 800e484:	0800ec34 	.word	0x0800ec34
 800e488:	00000000 	.word	0x00000000
 800e48c:	0800e1e1 	.word	0x0800e1e1

0800e490 <_printf_common>:
 800e490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e494:	4616      	mov	r6, r2
 800e496:	4699      	mov	r9, r3
 800e498:	688a      	ldr	r2, [r1, #8]
 800e49a:	690b      	ldr	r3, [r1, #16]
 800e49c:	4607      	mov	r7, r0
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	bfb8      	it	lt
 800e4a2:	4613      	movlt	r3, r2
 800e4a4:	6033      	str	r3, [r6, #0]
 800e4a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4aa:	460c      	mov	r4, r1
 800e4ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4b0:	b10a      	cbz	r2, 800e4b6 <_printf_common+0x26>
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	6033      	str	r3, [r6, #0]
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	0699      	lsls	r1, r3, #26
 800e4ba:	bf42      	ittt	mi
 800e4bc:	6833      	ldrmi	r3, [r6, #0]
 800e4be:	3302      	addmi	r3, #2
 800e4c0:	6033      	strmi	r3, [r6, #0]
 800e4c2:	6825      	ldr	r5, [r4, #0]
 800e4c4:	f015 0506 	ands.w	r5, r5, #6
 800e4c8:	d106      	bne.n	800e4d8 <_printf_common+0x48>
 800e4ca:	f104 0a19 	add.w	sl, r4, #25
 800e4ce:	68e3      	ldr	r3, [r4, #12]
 800e4d0:	6832      	ldr	r2, [r6, #0]
 800e4d2:	1a9b      	subs	r3, r3, r2
 800e4d4:	42ab      	cmp	r3, r5
 800e4d6:	dc2b      	bgt.n	800e530 <_printf_common+0xa0>
 800e4d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4dc:	1e13      	subs	r3, r2, #0
 800e4de:	6822      	ldr	r2, [r4, #0]
 800e4e0:	bf18      	it	ne
 800e4e2:	2301      	movne	r3, #1
 800e4e4:	0692      	lsls	r2, r2, #26
 800e4e6:	d430      	bmi.n	800e54a <_printf_common+0xba>
 800e4e8:	4649      	mov	r1, r9
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4f0:	47c0      	blx	r8
 800e4f2:	3001      	adds	r0, #1
 800e4f4:	d023      	beq.n	800e53e <_printf_common+0xae>
 800e4f6:	6823      	ldr	r3, [r4, #0]
 800e4f8:	6922      	ldr	r2, [r4, #16]
 800e4fa:	f003 0306 	and.w	r3, r3, #6
 800e4fe:	2b04      	cmp	r3, #4
 800e500:	bf14      	ite	ne
 800e502:	2500      	movne	r5, #0
 800e504:	6833      	ldreq	r3, [r6, #0]
 800e506:	f04f 0600 	mov.w	r6, #0
 800e50a:	bf08      	it	eq
 800e50c:	68e5      	ldreq	r5, [r4, #12]
 800e50e:	f104 041a 	add.w	r4, r4, #26
 800e512:	bf08      	it	eq
 800e514:	1aed      	subeq	r5, r5, r3
 800e516:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e51a:	bf08      	it	eq
 800e51c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e520:	4293      	cmp	r3, r2
 800e522:	bfc4      	itt	gt
 800e524:	1a9b      	subgt	r3, r3, r2
 800e526:	18ed      	addgt	r5, r5, r3
 800e528:	42b5      	cmp	r5, r6
 800e52a:	d11a      	bne.n	800e562 <_printf_common+0xd2>
 800e52c:	2000      	movs	r0, #0
 800e52e:	e008      	b.n	800e542 <_printf_common+0xb2>
 800e530:	2301      	movs	r3, #1
 800e532:	4652      	mov	r2, sl
 800e534:	4649      	mov	r1, r9
 800e536:	4638      	mov	r0, r7
 800e538:	47c0      	blx	r8
 800e53a:	3001      	adds	r0, #1
 800e53c:	d103      	bne.n	800e546 <_printf_common+0xb6>
 800e53e:	f04f 30ff 	mov.w	r0, #4294967295
 800e542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e546:	3501      	adds	r5, #1
 800e548:	e7c1      	b.n	800e4ce <_printf_common+0x3e>
 800e54a:	2030      	movs	r0, #48	; 0x30
 800e54c:	18e1      	adds	r1, r4, r3
 800e54e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e558:	4422      	add	r2, r4
 800e55a:	3302      	adds	r3, #2
 800e55c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e560:	e7c2      	b.n	800e4e8 <_printf_common+0x58>
 800e562:	2301      	movs	r3, #1
 800e564:	4622      	mov	r2, r4
 800e566:	4649      	mov	r1, r9
 800e568:	4638      	mov	r0, r7
 800e56a:	47c0      	blx	r8
 800e56c:	3001      	adds	r0, #1
 800e56e:	d0e6      	beq.n	800e53e <_printf_common+0xae>
 800e570:	3601      	adds	r6, #1
 800e572:	e7d9      	b.n	800e528 <_printf_common+0x98>

0800e574 <_printf_i>:
 800e574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e578:	7e0f      	ldrb	r7, [r1, #24]
 800e57a:	4691      	mov	r9, r2
 800e57c:	2f78      	cmp	r7, #120	; 0x78
 800e57e:	4680      	mov	r8, r0
 800e580:	460c      	mov	r4, r1
 800e582:	469a      	mov	sl, r3
 800e584:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e58a:	d807      	bhi.n	800e59c <_printf_i+0x28>
 800e58c:	2f62      	cmp	r7, #98	; 0x62
 800e58e:	d80a      	bhi.n	800e5a6 <_printf_i+0x32>
 800e590:	2f00      	cmp	r7, #0
 800e592:	f000 80d5 	beq.w	800e740 <_printf_i+0x1cc>
 800e596:	2f58      	cmp	r7, #88	; 0x58
 800e598:	f000 80c1 	beq.w	800e71e <_printf_i+0x1aa>
 800e59c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5a4:	e03a      	b.n	800e61c <_printf_i+0xa8>
 800e5a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5aa:	2b15      	cmp	r3, #21
 800e5ac:	d8f6      	bhi.n	800e59c <_printf_i+0x28>
 800e5ae:	a101      	add	r1, pc, #4	; (adr r1, 800e5b4 <_printf_i+0x40>)
 800e5b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5b4:	0800e60d 	.word	0x0800e60d
 800e5b8:	0800e621 	.word	0x0800e621
 800e5bc:	0800e59d 	.word	0x0800e59d
 800e5c0:	0800e59d 	.word	0x0800e59d
 800e5c4:	0800e59d 	.word	0x0800e59d
 800e5c8:	0800e59d 	.word	0x0800e59d
 800e5cc:	0800e621 	.word	0x0800e621
 800e5d0:	0800e59d 	.word	0x0800e59d
 800e5d4:	0800e59d 	.word	0x0800e59d
 800e5d8:	0800e59d 	.word	0x0800e59d
 800e5dc:	0800e59d 	.word	0x0800e59d
 800e5e0:	0800e727 	.word	0x0800e727
 800e5e4:	0800e64d 	.word	0x0800e64d
 800e5e8:	0800e6e1 	.word	0x0800e6e1
 800e5ec:	0800e59d 	.word	0x0800e59d
 800e5f0:	0800e59d 	.word	0x0800e59d
 800e5f4:	0800e749 	.word	0x0800e749
 800e5f8:	0800e59d 	.word	0x0800e59d
 800e5fc:	0800e64d 	.word	0x0800e64d
 800e600:	0800e59d 	.word	0x0800e59d
 800e604:	0800e59d 	.word	0x0800e59d
 800e608:	0800e6e9 	.word	0x0800e6e9
 800e60c:	682b      	ldr	r3, [r5, #0]
 800e60e:	1d1a      	adds	r2, r3, #4
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	602a      	str	r2, [r5, #0]
 800e614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e61c:	2301      	movs	r3, #1
 800e61e:	e0a0      	b.n	800e762 <_printf_i+0x1ee>
 800e620:	6820      	ldr	r0, [r4, #0]
 800e622:	682b      	ldr	r3, [r5, #0]
 800e624:	0607      	lsls	r7, r0, #24
 800e626:	f103 0104 	add.w	r1, r3, #4
 800e62a:	6029      	str	r1, [r5, #0]
 800e62c:	d501      	bpl.n	800e632 <_printf_i+0xbe>
 800e62e:	681e      	ldr	r6, [r3, #0]
 800e630:	e003      	b.n	800e63a <_printf_i+0xc6>
 800e632:	0646      	lsls	r6, r0, #25
 800e634:	d5fb      	bpl.n	800e62e <_printf_i+0xba>
 800e636:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e63a:	2e00      	cmp	r6, #0
 800e63c:	da03      	bge.n	800e646 <_printf_i+0xd2>
 800e63e:	232d      	movs	r3, #45	; 0x2d
 800e640:	4276      	negs	r6, r6
 800e642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e646:	230a      	movs	r3, #10
 800e648:	4859      	ldr	r0, [pc, #356]	; (800e7b0 <_printf_i+0x23c>)
 800e64a:	e012      	b.n	800e672 <_printf_i+0xfe>
 800e64c:	682b      	ldr	r3, [r5, #0]
 800e64e:	6820      	ldr	r0, [r4, #0]
 800e650:	1d19      	adds	r1, r3, #4
 800e652:	6029      	str	r1, [r5, #0]
 800e654:	0605      	lsls	r5, r0, #24
 800e656:	d501      	bpl.n	800e65c <_printf_i+0xe8>
 800e658:	681e      	ldr	r6, [r3, #0]
 800e65a:	e002      	b.n	800e662 <_printf_i+0xee>
 800e65c:	0641      	lsls	r1, r0, #25
 800e65e:	d5fb      	bpl.n	800e658 <_printf_i+0xe4>
 800e660:	881e      	ldrh	r6, [r3, #0]
 800e662:	2f6f      	cmp	r7, #111	; 0x6f
 800e664:	bf0c      	ite	eq
 800e666:	2308      	moveq	r3, #8
 800e668:	230a      	movne	r3, #10
 800e66a:	4851      	ldr	r0, [pc, #324]	; (800e7b0 <_printf_i+0x23c>)
 800e66c:	2100      	movs	r1, #0
 800e66e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e672:	6865      	ldr	r5, [r4, #4]
 800e674:	2d00      	cmp	r5, #0
 800e676:	bfa8      	it	ge
 800e678:	6821      	ldrge	r1, [r4, #0]
 800e67a:	60a5      	str	r5, [r4, #8]
 800e67c:	bfa4      	itt	ge
 800e67e:	f021 0104 	bicge.w	r1, r1, #4
 800e682:	6021      	strge	r1, [r4, #0]
 800e684:	b90e      	cbnz	r6, 800e68a <_printf_i+0x116>
 800e686:	2d00      	cmp	r5, #0
 800e688:	d04b      	beq.n	800e722 <_printf_i+0x1ae>
 800e68a:	4615      	mov	r5, r2
 800e68c:	fbb6 f1f3 	udiv	r1, r6, r3
 800e690:	fb03 6711 	mls	r7, r3, r1, r6
 800e694:	5dc7      	ldrb	r7, [r0, r7]
 800e696:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e69a:	4637      	mov	r7, r6
 800e69c:	42bb      	cmp	r3, r7
 800e69e:	460e      	mov	r6, r1
 800e6a0:	d9f4      	bls.n	800e68c <_printf_i+0x118>
 800e6a2:	2b08      	cmp	r3, #8
 800e6a4:	d10b      	bne.n	800e6be <_printf_i+0x14a>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	07de      	lsls	r6, r3, #31
 800e6aa:	d508      	bpl.n	800e6be <_printf_i+0x14a>
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	6861      	ldr	r1, [r4, #4]
 800e6b0:	4299      	cmp	r1, r3
 800e6b2:	bfde      	ittt	le
 800e6b4:	2330      	movle	r3, #48	; 0x30
 800e6b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6be:	1b52      	subs	r2, r2, r5
 800e6c0:	6122      	str	r2, [r4, #16]
 800e6c2:	464b      	mov	r3, r9
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	f8cd a000 	str.w	sl, [sp]
 800e6cc:	aa03      	add	r2, sp, #12
 800e6ce:	f7ff fedf 	bl	800e490 <_printf_common>
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	d14a      	bne.n	800e76c <_printf_i+0x1f8>
 800e6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6da:	b004      	add	sp, #16
 800e6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6e0:	6823      	ldr	r3, [r4, #0]
 800e6e2:	f043 0320 	orr.w	r3, r3, #32
 800e6e6:	6023      	str	r3, [r4, #0]
 800e6e8:	2778      	movs	r7, #120	; 0x78
 800e6ea:	4832      	ldr	r0, [pc, #200]	; (800e7b4 <_printf_i+0x240>)
 800e6ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e6f0:	6823      	ldr	r3, [r4, #0]
 800e6f2:	6829      	ldr	r1, [r5, #0]
 800e6f4:	061f      	lsls	r7, r3, #24
 800e6f6:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6fa:	d402      	bmi.n	800e702 <_printf_i+0x18e>
 800e6fc:	065f      	lsls	r7, r3, #25
 800e6fe:	bf48      	it	mi
 800e700:	b2b6      	uxthmi	r6, r6
 800e702:	07df      	lsls	r7, r3, #31
 800e704:	bf48      	it	mi
 800e706:	f043 0320 	orrmi.w	r3, r3, #32
 800e70a:	6029      	str	r1, [r5, #0]
 800e70c:	bf48      	it	mi
 800e70e:	6023      	strmi	r3, [r4, #0]
 800e710:	b91e      	cbnz	r6, 800e71a <_printf_i+0x1a6>
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	f023 0320 	bic.w	r3, r3, #32
 800e718:	6023      	str	r3, [r4, #0]
 800e71a:	2310      	movs	r3, #16
 800e71c:	e7a6      	b.n	800e66c <_printf_i+0xf8>
 800e71e:	4824      	ldr	r0, [pc, #144]	; (800e7b0 <_printf_i+0x23c>)
 800e720:	e7e4      	b.n	800e6ec <_printf_i+0x178>
 800e722:	4615      	mov	r5, r2
 800e724:	e7bd      	b.n	800e6a2 <_printf_i+0x12e>
 800e726:	682b      	ldr	r3, [r5, #0]
 800e728:	6826      	ldr	r6, [r4, #0]
 800e72a:	1d18      	adds	r0, r3, #4
 800e72c:	6961      	ldr	r1, [r4, #20]
 800e72e:	6028      	str	r0, [r5, #0]
 800e730:	0635      	lsls	r5, r6, #24
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	d501      	bpl.n	800e73a <_printf_i+0x1c6>
 800e736:	6019      	str	r1, [r3, #0]
 800e738:	e002      	b.n	800e740 <_printf_i+0x1cc>
 800e73a:	0670      	lsls	r0, r6, #25
 800e73c:	d5fb      	bpl.n	800e736 <_printf_i+0x1c2>
 800e73e:	8019      	strh	r1, [r3, #0]
 800e740:	2300      	movs	r3, #0
 800e742:	4615      	mov	r5, r2
 800e744:	6123      	str	r3, [r4, #16]
 800e746:	e7bc      	b.n	800e6c2 <_printf_i+0x14e>
 800e748:	682b      	ldr	r3, [r5, #0]
 800e74a:	2100      	movs	r1, #0
 800e74c:	1d1a      	adds	r2, r3, #4
 800e74e:	602a      	str	r2, [r5, #0]
 800e750:	681d      	ldr	r5, [r3, #0]
 800e752:	6862      	ldr	r2, [r4, #4]
 800e754:	4628      	mov	r0, r5
 800e756:	f000 f859 	bl	800e80c <memchr>
 800e75a:	b108      	cbz	r0, 800e760 <_printf_i+0x1ec>
 800e75c:	1b40      	subs	r0, r0, r5
 800e75e:	6060      	str	r0, [r4, #4]
 800e760:	6863      	ldr	r3, [r4, #4]
 800e762:	6123      	str	r3, [r4, #16]
 800e764:	2300      	movs	r3, #0
 800e766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e76a:	e7aa      	b.n	800e6c2 <_printf_i+0x14e>
 800e76c:	462a      	mov	r2, r5
 800e76e:	4649      	mov	r1, r9
 800e770:	4640      	mov	r0, r8
 800e772:	6923      	ldr	r3, [r4, #16]
 800e774:	47d0      	blx	sl
 800e776:	3001      	adds	r0, #1
 800e778:	d0ad      	beq.n	800e6d6 <_printf_i+0x162>
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	079b      	lsls	r3, r3, #30
 800e77e:	d413      	bmi.n	800e7a8 <_printf_i+0x234>
 800e780:	68e0      	ldr	r0, [r4, #12]
 800e782:	9b03      	ldr	r3, [sp, #12]
 800e784:	4298      	cmp	r0, r3
 800e786:	bfb8      	it	lt
 800e788:	4618      	movlt	r0, r3
 800e78a:	e7a6      	b.n	800e6da <_printf_i+0x166>
 800e78c:	2301      	movs	r3, #1
 800e78e:	4632      	mov	r2, r6
 800e790:	4649      	mov	r1, r9
 800e792:	4640      	mov	r0, r8
 800e794:	47d0      	blx	sl
 800e796:	3001      	adds	r0, #1
 800e798:	d09d      	beq.n	800e6d6 <_printf_i+0x162>
 800e79a:	3501      	adds	r5, #1
 800e79c:	68e3      	ldr	r3, [r4, #12]
 800e79e:	9903      	ldr	r1, [sp, #12]
 800e7a0:	1a5b      	subs	r3, r3, r1
 800e7a2:	42ab      	cmp	r3, r5
 800e7a4:	dcf2      	bgt.n	800e78c <_printf_i+0x218>
 800e7a6:	e7eb      	b.n	800e780 <_printf_i+0x20c>
 800e7a8:	2500      	movs	r5, #0
 800e7aa:	f104 0619 	add.w	r6, r4, #25
 800e7ae:	e7f5      	b.n	800e79c <_printf_i+0x228>
 800e7b0:	0800ec3b 	.word	0x0800ec3b
 800e7b4:	0800ec4c 	.word	0x0800ec4c

0800e7b8 <memmove>:
 800e7b8:	4288      	cmp	r0, r1
 800e7ba:	b510      	push	{r4, lr}
 800e7bc:	eb01 0402 	add.w	r4, r1, r2
 800e7c0:	d902      	bls.n	800e7c8 <memmove+0x10>
 800e7c2:	4284      	cmp	r4, r0
 800e7c4:	4623      	mov	r3, r4
 800e7c6:	d807      	bhi.n	800e7d8 <memmove+0x20>
 800e7c8:	1e43      	subs	r3, r0, #1
 800e7ca:	42a1      	cmp	r1, r4
 800e7cc:	d008      	beq.n	800e7e0 <memmove+0x28>
 800e7ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7d6:	e7f8      	b.n	800e7ca <memmove+0x12>
 800e7d8:	4601      	mov	r1, r0
 800e7da:	4402      	add	r2, r0
 800e7dc:	428a      	cmp	r2, r1
 800e7de:	d100      	bne.n	800e7e2 <memmove+0x2a>
 800e7e0:	bd10      	pop	{r4, pc}
 800e7e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7ea:	e7f7      	b.n	800e7dc <memmove+0x24>

0800e7ec <_sbrk_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	4d05      	ldr	r5, [pc, #20]	; (800e808 <_sbrk_r+0x1c>)
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	f7f7 fb20 	bl	8005e3c <_sbrk>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_sbrk_r+0x1a>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_sbrk_r+0x1a>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	200011dc 	.word	0x200011dc

0800e80c <memchr>:
 800e80c:	4603      	mov	r3, r0
 800e80e:	b510      	push	{r4, lr}
 800e810:	b2c9      	uxtb	r1, r1
 800e812:	4402      	add	r2, r0
 800e814:	4293      	cmp	r3, r2
 800e816:	4618      	mov	r0, r3
 800e818:	d101      	bne.n	800e81e <memchr+0x12>
 800e81a:	2000      	movs	r0, #0
 800e81c:	e003      	b.n	800e826 <memchr+0x1a>
 800e81e:	7804      	ldrb	r4, [r0, #0]
 800e820:	3301      	adds	r3, #1
 800e822:	428c      	cmp	r4, r1
 800e824:	d1f6      	bne.n	800e814 <memchr+0x8>
 800e826:	bd10      	pop	{r4, pc}

0800e828 <memcpy>:
 800e828:	440a      	add	r2, r1
 800e82a:	4291      	cmp	r1, r2
 800e82c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e830:	d100      	bne.n	800e834 <memcpy+0xc>
 800e832:	4770      	bx	lr
 800e834:	b510      	push	{r4, lr}
 800e836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e83a:	4291      	cmp	r1, r2
 800e83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e840:	d1f9      	bne.n	800e836 <memcpy+0xe>
 800e842:	bd10      	pop	{r4, pc}

0800e844 <_realloc_r>:
 800e844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e848:	4680      	mov	r8, r0
 800e84a:	4614      	mov	r4, r2
 800e84c:	460e      	mov	r6, r1
 800e84e:	b921      	cbnz	r1, 800e85a <_realloc_r+0x16>
 800e850:	4611      	mov	r1, r2
 800e852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e856:	f7ff bc37 	b.w	800e0c8 <_malloc_r>
 800e85a:	b92a      	cbnz	r2, 800e868 <_realloc_r+0x24>
 800e85c:	f7ff fbcc 	bl	800dff8 <_free_r>
 800e860:	4625      	mov	r5, r4
 800e862:	4628      	mov	r0, r5
 800e864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e868:	f000 f81b 	bl	800e8a2 <_malloc_usable_size_r>
 800e86c:	4284      	cmp	r4, r0
 800e86e:	4607      	mov	r7, r0
 800e870:	d802      	bhi.n	800e878 <_realloc_r+0x34>
 800e872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e876:	d812      	bhi.n	800e89e <_realloc_r+0x5a>
 800e878:	4621      	mov	r1, r4
 800e87a:	4640      	mov	r0, r8
 800e87c:	f7ff fc24 	bl	800e0c8 <_malloc_r>
 800e880:	4605      	mov	r5, r0
 800e882:	2800      	cmp	r0, #0
 800e884:	d0ed      	beq.n	800e862 <_realloc_r+0x1e>
 800e886:	42bc      	cmp	r4, r7
 800e888:	4622      	mov	r2, r4
 800e88a:	4631      	mov	r1, r6
 800e88c:	bf28      	it	cs
 800e88e:	463a      	movcs	r2, r7
 800e890:	f7ff ffca 	bl	800e828 <memcpy>
 800e894:	4631      	mov	r1, r6
 800e896:	4640      	mov	r0, r8
 800e898:	f7ff fbae 	bl	800dff8 <_free_r>
 800e89c:	e7e1      	b.n	800e862 <_realloc_r+0x1e>
 800e89e:	4635      	mov	r5, r6
 800e8a0:	e7df      	b.n	800e862 <_realloc_r+0x1e>

0800e8a2 <_malloc_usable_size_r>:
 800e8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8a6:	1f18      	subs	r0, r3, #4
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	bfbc      	itt	lt
 800e8ac:	580b      	ldrlt	r3, [r1, r0]
 800e8ae:	18c0      	addlt	r0, r0, r3
 800e8b0:	4770      	bx	lr
	...

0800e8b4 <_init>:
 800e8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b6:	bf00      	nop
 800e8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ba:	bc08      	pop	{r3}
 800e8bc:	469e      	mov	lr, r3
 800e8be:	4770      	bx	lr

0800e8c0 <_fini>:
 800e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c2:	bf00      	nop
 800e8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8c6:	bc08      	pop	{r3}
 800e8c8:	469e      	mov	lr, r3
 800e8ca:	4770      	bx	lr
